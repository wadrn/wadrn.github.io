{"meta":{"version":1,"warehouse":"3.0.2"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/anime.min.js","path":"lib/anime.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"de7610198cf7092db814e46d17b75d0c87cdc7cd","modified":1583076011249},{"_id":"themes/next/.eslintrc.json","hash":"cc5f297f0322672fe3f684f823bc4659e4a54c41","modified":1583061865566},{"_id":"themes/next/.editorconfig","hash":"8570735a8d8d034a3a175afd1dd40b39140b3e6a","modified":1583061865566},{"_id":"themes/next/.gitattributes","hash":"a54f902957d49356376b59287b894b1a3d7a003f","modified":1583061865566},{"_id":"themes/next/.gitignore","hash":"7b68ca7a46104cf9aa84ec0541a4856ab1836eca","modified":1583061865571},{"_id":"themes/next/.travis.yml","hash":"ecca3b919a5b15886e3eca58aa84aafc395590da","modified":1583061865571},{"_id":"themes/next/.stylintrc","hash":"2cf4d637b56d8eb423f59656a11f6403aa90f550","modified":1583061865571},{"_id":"themes/next/LICENSE.md","hash":"18144d8ed58c75af66cb419d54f3f63374cd5c5b","modified":1583061865571},{"_id":"themes/next/README.md","hash":"d3035c6961280c1b4afb3a07661f5a635ce1eaff","modified":1583061865572},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1583061865572},{"_id":"themes/next/_config.yml","hash":"5d5638579dafe7d43795db4883adcb49cb4ea9b4","modified":1583061865572},{"_id":"themes/next/gulpfile.js","hash":"72e6d5a6e32d5f95d82e4c4d0c963d39555bb760","modified":1583061865578},{"_id":"themes/next/package.json","hash":"2941b27b2f62b5fe4821556de8cb90b570fbfb1d","modified":1583061865594},{"_id":"source/categories/index.md","hash":"a3707a64c5ccdbb5b0b2b193f3a14aacbed37ef8","modified":1583065427349},{"_id":"source/tags/index.md","hash":"f9fc6a0c5a7a165430f00e0a67cb67d840b4414e","modified":1583065459695},{"_id":"source/_posts/2017-03-07-生成字典序.md","hash":"6cce6cdcbb403aba8037539435248361cf13b625","modified":1583064577506},{"_id":"source/_posts/2017-03-10-动态规划.md","hash":"7d09f110e64c2281affb5fdc198fd0a49102b8c5","modified":1583064577507},{"_id":"source/_posts/2017-03-14-CSS3 语法.md","hash":"406cb8d812bd28b92f192de18337c133a52eec80","modified":1583064577507},{"_id":"source/_posts/2017-03-16-React.md","hash":"bb55e413f884e0e9606db1db36ee503a4395e66e","modified":1583064577508},{"_id":"source/_posts/2017-04-05-react-router.md","hash":"a81922cce27bb1ed1ba32f9a7e55ac30b4356c40","modified":1583064577510},{"_id":"source/_posts/2017-03-28-redux.md","hash":"c9a8c0bf73a750fc76dc606fb617115889565a92","modified":1583064577509},{"_id":"source/_posts/2017-04-05-serverside or brower.md","hash":"792889d8d2d322b840bbacdaa15e8730f12b1613","modified":1583064577511},{"_id":"source/_posts/2017-04-21-JS设计模式.md","hash":"e7cacc9151bcd702b82d4ccad5415705260e3415","modified":1583064577512},{"_id":"source/_posts/2017-07-01-jquery源码解析.md","hash":"6d54bf3f8371349a2b05b210d81efc8ab6f50680","modified":1583064577513},{"_id":"source/_posts/2017-09-12-单页面应用.md","hash":"141a430a66e2b916c6b49d3ddda567ca24958a9e","modified":1583064577514},{"_id":"source/_posts/2017-09-01-读ES6标准入门.md","hash":"ccef1e57f6bec6b71ddef08849415089bf810a31","modified":1583064577514},{"_id":"source/_posts/2017-09-22-最大递增子序列.md","hash":"d7bab4c16b783c95b295f257b8860c64822031f3","modified":1583064577515},{"_id":"source/_posts/2017-09-20-leetcode380.md","hash":"7fd080e7dc00097580d5d311969981ac608f74a6","modified":1583064577515},{"_id":"source/_posts/2017-12-19-通过遍历构造二叉树总结.md","hash":"500b8542eb14bdac599ed522e0d594d64b23882b","modified":1583064577516},{"_id":"source/_posts/2017-12-20-数组操作总结.md","hash":"ff2b195ac3e58e64a354f67ab39c5855528d604e","modified":1583064577516},{"_id":"source/_posts/2017-12-29-sort.md","hash":"8deb1b200bedf54849f5c2e1a9d11206e8c27c43","modified":1583064577518},{"_id":"source/_posts/2017-12-25-css置换元素和非置换元素.md","hash":"9e052eb6b7829d31bf9606b120bf6000926e5a2f","modified":1583064577517},{"_id":"source/_posts/2018-01-04-binarySearch.md","hash":"4ead5455b7e53000b029119b8735ea3e5457a180","modified":1583064577519},{"_id":"source/_posts/2018-03-07-webpack.md","hash":"3b42077d69d704d98a248898fba3e001d52f1ac3","modified":1583064577520},{"_id":"source/_posts/2018-03-22-浏览器缓存.md","hash":"6f4d90f0bffe259accd69a09e9441131206109bb","modified":1583064577520},{"_id":"source/_posts/2018-03-25-js设计模式与开发实践（一）.md","hash":"4b5a9aae8cb86746948b8af511e4b54307fe081f","modified":1583064577521},{"_id":"source/_posts/2018-09-23-React高阶组件.md","hash":"2d3905ff012f4d68e5ca72adb9c96f824af4b3c5","modified":1583065914934},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"aa4cb7aff595ca628cb58160ee1eee117989ec4e","modified":1583061865567},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"1b87a7d22d466d78856900bd94875944181c991a","modified":1583061865567},{"_id":"source/_posts/2018-03-27-Promise总结.md","hash":"36528aa0ad7f4a321f8239b5c7550db53dd1401a","modified":1583064577522},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"398a107b5e28fd61fb759b0c0f1c8f39d1c6d2ad","modified":1583061865569},{"_id":"source/_posts/2018-09-20-XSS和CSRF认知.md","hash":"27b77570bc870b5ae4266f3f08b86ce070425b9d","modified":1583064577523},{"_id":"themes/next/.github/config.yml","hash":"e4f4b9afe59bc508c4f7634895b33d7d460a7cb1","modified":1583061865569},{"_id":"themes/next/.github/issue-close-app.yml","hash":"7cba457eec47dbfcfd4086acd1c69eaafca2f0cd","modified":1583061865569},{"_id":"themes/next/.github/issue_label_bot.yaml","hash":"fca600ddef6f80c5e61aeed21722d191e5606e5b","modified":1583061865569},{"_id":"themes/next/.github/mergeable.yml","hash":"0ee56e23bbc71e1e76427d2bd255a9879bd36e22","modified":1583061865570},{"_id":"themes/next/.github/lock.yml","hash":"61173b9522ebac13db2c544e138808295624f7fd","modified":1583061865570},{"_id":"themes/next/.github/release-drafter.yml","hash":"3cc10ce75ecc03a5ce86b00363e2a17eb65d15ea","modified":1583061865570},{"_id":"themes/next/.github/stale.yml","hash":"941209526c2f7d916c76163c9e1ac1af9d956679","modified":1583061865570},{"_id":"themes/next/.github/support.yml","hash":"d75db6ffa7b4ca3b865a925f9de9aef3fc51925c","modified":1583061865571},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1583061865573},{"_id":"themes/next/docs/AUTHORS.md","hash":"10135a2f78ac40e9f46b3add3e360c025400752f","modified":1583061865573},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"c7a994b9542040317d8f99affa1405c143a94a38","modified":1583061865573},{"_id":"themes/next/docs/DATA-FILES.md","hash":"40a8089076005e0d26ef7c0db58a2b5b464cda6c","modified":1583061865573},{"_id":"themes/next/docs/LICENSE.txt","hash":"368bf2c29d70f27d8726dd914f1b3211cae4bbab","modified":1583061865574},{"_id":"themes/next/docs/INSTALLATION.md","hash":"af88bcce035780aaa061261ed9d0d6c697678618","modified":1583061865574},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"a6e625cb0805a5c246820c561ba8f7f59c9b5659","modified":1583061865574},{"_id":"themes/next/docs/MATH.md","hash":"d645b025ec7fb9fbf799b9bb76af33b9f5b9ed93","modified":1583061865574},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"682937d48bf5d243842a76190921322e26c75247","modified":1583061865574},{"_id":"themes/next/languages/de.yml","hash":"109943f7adcd5cdbe4c6c95c9d279603f07edacb","modified":1583061865579},{"_id":"themes/next/languages/default.yml","hash":"20f951dc4df8602ffdd05a1d5899c5a9bc1759cc","modified":1583061865579},{"_id":"themes/next/languages/en.yml","hash":"20f951dc4df8602ffdd05a1d5899c5a9bc1759cc","modified":1583061865579},{"_id":"themes/next/languages/es.yml","hash":"53ef4a621fd628748b8ed711fe86080e9c9c91c8","modified":1583061865579},{"_id":"themes/next/languages/fr.yml","hash":"578a30a51b9ecbbcb4c200362ad9a37ffd3272db","modified":1583061865580},{"_id":"themes/next/languages/fa.yml","hash":"a24e0cf28e9f137d0d2219498778693c3c3960b2","modified":1583061865579},{"_id":"themes/next/languages/hu.yml","hash":"074d069af9aed5ad34fa809bd058a3b9e2d01051","modified":1583061865580},{"_id":"themes/next/languages/it.yml","hash":"ba2c8f51f2f719dabe71b6053c6fe6866161ec66","modified":1583061865580},{"_id":"themes/next/languages/id.yml","hash":"6037450ecd02796e08ca2e98037845b7c30c2807","modified":1583061865580},{"_id":"themes/next/languages/ko.yml","hash":"4aa8f3bf06e02879863b19901476cb23ecd2d709","modified":1583061865581},{"_id":"themes/next/languages/ja.yml","hash":"5e13b521201944815665bd077b65d7ce69622b81","modified":1583061865580},{"_id":"themes/next/languages/pt-BR.yml","hash":"0660471e067d01ec80962d5721ae282aafff274d","modified":1583061865581},{"_id":"themes/next/languages/ru.yml","hash":"7dcb2aab65a4b202476856f3e004862334229bcb","modified":1583061865581},{"_id":"themes/next/languages/pt.yml","hash":"f7516b9d86b52c80bf63d3efc7ee6fd985205001","modified":1583061865581},{"_id":"themes/next/languages/nl.yml","hash":"e27b29c60d88ef4c30de291b595cf8cad639c5d1","modified":1583061865581},{"_id":"themes/next/languages/tr.yml","hash":"145d28f6f051129dc6393affe8f68cd7ba925078","modified":1583061865582},{"_id":"themes/next/languages/vi.yml","hash":"ffc144f606e171fdd8cdb41808ac36e406015a54","modified":1583061865582},{"_id":"themes/next/languages/uk.yml","hash":"21a573cdf8e26d87d5e32c5555bc645983268abe","modified":1583061865582},{"_id":"themes/next/languages/zh-CN.yml","hash":"038c3a650d2e3a288be9ba6580564172c50b4289","modified":1583061865583},{"_id":"themes/next/languages/zh-HK.yml","hash":"2620632caa3c94022d9513ab1971d15512e737e7","modified":1583061865583},{"_id":"themes/next/languages/zh-TW.yml","hash":"0964e90406bbd495e901d6b9d5f10124c8cad950","modified":1583061865583},{"_id":"themes/next/layout/_layout.swig","hash":"29ee038b0d5ffdb45327598733ea968588367769","modified":1583061865584},{"_id":"themes/next/layout/archive.swig","hash":"26526c09a4334099e2141456697696fcd1f9783f","modified":1583061865594},{"_id":"themes/next/layout/category.swig","hash":"c55debb2588e4746b02d31ec249bf0a84fdea260","modified":1583061865594},{"_id":"themes/next/layout/index.swig","hash":"3bc6fb1e9707d74b96e1346d3f03fe6584f764f4","modified":1583061865594},{"_id":"themes/next/layout/post.swig","hash":"382d9f9a9b35e1f369585f7f9f9b5dd6fa58d2f0","modified":1583061865594},{"_id":"themes/next/layout/page.swig","hash":"ae6c8549242c1fb2483fd68ce9ae1c083785e2ff","modified":1583061865594},{"_id":"themes/next/layout/tag.swig","hash":"7ff6e34d557a3da1c6a29ecd97842bf73ff213dc","modified":1583061865594},{"_id":"themes/next/scripts/renderer.js","hash":"49a65df2028a1bc24814dc72fa50d52231ca4f05","modified":1583061865597},{"_id":"source/_posts/2017-03-06-前端面试总结.md","hash":"1584d424a0e315ef6f622e528265995e38d50630","modified":1583065924566},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"8ae029084b9ac482adf0fae2a0979dd388476513","modified":1583061865568},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"7a9526f749205c882d672a4f51e6a3033c80ca6e","modified":1583061865568},{"_id":"themes/next/.github/ISSUE_TEMPLATE/other.md","hash":"89667adbb85c25716dba607cd7a38191acf60736","modified":1583061865568},{"_id":"themes/next/.github/ISSUE_TEMPLATE/question.md","hash":"789a3cceb8f37a4b63b1fb2452a03332a3c365ed","modified":1583061865569},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"fe3f5cda1975114884d84bef384a562920d70335","modified":1583061865575},{"_id":"themes/next/docs/ru/README.md","hash":"2b3988e79d96b66640d6a98f0c0e6de9099805e6","modified":1583061865575},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"0bd2d696f62a997a11a7d84fec0130122234174e","modified":1583061865575},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"9c4fe2873123bf9ceacab5c50d17d8a0f1baef27","modified":1583061865575},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"d3f03be036b75dc71cf3c366cd75aee7c127c874","modified":1583061865576},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"34b88784ec120dfdc20fa82aadeb5f64ef614d14","modified":1583061865576},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"fb23b85db6f7d8279d73ae1f41631f92f64fc864","modified":1583061865576},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"ca1030efdfca5e20f9db2e7a428998e66a24c0d0","modified":1583061865577},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"579c7bd8341873fb8be4732476d412814f1a3df7","modified":1583061865577},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"a80a2ece86306b5520d7790777660d122ea6b5cc","modified":1583061865577},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"b92585d251f1f9ebe401abb5d932cb920f9b8b10","modified":1583061865578},{"_id":"themes/next/docs/zh-CN/README.md","hash":"e5f6668c3a79e4a364931b9b4e5fa92f8c771ec8","modified":1583061865578},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"7f37327bbcae7ed7d04d187fd5e9bc6bbf14926a","modified":1583061865578},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"815676d904f92748ddf4f529bed2baf066997bc6","modified":1583061865584},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"71655ca21907e9061b6e8ac52d0d8fbf54d0062b","modified":1583061865585},{"_id":"themes/next/layout/_partials/comments.swig","hash":"0c4914a5fd08f15beec71940218c814ad9a89f3f","modified":1583061865585},{"_id":"themes/next/layout/_macro/post.swig","hash":"ee01368d65fbb8d387f0956398daf62ae9ba1645","modified":1583061865584},{"_id":"themes/next/layout/_partials/footer.swig","hash":"1ee6335c12773dc43f8b92136770cb10d460c25c","modified":1583061865585},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9876dbfc15713c7a47d4bcaa301f4757bd978269","modified":1583061865587},{"_id":"themes/next/layout/_partials/widgets.swig","hash":"83a40ce83dfd5cada417444fb2d6f5470aae6bb0","modified":1583061865588},{"_id":"themes/next/layout/_scripts/index.swig","hash":"cea942b450bcb0f352da78d76dc6d6f1d23d5029","modified":1583061865588},{"_id":"themes/next/layout/_scripts/pjax.swig","hash":"a3462c37ab6d7642b1e95860ea5c4cfbac78efab","modified":1583061865589},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"d1f2bfde6f1da51a2b35a7ab9e7e8eb6eefd1c6b","modified":1583061865588},{"_id":"themes/next/layout/_scripts/three.swig","hash":"a4f42f2301866bd25a784a2281069d8b66836d0b","modified":1583061865589},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"ef38c213679e7b6d2a4116f56c9e55d678446069","modified":1583061865589},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"8627c8c8b031ecee16c522433b66fa4d6979b8ea","modified":1583061865590},{"_id":"themes/next/layout/_third-party/index.swig","hash":"70c3c01dd181de81270c57f3d99b6d8f4c723404","modified":1583061865591},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"1574848233f1bb2f45313ca08fef2dd33856a80b","modified":1583061865592},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"2731e262a6b88eaee2a3ca61e6a3583a7f594702","modified":1583061865592},{"_id":"themes/next/scripts/events/index.js","hash":"9047d8ae2670e43429b16a7919a08a0a0a81afe0","modified":1583061865594},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"aec50ed57b9d5d3faf2db3c88374f107203617e0","modified":1583061865596},{"_id":"themes/next/scripts/filters/front-matter.js","hash":"703bdd142a671b4b67d3d9dfb4a19d1dd7e7e8f7","modified":1583061865596},{"_id":"themes/next/scripts/filters/locals.js","hash":"5bbfdc1c373542159660b7a68ed0b57ca18ad10b","modified":1583061865596},{"_id":"themes/next/scripts/filters/minify.js","hash":"19985723b9f677ff775f3b17dcebf314819a76ac","modified":1583061865597},{"_id":"themes/next/scripts/filters/post.js","hash":"f2f566f2577c554377fd704442399acdd14a8118","modified":1583061865597},{"_id":"themes/next/scripts/helpers/engine.js","hash":"cb211b6b50913454b1737782e9e2af96cfa40448","modified":1583061865597},{"_id":"themes/next/scripts/helpers/font.js","hash":"32268fb4c59c5b37c1eb1c9582ab630e09e5cc7d","modified":1583061865597},{"_id":"themes/next/scripts/helpers/next-config.js","hash":"5e11f30ddb5093a88a687446617a46b048fa02e5","modified":1583061865597},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"58347687b02f7ab5e64bef07525c8efa97c9e8fb","modified":1583061865597},{"_id":"themes/next/scripts/tags/button.js","hash":"946dd7beede408d1f090d5e9774d74763828b97c","modified":1583061865597},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"94e0bbc7999b359baa42fa3731bdcf89c79ae2b3","modified":1583061865598},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"0f133f27b61e8351cfd0959ba8a1b8551a9a8cc6","modified":1583061865598},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"d902fd313e8d35c3cc36f237607c2a0536c9edf1","modified":1583061865598},{"_id":"themes/next/scripts/tags/label.js","hash":"fc5b267d903facb7a35001792db28b801cccb1f8","modified":1583061865598},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"983c6c4adea86160ecc0ba2204bc312aa338121d","modified":1583061865598},{"_id":"themes/next/scripts/tags/note.js","hash":"0a02bb4c15aec41f6d5f1271cdb5c65889e265d9","modified":1583061865598},{"_id":"themes/next/scripts/tags/pdf.js","hash":"f780cc72bff91d2720626e7af69eed25e9c12a29","modified":1583061865598},{"_id":"themes/next/scripts/tags/tabs.js","hash":"00ca6340d4fe0ccdae7525373e4729117775bbfa","modified":1583061865598},{"_id":"themes/next/scripts/tags/video.js","hash":"e5ff4c44faee604dd3ea9db6b222828c4750c227","modified":1583061865599},{"_id":"themes/next/source/css/_colors.styl","hash":"7d07d83cb5c9a5f23751bb46019e853eb4d0cd0a","modified":1583061865599},{"_id":"themes/next/source/css/_mixins.styl","hash":"b79ff3debd5709397b122292fc7e551ae9d40782","modified":1583061865609},{"_id":"themes/next/source/css/main.styl","hash":"a3a3bbb5a973052f0186b3523911cb2539ff7b88","modified":1583061865613},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1583061865613},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1583061865613},{"_id":"themes/next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1583061865614},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1583061865614},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1583061865614},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1583061865614},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1583061865614},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1583061865614},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1583061865614},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1583061865615},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1583061865615},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1583061865615},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1583061865615},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1583061865615},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1583061865615},{"_id":"themes/next/source/js/algolia-search.js","hash":"77cd98b1c790df12dd6cd8119bb3d99f72866635","modified":1583061865615},{"_id":"themes/next/source/js/bookmark.js","hash":"a00945ff886e9f6f835731cdaf29a3a3727c8877","modified":1583061865616},{"_id":"themes/next/source/js/local-search.js","hash":"bd42a1e05d37352270d2653ebb5adcb5585afc73","modified":1583061865616},{"_id":"themes/next/source/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1583061865616},{"_id":"themes/next/source/js/next-boot.js","hash":"f7045763e277e685c271bd4b4c37e531d699ac63","modified":1583061865616},{"_id":"themes/next/source/js/utils.js","hash":"a155950bc52396a701d0fe9988b3751c271f1741","modified":1583061865617},{"_id":"themes/next/source/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1583061865617},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"d3a16f0f343ea70b59e33e4b9cdecae3c8df91cd","modified":1583061865586},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"5ff544013e2905138ffeb07bf9a57062faed75b2","modified":1583061865585},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"1ea12d4b9490d9065ebf1b8739b90ce5defd6398","modified":1583061865586},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"30528a8da30994b1ef9355a72b09b2cd85a7c0e9","modified":1583061865586},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"ae2261bea836581918a1c2b0d1028a78718434e0","modified":1583061865586},{"_id":"themes/next/layout/_partials/header/menu-item.swig","hash":"12aeb9ee0d1d49d347f82a91e6bab568e1b59037","modified":1583061865586},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"c851717497ca64789f2176c9ecd1dedab237b752","modified":1583061865586},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"bbf0c8e42491fac70f4f8165224f1d7d92a040d7","modified":1583061865586},{"_id":"themes/next/layout/_partials/post/post-followme.swig","hash":"14c33bd544903e74388739599fffe3ecb66ed4b0","modified":1583061865587},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"94d54b0c65d504f772af1e62424952e092b6c21d","modified":1583061865587},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"a56e4f6ad95c106f361d354f828d1ef4810b1d76","modified":1583061865586},{"_id":"themes/next/layout/_partials/post/post-footer.swig","hash":"8f14f3f8a1b2998d5114cc56b680fb5c419a6b07","modified":1583061865587},{"_id":"themes/next/layout/_partials/post/post-reward.swig","hash":"2b1a73556595c37951e39574df5a3f20b2edeaef","modified":1583061865587},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"f79c44692451db26efce704813f7a8872b7e63a0","modified":1583061865587},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"48430bd03b8f19c9b8cdb2642005ed67d56c6e0b","modified":1583061865587},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"d6fa9e4432b87004c5678dfe2d4b2c1f4a702b93","modified":1583061865588},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"2791a8dc20a276704fc8b03f9822f76578a9152d","modified":1583061865588},{"_id":"themes/next/layout/_partials/sidebar/site-overview.swig","hash":"716b78cd90addc4216413719554721cb362b0c18","modified":1583061865588},{"_id":"themes/next/layout/_scripts/pages/schedule.swig","hash":"a2bb0bec243685e670b60a3d54142950adc03af0","modified":1583061865589},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1583061865589},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1583061865589},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1583061865589},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1583061865589},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"4790058691b7d36cf6d2d6b4e93795a7b8d608ad","modified":1583061865590},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"2fa2b51d56bfac6a1ea76d651c93b9c20b01c09b","modified":1583061865590},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"5adea065641e8c55994dd2328ddae53215604928","modified":1583061865590},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"1472cabb0181f60a6a0b7fec8899a4d03dfb2040","modified":1583061865590},{"_id":"themes/next/layout/_third-party/chat/tidio.swig","hash":"cba0e6e0fad08568a9e74ba9a5bee5341cfc04c1","modified":1583061865591},{"_id":"themes/next/layout/_third-party/chat/chatra.swig","hash":"f910618292c63871ca2e6c6e66c491f344fa7b1f","modified":1583061865590},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"82f5b6822aa5ec958aa987b101ef860494c6cf1f","modified":1583061865591},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b14908644225d78c864cd0a9b60c52407de56183","modified":1583061865591},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"f39a5bf3ce9ee9adad282501235e0c588e4356ec","modified":1583061865591},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"d6ceb70648555338a80ae5724b778c8c58d7060d","modified":1583061865591},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"f7a9eca599a682479e8ca863db59be7c9c7508c8","modified":1583061865591},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"be0a8eccf1f6dc21154af297fc79555343031277","modified":1583061865591},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"4791c977a730f29c846efcf6c9c15131b9400ead","modified":1583061865592},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"6c5976621efd5db5f7c4c6b4f11bc79d6554885f","modified":1583061865592},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"ecf751321e799f0fb3bf94d049e535130e2547aa","modified":1583061865592},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"d35a999d67f4c302f76fdf13744ceef3c6506481","modified":1583061865592},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"767b6c714c22588bcd26ba70b0fc19b6810cbacd","modified":1583061865592},{"_id":"themes/next/layout/_third-party/search/swiftype.swig","hash":"ba0dbc06b9d244073a1c681ff7a722dcbf920b51","modified":1583061865593},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.swig","hash":"d7258d02bcf0dac6c0fd8377c0909ddecb09d1d4","modified":1583061865593},{"_id":"themes/next/layout/_third-party/statistics/cnzz-analytics.swig","hash":"a17ace37876822327a2f9306a472974442c9005d","modified":1583061865593},{"_id":"themes/next/layout/_third-party/statistics/firestore.swig","hash":"b26ac2bfbe91dd88267f8b96aee6bb222b265b7a","modified":1583061865593},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.swig","hash":"afeeed84b395797429d5a852b70e12fd79f7410b","modified":1583061865593},{"_id":"themes/next/layout/_third-party/tags/mermaid.swig","hash":"f3c43664a071ff3c0b28bd7e59b5523446829576","modified":1583061865593},{"_id":"themes/next/layout/_third-party/tags/pdf.swig","hash":"5adab7380491e9df5c9ada4f4feb204b866ec14b","modified":1583061865593},{"_id":"themes/next/layout/_third-party/statistics/index.swig","hash":"5f6a966c509680dbfa70433f9d658cee59c304d7","modified":1583061865593},{"_id":"themes/next/scripts/events/lib/config.js","hash":"b205d72a56b1827681f0a260c266e0c02065fd08","modified":1583061865595},{"_id":"themes/next/scripts/events/lib/injects-point.js","hash":"6661c1c91c7cbdefc6a5e6a034b443b8811235a1","modified":1583061865595},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"f233d8d0103ae7f9b861344aa65c1a3c1de8a845","modified":1583061865595},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"1f20213af8da3127701e6bb9da995e5c91be2051","modified":1583061865595},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"0803d4f4d3d02c24417c163ad0b27b60fda79250","modified":1583061865595},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"7f2d93af012c1e14b8596fecbfc7febb43d9b7f5","modified":1583061865595},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"19cbd24880d0fbbd4d5698cd54da598f03b942da","modified":1583061865596},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"7f8b92913d21070b489457fa5ed996d2a55f2c32","modified":1583061865596},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"e51dc3072c1ba0ea3008f09ecae8b46242ec6021","modified":1583061865596},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"d5fefc31fba4ab0188305b1af1feb61da49fdeb0","modified":1583061865596},{"_id":"themes/next/scripts/filters/comment/valine.js","hash":"6a72b5928cdab9526a288177991e4b2aedd028cf","modified":1583061865596},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"9840998e1a1fbcd419c52a1e38fa54a003eac963","modified":1583061865613},{"_id":"themes/next/source/css/_variables/base.styl","hash":"85c46ac85689e7c5f5398fc8b6b40b7a8e94bafb","modified":1583061865613},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"f4e694e5db81e57442c7e34505a416d818b3044a","modified":1583061865612},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"38597817ede20418e73ae4afc50047ea5088c73e","modified":1583061865612},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"62df49459d552bbf73841753da8011a1f5e875c8","modified":1583061865612},{"_id":"themes/next/source/js/schemes/muse.js","hash":"47c4f60eb7f7dc3303e84914b611dc34827069e1","modified":1583061865616},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"f068b46f8c305c7436c2767492a6bed42dcd764c","modified":1583061865616},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1583061865617},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1583061865617},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1583061865617},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1583061865617},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1583061865617},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1583061865621},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1583061865620},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"ca5e70662dcfb261c25191cc5db5084dcf661c76","modified":1583061865599},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"a47725574e1bee3bc3b63b0ff2039cc982b17eff","modified":1583061865599},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"e2355c213fc25d635f1179fe317b826e0b9dad17","modified":1583061865599},{"_id":"themes/next/source/css/_common/components/rainbow.styl","hash":"bc87cea0b534f2d75db60f300b069456f6516d1b","modified":1583061865602},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"170c4598cbbe49cd1527f94158d97d2320a6b906","modified":1583061865602},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"44fe82eadbdbb2f66adda37ac83ebd0f85876bfc","modified":1583061865604},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"990bd301ce2de0a6b936781c58318f3945d81bc2","modified":1583061865604},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"38f632dce42481da83a5ffab382c281269885e9c","modified":1583061865606},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"62209da61b4ac49e3a7ff8174e28e075060835ec","modified":1583061865606},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"3fee8cbe5704a04107ff0816db1221edb40dbb9b","modified":1583061865606},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"8f58570a1bbc34c4989a47a1b7d42a8030f38b06","modified":1583061865607},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1583061865607},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1583061865607},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"b3bea92eef0e1fe2e7e294dac2184d16b5b8d666","modified":1583061865607},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"179e33b8ac7f4d8a8e76736a7e4f965fe9ab8b42","modified":1583061865609},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"f6516d0f7d89dc7b6c6e143a5af54b926f585d82","modified":1583061865609},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"4794bd45d5e32ea005c805bcbc65b871e9927d02","modified":1583061865609},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"41e5a7c567735e780ef9bfdacd4af1ff4b5e1d2a","modified":1583061865610},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"a30db9fffd34d522d378aeaeaa400d1a84505b38","modified":1583061865610},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"a717969829fa6ef88225095737df3f8ee86c286b","modified":1583061865610},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"7104b9cef90ca3b140d7a7afcf15540a250218fc","modified":1583061865610},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"21003fd0b43dc3b3592e916d585f7f78478cbeb3","modified":1583061865610},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"4d1c17345d2d39ef7698f7acf82dfc0f59308c34","modified":1583061865610},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"bb392700f04d956bb5f606efb052453efeade53d","modified":1583061865611},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1583061865611},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"2b2e7b5cea7783c9c8bb92655e26a67c266886f0","modified":1583061865611},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1583061865611},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"e282df938bd029f391c466168d0e68389978f120","modified":1583061865611},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"70a4324b70501132855b5e59029acfc5d3da1ebd","modified":1583061865611},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"ccb71d732b12acd02ac26ed6bbda4861d027857d","modified":1583061865611},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"e4f958677a75de87ee1caf7e22ba46a0602f22dd","modified":1583061865612},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"82025c3ad7af12e532e2e81be98deb0a74ff23ac","modified":1583061865612},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1583061865612},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1583061865618},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1583061865618},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1583061865618},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1583061865620},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1583061865620},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"fafc96c86926b22afba8bb9418c05e6afbc05a57","modified":1583061865599},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"c1daeb60c23945f745703ac2c3f4bf99d0ea3d95","modified":1583061865600},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"2bd0eb1512415325653b26d62a4463e6de83c5ac","modified":1583061865600},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1583061865600},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"7ddb7453bf9b85b01bff136e9d10a7f06baac9e8","modified":1583061865600},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"e3ade812b5541eca5b863ad3ff234ea95925bf31","modified":1583061865600},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"c0944ea35dc2bd3b2da9b64f5d05e7e78b6660f1","modified":1583061865600},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f49ca072b5a800f735e8f01fc3518f885951dd8e","modified":1583061865600},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"5d5c022aa3b2f89c2f2a178212338bb64804dd75","modified":1583061865601},{"_id":"themes/next/source/css/_common/components/post/post-followme.styl","hash":"1e4190c10c9e0c9ce92653b0dbcec21754b0b69d","modified":1583061865601},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"72d495a88f7d6515af425c12cbc67308a57d88ea","modified":1583061865601},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"887aa8de61ae060150a6312d5cb00d4da065db77","modified":1583061865601},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"796eb941ba0ca03fd5ca6d15a1f6a56afd9aa174","modified":1583061865601},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"eca4d80dd0df1c3b1bc06bd39e6a4bd6c56198df","modified":1583061865601},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"f5c2788a78790aca1a2f37f7149d6058afb539e0","modified":1583061865601},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"99e12c9ce3d14d4837e3d3f12fc867ba9c565317","modified":1583061865601},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"c7939407797acbd1ae0d8bae8e13b2bf045f870e","modified":1583061865602},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"5b5649b9749e3fd8b63aef22ceeece0a6e1df605","modified":1583061865602},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"8a7fc03a568b95be8d3337195e38bc7ec5ba2b23","modified":1583061865602},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"e2992846b39bf3857b5104675af02ba73e72eed5","modified":1583061865602},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"b49e9fbd3c182b8fc066b8c2caf248e3eb748619","modified":1583061865602},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"705759bdd1649e9aa1caedb82f6432a991ae3e71","modified":1583061865602},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"9a878d0119785a2316f42aebcceaa05a120b9a7a","modified":1583061865603},{"_id":"themes/next/source/css/_common/outline/footer/footer.styl","hash":"f5821481440a0624c8aec5fc85f093de1527095f","modified":1583061865603},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"e7a9fdb6478b8674b1cdf94de4f8052843fb71d9","modified":1583061865603},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"e02b1097a72a7d2ddc45ea8d53aa6d77c25ac407","modified":1583061865603},{"_id":"themes/next/source/css/_common/outline/header/header.styl","hash":"a793cfff86ad4af818faef04c18013077873f8f0","modified":1583061865603},{"_id":"themes/next/source/css/_common/outline/header/headerband.styl","hash":"0caf32492692ba8e854da43697a2ec8a41612194","modified":1583061865603},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"0ec7bafed7eec36504df7781207ccd1ce4448536","modified":1583061865604},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"555762730f1f31451113e8fdc84ec438ea738d90","modified":1583061865604},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"b2fc519828fe89a1f8f03ff7b809ad68cd46f3d7","modified":1583061865604},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"2cb1876e9e0c9ac32160888af27b1178dbcb0616","modified":1583061865604},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"fa0222197b5eee47e18ac864cdc6eac75678b8fe","modified":1583061865604},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"44487d9ab290dc97871fa8dd4487016deb56e123","modified":1583061865604},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"9b479c2f9a9bfed77885e5093b8245cc5d768ec7","modified":1583061865605},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"a237c290e8934d1a8cbbf22b3f30503d9663021d","modified":1583061865605},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar.styl","hash":"a9cd93c36bae5af9223e7804963096274e8a4f03","modified":1583061865606},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"a960a2dd587b15d3b3fe1b59525d6fa971c6a6ec","modified":1583061865605},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"a05a4031e799bc864a4536f9ef61fe643cd421af","modified":1583061865605},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"b3220db827e1adbca7880c2bb23e78fa7cbe95cb","modified":1583061865605},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"2a47f8a6bb589c2fb635e6c1e4a2563c7f63c407","modified":1583061865606},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"796415ae7490e17857e64ffef7e470b65c655a6b","modified":1583061865606},{"_id":"themes/next/source/css/_common/scaffolding/highlight/diff.styl","hash":"d3f73688bb7423e3ab0de1efdf6db46db5e34f80","modified":1583061865607},{"_id":"themes/next/source/css/_common/scaffolding/highlight/highlight.styl","hash":"8136f9efe1f018ebe4b4a2d8bd3683bb393ff456","modified":1583061865607},{"_id":"themes/next/source/css/_common/scaffolding/highlight/theme.styl","hash":"3b3acc5caa0b95a2598bef4eeacb21bab21bea56","modified":1583061865607},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"d7fce4b51b5f4b7c31d93a9edb6c6ce740aa0d6b","modified":1583061865608},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"9b3cce30c58e57b59e45d3f668a71a4129d3a8e4","modified":1583061865608},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"7213e3d0ad7c95717ecd4e701d6ee9248ef2bf9f","modified":1583061865608},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"709d10f763e357e1472d6471f8be384ec9e2d983","modified":1583061865608},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"5ac97054b302fe3ce47822a03a3b56aa3d582005","modified":1583061865609},{"_id":"themes/next/source/css/_common/scaffolding/tags/tags.styl","hash":"9e4c0653cfd3cc6908fa0d97581bcf80861fb1e7","modified":1583061865609},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"2dc2a5b7becb11de1d4bdab6b5195588ae878cfc","modified":1583061865608},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1583061865619},{"_id":"public/categories/index.html","hash":"fed2e2460e4bd616422369b72ffad8997eefa458","modified":1626943463897},{"_id":"public/tags/index.html","hash":"5af39118b2a5f53be744fa52b29a1e9747b7755f","modified":1626943463897},{"_id":"public/2018/09/20/2018-09-20-XSS和CSRF认知/index.html","hash":"321c427142423e177d9bbba91524b1a18d1d78f7","modified":1626943463897},{"_id":"public/2017/12/20/2017-12-20-数组操作总结/index.html","hash":"d02335a3a1351a43185aae407e09d949d3fcc34b","modified":1626943463897},{"_id":"public/2017/12/25/2017-12-25-css置换元素和非置换元素/index.html","hash":"7cc1b7eb5df0a67edc7e4ea474a9a89a37b134af","modified":1626943463897},{"_id":"public/2017/04/05/2017-04-05-serverside or brower/index.html","hash":"20e9e6db61e1f7cff4624ece9fed60a01b2341b9","modified":1626943463897},{"_id":"public/archives/index.html","hash":"0e88eabf33e78a8805891dcec3076f96d2c6e0ba","modified":1626943463897},{"_id":"public/archives/page/3/index.html","hash":"dac8cb699b8b2c799d59d76422f8f8f00f036ff6","modified":1626943463897},{"_id":"public/archives/page/2/index.html","hash":"6a168c931be1cc2dd6eb3874b9c92e47365ca16c","modified":1626943463897},{"_id":"public/archives/2017/index.html","hash":"001d1a296a2a4987ad4d89d899f5a741b3e28163","modified":1626943463897},{"_id":"public/archives/2017/03/index.html","hash":"0c0847cc90b46a48974bccb17c2a3fc4d65e4753","modified":1626943463897},{"_id":"public/archives/2017/page/2/index.html","hash":"4cdd9fb2b2454425af1a154930b94a1e14aa9ebf","modified":1626943463897},{"_id":"public/archives/2017/04/index.html","hash":"d4b078005661f8b1d0e7c3a54ce023ac42f0eb2b","modified":1626943463897},{"_id":"public/archives/2017/09/index.html","hash":"cffa0023b462a8ba618d2623a374a8b767f71576","modified":1626943463897},{"_id":"public/archives/2017/12/index.html","hash":"17b00c5c176ca4ac1baea08c97d039e17f0fb062","modified":1626943463897},{"_id":"public/archives/2018/index.html","hash":"11b13be7de9beaca005a80dda6d1a7a118ba3611","modified":1626943463897},{"_id":"public/archives/2018/03/index.html","hash":"bb0132341f3a444a80c461fbb5aa8768293fac43","modified":1626943463897},{"_id":"public/archives/2018/01/index.html","hash":"a67acd6e53252fda14bd7206220a2bbc6b101fee","modified":1626943463897},{"_id":"public/archives/2018/09/index.html","hash":"8b4f0080b403402c25afd0c114223865e42af495","modified":1626943463897},{"_id":"public/archives/2017/07/index.html","hash":"87b2858773eb72a7bb75fe3421cf3595175d3404","modified":1626943463897},{"_id":"public/categories/Leetcode/index.html","hash":"b639cf5e1aa109df28fb76ef7de07bfefcb213d4","modified":1626943463897},{"_id":"public/categories/algorithm/index.html","hash":"3e0160ce52faaaa4dbb2cd9b8af6fcb116f8dd48","modified":1626943463897},{"_id":"public/categories/FE/index.html","hash":"702efc5e00c97166baf3409dc8577a14039cbe4f","modified":1626943463897},{"_id":"public/categories/FE/page/2/index.html","hash":"1a66c580a78a26549526b514603e7c716ad72d12","modified":1626943463897},{"_id":"public/categories/Algorithm/index.html","hash":"18d000fbf55a5205c506ebf94dc3960f709489cb","modified":1626943463897},{"_id":"public/categories/FE/React/index.html","hash":"0cc6425c508bde0283e09a1876dcb9037fb57f88","modified":1626943463897},{"_id":"public/categories/FE/jquery/index.html","hash":"f22160e5a912a8a9c8f1c9faa588d077d65ca6f3","modified":1626943463897},{"_id":"public/categories/浏览器/index.html","hash":"6c5abc918259dada68c2037d25e3f6cdbb78fe74","modified":1626943463897},{"_id":"public/categories/FE/Network-security/index.html","hash":"93f6f994a748d06061d0e39c11737b6ca53a454a","modified":1626943463897},{"_id":"public/categories/FE/es6/index.html","hash":"fd233ce2f52539716089e12777c38c01c882a465","modified":1626943463897},{"_id":"public/categories/FE/jquery/source-code-analysis/index.html","hash":"ba1768e68f79c906ac12b91d09f8f394366de762","modified":1626943463897},{"_id":"public/categories/FE/webpack/index.html","hash":"ecd431908037ac4cc5b2834001cb194cab349da8","modified":1626943463897},{"_id":"public/categories/FE/design-pattern/index.html","hash":"5bc13cad7d131df9e2787061169a794ee432875d","modified":1626943463897},{"_id":"public/tags/Leetcode/index.html","hash":"ee29ab564250bee6a6a9757160af2491fd1c587f","modified":1626943463897},{"_id":"public/tags/笔试题/index.html","hash":"a4345d37de2a116f1c6d230fd510e4d4ed7f6f26","modified":1626943463897},{"_id":"public/tags/algorithm/index.html","hash":"3e29f0316a838f795be2df04c23cd1d5d46c1b66","modified":1626943463897},{"_id":"public/tags/dp/index.html","hash":"c44f256f0dbfa6b2fd72092277f17a143c728baa","modified":1626943463897},{"_id":"public/tags/FE/index.html","hash":"88a090cd78cc2c70e5f4ebb601196305c1c2c906","modified":1626943463897},{"_id":"public/tags/FE/page/2/index.html","hash":"74e99f9b69ba5050336d43b8607dccda1a6b307f","modified":1626943463897},{"_id":"public/tags/css/index.html","hash":"8081504dfffb1922058ae230a99883bc3979db13","modified":1626943463897},{"_id":"public/2018/09/23/2018-09-23-React高阶组件/index.html","hash":"f8b16014a070d0a3f908f36ca2126e68fb881c2e","modified":1626943463897},{"_id":"public/2018/03/27/2018-03-27-Promise总结/index.html","hash":"ffff608836c8ed342190fe3ae240af85c91bc550","modified":1626943463897},{"_id":"public/2018/03/25/2018-03-25-js设计模式与开发实践（一）/index.html","hash":"f1f1e95e5bdecf076bf3ca9cc8aad6570cc90ce1","modified":1626943463897},{"_id":"public/2018/03/22/2018-03-22-浏览器缓存/index.html","hash":"71f497dc105fc2d6e4bbe41c426f57835f7c1378","modified":1626943463897},{"_id":"public/2018/03/07/2018-03-07-webpack/index.html","hash":"93ae1c7de9a21b43b36d96735a1398b547293f2b","modified":1626943463897},{"_id":"public/2018/01/04/2018-01-04-binarySearch/index.html","hash":"1da7a9a924eb127e70c7c5af57e4b977f44d8c6b","modified":1626943463897},{"_id":"public/2017/12/29/2017-12-29-sort/index.html","hash":"14fcd73d7980b51936572797cfea77195adb4c71","modified":1626943463897},{"_id":"public/2017/09/22/2017-09-22-最大递增子序列/index.html","hash":"754bc572d31e81132d6fcb73bea59693c6a0240d","modified":1626943463897},{"_id":"public/2017/12/19/2017-12-19-通过遍历构造二叉树总结/index.html","hash":"14be978949c6b20f5072d857cbcfb50e77b8a161","modified":1626943463897},{"_id":"public/2017/09/12/2017-09-12-单页面应用/index.html","hash":"323c5b1d498a34514a7f4bbdaa2dab3229915f80","modified":1626943463897},{"_id":"public/2017/09/20/2017-09-20-leetcode380/index.html","hash":"61cf63c886bffe6c7f0fd2d5331db0aa93a7d2d0","modified":1626943463897},{"_id":"public/2017/09/01/2017-09-01-读ES6标准入门/index.html","hash":"7478657d85c8b9bcf3718c1970d0a715edf950de","modified":1626943463897},{"_id":"public/2017/07/01/2017-07-01-jquery源码解析/index.html","hash":"f67f695b401ab35dd811c1b692882468fad12afe","modified":1626943463897},{"_id":"public/2017/04/05/2017-04-05-react-router/index.html","hash":"80201c254317e2f86cd33d95a0b66764928aca68","modified":1626943463897},{"_id":"public/2017/03/28/2017-03-28-redux/index.html","hash":"237303b284e41aff4dfa3cacb3239d868c0a86a2","modified":1626943463897},{"_id":"public/2017/03/16/2017-03-16-React/index.html","hash":"0a1c8f9ee1b5688a82df5982984ca09d7f4d2b27","modified":1626943463897},{"_id":"public/2017/04/21/2017-04-21-JS设计模式/index.html","hash":"fa608eb7cd6ff480fd6229a8b192814af2046901","modified":1626943463897},{"_id":"public/2017/03/14/2017-03-14-CSS3 语法/index.html","hash":"011bdefd6ddd26a94c69567fc0661e21b57ed746","modified":1626943463897},{"_id":"public/2017/03/10/2017-03-10-动态规划/index.html","hash":"fcbbf94b7dc3049fbbb5457fd104973a296542bb","modified":1626943463897},{"_id":"public/2017/03/06/2017-03-06-前端面试总结/index.html","hash":"992b59dd63a15809613b097211854485b497ffbb","modified":1626943463897},{"_id":"public/2017/03/07/2017-03-07-生成字典序/index.html","hash":"fe7b14ecf8f7f0d07d45c6380348af7eb3bd2246","modified":1626943463897},{"_id":"public/index.html","hash":"66da395c8853ff71fc6e651c9981b5704408ac43","modified":1626943463897},{"_id":"public/page/2/index.html","hash":"f1f8f411e6b75821a74450fc2499522ed906651e","modified":1626943463897},{"_id":"public/page/3/index.html","hash":"1d351ea954483f0b033442c4dcd3141a32e4434b","modified":1626943463897},{"_id":"public/tags/React/index.html","hash":"f211c58456351b36013b75f461d35a7bd08290e0","modified":1626943463897},{"_id":"public/tags/react-router/index.html","hash":"3e7bf06d672ea05caedd47618e8a48cd0712d295","modified":1626943463897},{"_id":"public/tags/jquery/index.html","hash":"7d8719cd3c8925352a88b14a0ce47ab69b9dc2f5","modified":1626943463897},{"_id":"public/tags/sort/index.html","hash":"63c82ef904aa749033330273a7e333de6eab8b5a","modified":1626943463897},{"_id":"public/tags/js/index.html","hash":"b1366440813dd85d43dc47a3459a5536a9c46117","modified":1626943463897},{"_id":"public/tags/BinarySearch/index.html","hash":"77d90cb0f04c50fbaf323c3eef016d4b5ef3d833","modified":1626943463897},{"_id":"public/tags/设计模式/index.html","hash":"18ec2ea1fe5489b2ed15e63df1ac6b57b6bb982e","modified":1626943463897},{"_id":"public/tags/浏览器/index.html","hash":"f3bf1492c23debe86dfb3dae3460be9004941fe3","modified":1626943463897},{"_id":"public/tags/security/index.html","hash":"db86a419c71685b5962a6b1f1f1bd9b62add476a","modified":1626943463897},{"_id":"public/tags/Promise/index.html","hash":"2489d0d3bfee7e019863b6da7ce67f4a87cd43d8","modified":1626943463897},{"_id":"public/tags/es6/index.html","hash":"697ce007f6c0f6c8f3974e4b3d316d1c28c52475","modified":1626943463897},{"_id":"public/tags/redux/index.html","hash":"5511dd893d508c652a0d7200d342291495c021b2","modified":1626943463897},{"_id":"public/tags/面试/index.html","hash":"1a916a287c53b0355fce12ac5a30210d6e80e5e1","modified":1626943463897},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1626943463897},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1626943463897},{"_id":"public/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1626943463897},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1626943463897},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1626943463897},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1626943463897},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1626943463897},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1626943463897},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1626943463897},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1626943463897},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1626943463897},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1626943463897},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1626943463897},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1626943463897},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1626943463897},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1626943463897},{"_id":"public/live2dw/assets/assets/hijiki.model.json","hash":"feff43bf7498d213982c3736c2c029664e4bcbd2","modified":1626943463897},{"_id":"public/live2dw/assets/assets/hijiki.pose.json","hash":"81438bf69b32c7c11e311b4fe043730cdc7b7ec2","modified":1626943463897},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1626943463897},{"_id":"public/live2dw/assets/assets/mtn/00_idle.mtn","hash":"b224c60e463b9f71ddbfc0c720e430496c175f4f","modified":1626943463897},{"_id":"public/live2dw/assets/assets/mtn/01.mtn","hash":"fb550833ae22c9954c3e01df37ed29b2d61700f2","modified":1626943463897},{"_id":"public/live2dw/assets/assets/mtn/02.mtn","hash":"7eafc52edc73b7cb80ae70d34b43c6ac778fa47b","modified":1626943463897},{"_id":"public/live2dw/assets/assets/mtn/03.mtn","hash":"f900737c7a98441cbb2e05255427e6260e19ae68","modified":1626943463897},{"_id":"public/live2dw/assets/assets/mtn/04.mtn","hash":"c7a25d3c5d783639bae18db2f3cd284b819c3c85","modified":1626943463897},{"_id":"public/live2dw/assets/assets/mtn/05.mtn","hash":"dd20ad24b5d1830a5d44b9bccb28f922eea5e0e5","modified":1626943463897},{"_id":"public/live2dw/assets/assets/mtn/07.mtn","hash":"b7f2e3a9fa4f3ffbb6e64a08f8d9f45ca1868ffb","modified":1626943463897},{"_id":"public/live2dw/assets/assets/mtn/06.mtn","hash":"ad404bd852d276cdd3d054c953e23f90e4e45ae1","modified":1626943463897},{"_id":"public/live2dw/assets/assets/mtn/08.mtn","hash":"4411c7651ff65195b113d95e7d5ebef8a59a37d9","modified":1626943463897},{"_id":"public/live2dw/assets/package.json","hash":"76b19c9d04c68c7bb9b8abd27a3a5b496661d669","modified":1626943463897},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1626943463897},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1626943463897},{"_id":"public/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1626943463897},{"_id":"public/js/next-boot.js","hash":"f7045763e277e685c271bd4b4c37e531d699ac63","modified":1626943463897},{"_id":"public/js/schemes/muse.js","hash":"47c4f60eb7f7dc3303e84914b611dc34827069e1","modified":1626943463897},{"_id":"public/js/schemes/pisces.js","hash":"f068b46f8c305c7436c2767492a6bed42dcd764c","modified":1626943463897},{"_id":"public/js/bookmark.js","hash":"a00945ff886e9f6f835731cdaf29a3a3727c8877","modified":1626943463897},{"_id":"public/js/algolia-search.js","hash":"77cd98b1c790df12dd6cd8119bb3d99f72866635","modified":1626943463897},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1626943463897},{"_id":"public/css/main.css","hash":"540f1f58ddfc195d4171efcaa250848425d02a32","modified":1626943463897},{"_id":"public/live2dw/assets/assets/moc/hijiki.moc","hash":"44289e62545a7046e0f5231103a851750b78524e","modified":1626943463897},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1626943463897},{"_id":"public/js/utils.js","hash":"a155950bc52396a701d0fe9988b3751c271f1741","modified":1626943463897},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1626943463897},{"_id":"public/js/local-search.js","hash":"bd42a1e05d37352270d2653ebb5adcb5585afc73","modified":1626943463897},{"_id":"public/live2dw/assets/assets/moc/hijiki.2048/texture_00.png","hash":"66464e0d96439695b5542c5e2f5be60739c29999","modified":1626943463897},{"_id":"public/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1626943463897},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1626943463897},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1626943463897},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1626943463897}],"Category":[{"name":"Leetcode","_id":"ckreo13o40004ytt58hjn8xjv"},{"name":"algorithm","_id":"ckreo13o80009ytt598p3alje"},{"name":"FE","_id":"ckreo13oa000eytt5ecifelfp"},{"name":"Algorithm","_id":"ckreo13ol0019ytt5c2w27rnu"},{"name":"React","parent":"ckreo13oa000eytt5ecifelfp","_id":"ckreo13oo001gytt549dj0iyh"},{"name":"浏览器","_id":"ckreo13oq001pytt55j94370b"},{"name":"jquery","parent":"ckreo13oa000eytt5ecifelfp","_id":"ckreo13ot001vytt55uba4aw3"},{"name":"Network security","parent":"ckreo13oa000eytt5ecifelfp","_id":"ckreo13ow0023ytt5eyxb58oi"},{"name":"es6","parent":"ckreo13oa000eytt5ecifelfp","_id":"ckreo13ox0027ytt5gkk90jlj"},{"name":"source code analysis","parent":"ckreo13ot001vytt55uba4aw3","_id":"ckreo13oy002dytt50ocxfr96"},{"name":"webpack","parent":"ckreo13oa000eytt5ecifelfp","_id":"ckreo13ps003hytt55dv3fzac"},{"name":"design pattern","parent":"ckreo13oa000eytt5ecifelfp","_id":"ckreo13q8003vytt57z6w5kmr"}],"Data":[],"Page":[{"title":"categories","date":"2020-03-01T12:20:49.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2020-03-01 20:20:49\ntype: \"categories\"\n---\n","updated":"2020-03-01T12:23:47.349Z","path":"categories/index.html","comments":1,"layout":"page","_id":"ckreo13nw0000ytt51cpb289b","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2020-03-01T12:24:02.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2020-03-01 20:24:02\ntype: \"tags\"\n---\n","updated":"2020-03-01T12:24:19.695Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ckreo13o20002ytt572vj10ht","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Next Permutation","date":"2017-03-06T16:00:00.000Z","_content":"\n## 下一个字典序 Next Permutation\n### leetcode 31\n题目描述：Implement next permutation, which rearranges numbers into the lexicographically next greater permutation of numbers.\nIf such arrangement is not possible, it must rearrange it as the lowest possible order (ie, sorted in ascending order).\nThe replacement must be in-place, do not allocate extra memory.\n\nHere are some examples. Inputs are in the left-hand column and its corresponding outputs are in the right-hand column.\n1,2,3 → 1,3,2\n3,2,1 → 1,2,3\n1,1,5 → 1,5,1\n\n-------\n\n### 算法分析\n交换+逆序\n1. 从后向前遍历直到遇到第一对正序对，num[i]>num[i+1];\n2. 从后向前遍历找到第一个大于num[i]的数字，num[i]<num[j];\n3. 交换num[i]和num[j];\n4. 将num[i+1]~num[length-1]逆序排列\n### 代码（js）\n\n```javascript\nvar nextPermutation = function(nums) {\n    var len=nums.length;\n    if(len<=1){\n        return;\n    }\n    /*第一个正序对的i值*/\n    var cur=-1;   \n    for(var i=len-2;i>=0;i--){\n        if(nums[i]<nums[i+1]){\n            cur=i;\n            break;\n        }\n    }\n    /*若不存在，则重新最小排序*/\n    if(cur===-1){\n        nums.sort(function(a,b){\n            return a-b;\n        });\n    /*存在则从后向前遍历找到第一个j使得num[j]>num[cur]*/\n    }else{\n        var greater;\n        for(var j=len-1;j>cur;j--){\n            if(nums[j]>nums[cur]){\n                greater=j;\n                break;\n            }\n        }\n        /*交换num[i]和num[j]*/\n        var tmp=nums[greater];\n        nums[greater]=nums[cur];\n        nums[cur]=tmp;\n        \n        /*逆序num[i+1]~num[len-1]*/\n        var num= nums.splice(cur+1,len-cur-1);\n        num.reverse();\n        Array.prototype.push.apply(nums,num);\n    }\n};\n```\n\n-------\n### 遇到的问题\n将数组num[i+1]~num[length-1]逆序排列，因为本题无返回值，所以只能在原有数组上进行操作，开始的方法是：\n\n```javascript\nvar num = nums.splice(cur+1,len-cur-1);\nnum.reverse();\nnums = nums.concat(num);\n```\n\n但是提交之后发现concat函数无效，因此改用\n\n```javascript\nArray.prototype.push.apply(nums,num)\n```\n\n因为向数组添加数组所以不能直接用\n\n```javascript\nnums.push()\n```\n\n### 延伸---全排列算法\n#### 全排列就是从最小字典序排列到最大字典序的过程\n#### 算法\n1. 对给定的序列作升序排列，得到最小字典序\n2. 对有序排列求下一个字典序\n3. 若当前排序没有下一个字典序，即已经得到最大字典序，全排列结束。\n\n当然还有很多其他全排列算法，例如递归：\n当n=1时，perm（R）=（r），其中r是集合R中唯一元素。\n当n>1时，perm（R）由（r1）perm（R1），（r2）perm（R2），....，（rn）perm（Rn）构成。\n\n\n","source":"_posts/2017-03-07-生成字典序.md","raw":"---\ntitle: Next Permutation\ndate: 2017-03-07\ncategories: \n- Leetcode\ntags:\n- Leetcode\n- 笔试题\n---\n\n## 下一个字典序 Next Permutation\n### leetcode 31\n题目描述：Implement next permutation, which rearranges numbers into the lexicographically next greater permutation of numbers.\nIf such arrangement is not possible, it must rearrange it as the lowest possible order (ie, sorted in ascending order).\nThe replacement must be in-place, do not allocate extra memory.\n\nHere are some examples. Inputs are in the left-hand column and its corresponding outputs are in the right-hand column.\n1,2,3 → 1,3,2\n3,2,1 → 1,2,3\n1,1,5 → 1,5,1\n\n-------\n\n### 算法分析\n交换+逆序\n1. 从后向前遍历直到遇到第一对正序对，num[i]>num[i+1];\n2. 从后向前遍历找到第一个大于num[i]的数字，num[i]<num[j];\n3. 交换num[i]和num[j];\n4. 将num[i+1]~num[length-1]逆序排列\n### 代码（js）\n\n```javascript\nvar nextPermutation = function(nums) {\n    var len=nums.length;\n    if(len<=1){\n        return;\n    }\n    /*第一个正序对的i值*/\n    var cur=-1;   \n    for(var i=len-2;i>=0;i--){\n        if(nums[i]<nums[i+1]){\n            cur=i;\n            break;\n        }\n    }\n    /*若不存在，则重新最小排序*/\n    if(cur===-1){\n        nums.sort(function(a,b){\n            return a-b;\n        });\n    /*存在则从后向前遍历找到第一个j使得num[j]>num[cur]*/\n    }else{\n        var greater;\n        for(var j=len-1;j>cur;j--){\n            if(nums[j]>nums[cur]){\n                greater=j;\n                break;\n            }\n        }\n        /*交换num[i]和num[j]*/\n        var tmp=nums[greater];\n        nums[greater]=nums[cur];\n        nums[cur]=tmp;\n        \n        /*逆序num[i+1]~num[len-1]*/\n        var num= nums.splice(cur+1,len-cur-1);\n        num.reverse();\n        Array.prototype.push.apply(nums,num);\n    }\n};\n```\n\n-------\n### 遇到的问题\n将数组num[i+1]~num[length-1]逆序排列，因为本题无返回值，所以只能在原有数组上进行操作，开始的方法是：\n\n```javascript\nvar num = nums.splice(cur+1,len-cur-1);\nnum.reverse();\nnums = nums.concat(num);\n```\n\n但是提交之后发现concat函数无效，因此改用\n\n```javascript\nArray.prototype.push.apply(nums,num)\n```\n\n因为向数组添加数组所以不能直接用\n\n```javascript\nnums.push()\n```\n\n### 延伸---全排列算法\n#### 全排列就是从最小字典序排列到最大字典序的过程\n#### 算法\n1. 对给定的序列作升序排列，得到最小字典序\n2. 对有序排列求下一个字典序\n3. 若当前排序没有下一个字典序，即已经得到最大字典序，全排列结束。\n\n当然还有很多其他全排列算法，例如递归：\n当n=1时，perm（R）=（r），其中r是集合R中唯一元素。\n当n>1时，perm（R）由（r1）perm（R1），（r2）perm（R2），....，（rn）perm（Rn）构成。\n\n\n","slug":"2017-03-07-生成字典序","published":1,"updated":"2020-03-01T12:09:37.506Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckreo13nz0001ytt57uwvezh9","content":"<h2 id=\"下一个字典序-Next-Permutation\"><a href=\"#下一个字典序-Next-Permutation\" class=\"headerlink\" title=\"下一个字典序 Next Permutation\"></a>下一个字典序 Next Permutation</h2><h3 id=\"leetcode-31\"><a href=\"#leetcode-31\" class=\"headerlink\" title=\"leetcode 31\"></a>leetcode 31</h3><p>题目描述：Implement next permutation, which rearranges numbers into the lexicographically next greater permutation of numbers.<br>If such arrangement is not possible, it must rearrange it as the lowest possible order (ie, sorted in ascending order).<br>The replacement must be in-place, do not allocate extra memory.</p>\n<p>Here are some examples. Inputs are in the left-hand column and its corresponding outputs are in the right-hand column.<br>1,2,3 → 1,3,2<br>3,2,1 → 1,2,3<br>1,1,5 → 1,5,1</p>\n<hr>\n<h3 id=\"算法分析\"><a href=\"#算法分析\" class=\"headerlink\" title=\"算法分析\"></a>算法分析</h3><p>交换+逆序</p>\n<ol>\n<li>从后向前遍历直到遇到第一对正序对，num[i]&gt;num[i+1];</li>\n<li>从后向前遍历找到第一个大于num[i]的数字，num[i]&lt;num[j];</li>\n<li>交换num[i]和num[j];</li>\n<li>将num[i+1]~num[length-1]逆序排列<h3 id=\"代码（js）\"><a href=\"#代码（js）\" class=\"headerlink\" title=\"代码（js）\"></a>代码（js）</h3></li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> nextPermutation = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> len=nums.length;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(len&lt;=<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/*第一个正序对的i值*/</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> cur=<span class=\"number\">-1</span>;   </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=len<span class=\"number\">-2</span>;i&gt;=<span class=\"number\">0</span>;i--)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(nums[i]&lt;nums[i+<span class=\"number\">1</span>])&#123;</span><br><span class=\"line\">            cur=i;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/*若不存在，则重新最小排序*/</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(cur===<span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">        nums.sort(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a,b</span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> a-b;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    <span class=\"comment\">/*存在则从后向前遍历找到第一个j使得num[j]&gt;num[cur]*/</span></span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> greater;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> j=len<span class=\"number\">-1</span>;j&gt;cur;j--)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(nums[j]&gt;nums[cur])&#123;</span><br><span class=\"line\">                greater=j;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">/*交换num[i]和num[j]*/</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> tmp=nums[greater];</span><br><span class=\"line\">        nums[greater]=nums[cur];</span><br><span class=\"line\">        nums[cur]=tmp;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">/*逆序num[i+1]~num[len-1]*/</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> num= nums.splice(cur+<span class=\"number\">1</span>,len-cur<span class=\"number\">-1</span>);</span><br><span class=\"line\">        num.reverse();</span><br><span class=\"line\">        <span class=\"built_in\">Array</span>.prototype.push.apply(nums,num);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"遇到的问题\"><a href=\"#遇到的问题\" class=\"headerlink\" title=\"遇到的问题\"></a>遇到的问题</h3><p>将数组num[i+1]~num[length-1]逆序排列，因为本题无返回值，所以只能在原有数组上进行操作，开始的方法是：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> num = nums.splice(cur+<span class=\"number\">1</span>,len-cur<span class=\"number\">-1</span>);</span><br><span class=\"line\">num.reverse();</span><br><span class=\"line\">nums = nums.concat(num);</span><br></pre></td></tr></table></figure>\n\n<p>但是提交之后发现concat函数无效，因此改用</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.push.apply(nums,num)</span><br></pre></td></tr></table></figure>\n\n<p>因为向数组添加数组所以不能直接用</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nums.push()</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"延伸—全排列算法\"><a href=\"#延伸—全排列算法\" class=\"headerlink\" title=\"延伸—全排列算法\"></a>延伸—全排列算法</h3><h4 id=\"全排列就是从最小字典序排列到最大字典序的过程\"><a href=\"#全排列就是从最小字典序排列到最大字典序的过程\" class=\"headerlink\" title=\"全排列就是从最小字典序排列到最大字典序的过程\"></a>全排列就是从最小字典序排列到最大字典序的过程</h4><h4 id=\"算法\"><a href=\"#算法\" class=\"headerlink\" title=\"算法\"></a>算法</h4><ol>\n<li>对给定的序列作升序排列，得到最小字典序</li>\n<li>对有序排列求下一个字典序</li>\n<li>若当前排序没有下一个字典序，即已经得到最大字典序，全排列结束。</li>\n</ol>\n<p>当然还有很多其他全排列算法，例如递归：<br>当n=1时，perm（R）=（r），其中r是集合R中唯一元素。<br>当n&gt;1时，perm（R）由（r1）perm（R1），（r2）perm（R2），….，（rn）perm（Rn）构成。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"下一个字典序-Next-Permutation\"><a href=\"#下一个字典序-Next-Permutation\" class=\"headerlink\" title=\"下一个字典序 Next Permutation\"></a>下一个字典序 Next Permutation</h2><h3 id=\"leetcode-31\"><a href=\"#leetcode-31\" class=\"headerlink\" title=\"leetcode 31\"></a>leetcode 31</h3><p>题目描述：Implement next permutation, which rearranges numbers into the lexicographically next greater permutation of numbers.<br>If such arrangement is not possible, it must rearrange it as the lowest possible order (ie, sorted in ascending order).<br>The replacement must be in-place, do not allocate extra memory.</p>\n<p>Here are some examples. Inputs are in the left-hand column and its corresponding outputs are in the right-hand column.<br>1,2,3 → 1,3,2<br>3,2,1 → 1,2,3<br>1,1,5 → 1,5,1</p>\n<hr>\n<h3 id=\"算法分析\"><a href=\"#算法分析\" class=\"headerlink\" title=\"算法分析\"></a>算法分析</h3><p>交换+逆序</p>\n<ol>\n<li>从后向前遍历直到遇到第一对正序对，num[i]&gt;num[i+1];</li>\n<li>从后向前遍历找到第一个大于num[i]的数字，num[i]&lt;num[j];</li>\n<li>交换num[i]和num[j];</li>\n<li>将num[i+1]~num[length-1]逆序排列<h3 id=\"代码（js）\"><a href=\"#代码（js）\" class=\"headerlink\" title=\"代码（js）\"></a>代码（js）</h3></li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> nextPermutation = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> len=nums.length;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(len&lt;=<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/*第一个正序对的i值*/</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> cur=<span class=\"number\">-1</span>;   </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=len<span class=\"number\">-2</span>;i&gt;=<span class=\"number\">0</span>;i--)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(nums[i]&lt;nums[i+<span class=\"number\">1</span>])&#123;</span><br><span class=\"line\">            cur=i;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/*若不存在，则重新最小排序*/</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(cur===<span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">        nums.sort(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a,b</span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> a-b;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    <span class=\"comment\">/*存在则从后向前遍历找到第一个j使得num[j]&gt;num[cur]*/</span></span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> greater;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> j=len<span class=\"number\">-1</span>;j&gt;cur;j--)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(nums[j]&gt;nums[cur])&#123;</span><br><span class=\"line\">                greater=j;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">/*交换num[i]和num[j]*/</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> tmp=nums[greater];</span><br><span class=\"line\">        nums[greater]=nums[cur];</span><br><span class=\"line\">        nums[cur]=tmp;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">/*逆序num[i+1]~num[len-1]*/</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> num= nums.splice(cur+<span class=\"number\">1</span>,len-cur<span class=\"number\">-1</span>);</span><br><span class=\"line\">        num.reverse();</span><br><span class=\"line\">        <span class=\"built_in\">Array</span>.prototype.push.apply(nums,num);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"遇到的问题\"><a href=\"#遇到的问题\" class=\"headerlink\" title=\"遇到的问题\"></a>遇到的问题</h3><p>将数组num[i+1]~num[length-1]逆序排列，因为本题无返回值，所以只能在原有数组上进行操作，开始的方法是：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> num = nums.splice(cur+<span class=\"number\">1</span>,len-cur<span class=\"number\">-1</span>);</span><br><span class=\"line\">num.reverse();</span><br><span class=\"line\">nums = nums.concat(num);</span><br></pre></td></tr></table></figure>\n\n<p>但是提交之后发现concat函数无效，因此改用</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.push.apply(nums,num)</span><br></pre></td></tr></table></figure>\n\n<p>因为向数组添加数组所以不能直接用</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nums.push()</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"延伸—全排列算法\"><a href=\"#延伸—全排列算法\" class=\"headerlink\" title=\"延伸—全排列算法\"></a>延伸—全排列算法</h3><h4 id=\"全排列就是从最小字典序排列到最大字典序的过程\"><a href=\"#全排列就是从最小字典序排列到最大字典序的过程\" class=\"headerlink\" title=\"全排列就是从最小字典序排列到最大字典序的过程\"></a>全排列就是从最小字典序排列到最大字典序的过程</h4><h4 id=\"算法\"><a href=\"#算法\" class=\"headerlink\" title=\"算法\"></a>算法</h4><ol>\n<li>对给定的序列作升序排列，得到最小字典序</li>\n<li>对有序排列求下一个字典序</li>\n<li>若当前排序没有下一个字典序，即已经得到最大字典序，全排列结束。</li>\n</ol>\n<p>当然还有很多其他全排列算法，例如递归：<br>当n=1时，perm（R）=（r），其中r是集合R中唯一元素。<br>当n&gt;1时，perm（R）由（r1）perm（R1），（r2）perm（R2），….，（rn）perm（Rn）构成。</p>\n"},{"title":"动态规划算法","date":"2017-03-09T16:00:00.000Z","_content":"\n## 动态规划算法\n\n### 动态规划算法基本概念\n动态规划的过程：每次决策依赖于当前状态，又随机引起状态的转移。一个决策序列就是在变化的状态中产生出来的，是一种多阶段最优化决策解决问题的过程。\n### 基本思想\n将待求解的问题分解为若干个子问题（阶段），按顺序求解子阶段，前一子问题的解，为后一子问题的求解提供了有用的信息，在求解任一子问题时，列出各种可能的局部解，通过决策保留那些有可能达到最优的局部解，丢弃其它局部解。\n\n### 实际问题\n> #### 数字三角形\n![数字三角形](http://img.blog.csdn.net/20150811133448624?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n\n 在上面的数字三角形中寻找一条从顶部到底边的路径，使得路径上所经过的数字之和最大。路径上的每一步都只能往左下或 右下走。只需要求出这个最大和即可，不必给出具体路径。 三角形的行数大于1小于等于100，数字为 0 - 99。\n输入格式：\n\n    5      //表示三角形的行数    \n\n    7\n\n    3   8\n\n    8   1   0\n\n    2   7   4   4\n\n    4   5   2   6   5\n\n    要求输出最大和\n    \n#### 基本思路\n用一个二期数组存放数字三角形\n用D[i,j]表示第i行第j个数字（i 和j 均从1开始）\n用MaxSum[i,j]表示从D[i,j]到底边的各条路径的和的最大值。\n因此，问题改为求MaxSum[1,1];\n\n-----\n用递归解决,递归方程如下：\n_MaxSum[i,j] = D[i,j]  i=N\nMaxSum[i,j] = Max(MaxSum[i+1,j],MaxSum[i+1,j+1])+D[i,j] i!=N_\n根据递归方程可得代码：\n\n```\n#include<iostream>\n#include<Math.h>\nusing namespace std;\nint D[101][101];\nint n;\nint MaxSum(int i,int j){\n    if(i==n){\n      return D[i,j];\n    }\n    return max(MaxSum[i+1,j],MaxSum[i+1,j+1)+D[i,j];\n}\nint main(){\n    cin>>n;\n    for(int i=1;i<=n;i++){\n        for(int j=1;j<=i;j++){\n        cin >>D[i,j};\n        }\n        }\n   cout<<MaxSum[1,1]<<endl;\n   }\n```\n但是，这样计算的时间复杂度非常高，因为我们重复计算了很多次已经计算过的值。\n\n![三角形计算值](http://img.blog.csdn.net/20150811140840233?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n**例如**：计算MaxSum[2,1]时，会计算MaxSum[3,2];当计算MaxSum[2,2]时，又会计算MaxSum[3,2]。这样就会重复很多次无用计算。\n所以可以改进程序，使之成为 _记忆型递归算法_\n\n```\n#include<iostream>\n#include<Math.h>\nusing namespace std;\nint D[101][101];\nint n;\nint MaxSum(int i,int j){\n    if(MaxSum[i,j]!=-1){\n      return MaxSum[i,j];\n    }\n    if(i==n){\n      return D[i,j];\n    }\n    return max(MaxSum[i+1,j],MaxSum[i+1,j+1)+D[i,j];\n}\nint main(){\n    cin>>n;\n    for(int i=1;i<=n;i++){\n        for(int j=1;j<=i;j++){\n        cin >>D[i,j};\n        MaxSum[i,j]=-1;\n        }\n        }\n    cout<<MaxSum[1,1]<<endl;\n   }\n```\n因为递归要使用大量堆栈空间，容易造成栈溢出，所以考虑把递归改为递推。\n从最后一行开始计算，因为最后一行的值可以直接得到：\n![](http://img.blog.csdn.net/20150811152746815?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n然后倒数第二行，从左侧第一个数开始，将其与下方左右两个数分别相加，选择最大的填入空格。\n![](http://img.blog.csdn.net/20150811153237686?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n依次计算每行的值\n![](http://img.blog.csdn.net/20150811153534629?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n![](http://img.blog.csdn.net/20150811153553012?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n由此，便从递归型动态规划=>递推型动态规划：\n\n```\n#include<iostream>\n#include<stdio.h>\nusing namespace std;\nint D[101][101];\nint MaxSum[101][101];\nint n;\nint main(){\n    cin>>n;\n    for(int i=1;i<=n;i++){\n        for(int j=1;j<=i;j++){\n            cin>>D[i,j];\n        }\n    }\n    for(int i=1;i<=n;i++){\n        MaxSum[n][i] = D[n][i];\n    }\n    for(int i=n-1;i>=1;i--){\n        for(int j=1;j<=i,;j++){\n            MaxSum[i][j]=max(MaxSum[i+1][j],MaxSum[i+1][j+1])+D[i][j];\n       }\n     }\n     cout<<MaxSum[1][1]<<endl;  \n```\n接下来对空间进行优化，可以不采用二维数组来存储MaxSum[i][j],只要采用一维数组MaxSum[101]，一层一层向外推就可以了。\n对空间优化后的递推过程如下：\n![](http://img.blog.csdn.net/20150811155011262?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n![](http://img.blog.csdn.net/20150811155028144?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n![](http://img.blog.csdn.net/20150811155119121?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n![](http://img.blog.csdn.net/20150811155136507?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n![](http://img.blog.csdn.net/20150811155255355?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n![](http://img.blog.csdn.net/20150811155311499?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\nmaxSum数组都可以不要，直接用D的第n行直接替代maxSum即可\n\n```\n#include <iostream>  \n#include <algorithm> \nusing namespace std; \n\n#define MAX 101  \n\nint D[MAX][MAX];  \nint n; \nint * maxSum; \n\nint main(){    \n\tint i,j;    \n\tcin >> n;    \n\tfor(i=1;i<=n;i++)   \n\t\tfor(j=1;j<=i;j++)        \n\t\t\tcin >> D[i][j];   \n\tmaxSum = D[n]; //maxSum指向第n行    \n\tfor( int i = n-1; i>= 1;  --i )     \n\t\tfor( int j = 1; j <= i; ++j )       \n\t\t\tmaxSum[j] = max(maxSum[j],maxSum[j+1]) + D[i][j];    \n\tcout << maxSum[1] << endl;  \n}\n```\n### 动态规划适用情况\n一般具有三个性质：\n1. **最优化原理**：问题的最优解所包含的子问题的解也是最优的，称该问题具有最优子结构。\n2. **无后效性**：某阶段状态一旦确定，就不受这个状态以后的决策的影响。\n3. **有重叠子问题**：子问题之间是不独立的，一个子问题在下一阶段决策中可能被多次使用。（不是必要条件）。\n\n### 求解的基本步骤\n1. *化分阶段*：化分后的阶段一定要是有序的或者是可排序的。\n2. *确定状态和状态变量*：将问题发展到各个阶段时所处的各种客观情况用不同的状态表示出来。\n3. *确定决策并写出状态转移方程*：状态转移就是根据上一阶段的状态和决策来导出本阶段的状态。\n4. *寻找边界条件*：状态转移方程是一个递推式，需要递推的终止条件。\n\nf(n,m)=max{f(n-1.m),f(n-1,m-w[n])+P(n,m)};\n\n-----\n最后提供一个非常全面的动态规划讲解：\n作者：Hawstein\n出处：[http://www.hawstein.com/posts/dp-novice-to-advanced.html]()\n声明：本文采用以下协议进行授权： 自由转载-非商用-非衍生-保持署名|Creative Commons BY-NC-ND 3.0 ，转载请注明作者及出处。\n\n","source":"_posts/2017-03-10-动态规划.md","raw":"---\ntitle: 动态规划算法\ndate: 2017-03-10\ncategories: \n- algorithm\ntags:\n- algorithm\n- dp\n---\n\n## 动态规划算法\n\n### 动态规划算法基本概念\n动态规划的过程：每次决策依赖于当前状态，又随机引起状态的转移。一个决策序列就是在变化的状态中产生出来的，是一种多阶段最优化决策解决问题的过程。\n### 基本思想\n将待求解的问题分解为若干个子问题（阶段），按顺序求解子阶段，前一子问题的解，为后一子问题的求解提供了有用的信息，在求解任一子问题时，列出各种可能的局部解，通过决策保留那些有可能达到最优的局部解，丢弃其它局部解。\n\n### 实际问题\n> #### 数字三角形\n![数字三角形](http://img.blog.csdn.net/20150811133448624?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n\n 在上面的数字三角形中寻找一条从顶部到底边的路径，使得路径上所经过的数字之和最大。路径上的每一步都只能往左下或 右下走。只需要求出这个最大和即可，不必给出具体路径。 三角形的行数大于1小于等于100，数字为 0 - 99。\n输入格式：\n\n    5      //表示三角形的行数    \n\n    7\n\n    3   8\n\n    8   1   0\n\n    2   7   4   4\n\n    4   5   2   6   5\n\n    要求输出最大和\n    \n#### 基本思路\n用一个二期数组存放数字三角形\n用D[i,j]表示第i行第j个数字（i 和j 均从1开始）\n用MaxSum[i,j]表示从D[i,j]到底边的各条路径的和的最大值。\n因此，问题改为求MaxSum[1,1];\n\n-----\n用递归解决,递归方程如下：\n_MaxSum[i,j] = D[i,j]  i=N\nMaxSum[i,j] = Max(MaxSum[i+1,j],MaxSum[i+1,j+1])+D[i,j] i!=N_\n根据递归方程可得代码：\n\n```\n#include<iostream>\n#include<Math.h>\nusing namespace std;\nint D[101][101];\nint n;\nint MaxSum(int i,int j){\n    if(i==n){\n      return D[i,j];\n    }\n    return max(MaxSum[i+1,j],MaxSum[i+1,j+1)+D[i,j];\n}\nint main(){\n    cin>>n;\n    for(int i=1;i<=n;i++){\n        for(int j=1;j<=i;j++){\n        cin >>D[i,j};\n        }\n        }\n   cout<<MaxSum[1,1]<<endl;\n   }\n```\n但是，这样计算的时间复杂度非常高，因为我们重复计算了很多次已经计算过的值。\n\n![三角形计算值](http://img.blog.csdn.net/20150811140840233?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n**例如**：计算MaxSum[2,1]时，会计算MaxSum[3,2];当计算MaxSum[2,2]时，又会计算MaxSum[3,2]。这样就会重复很多次无用计算。\n所以可以改进程序，使之成为 _记忆型递归算法_\n\n```\n#include<iostream>\n#include<Math.h>\nusing namespace std;\nint D[101][101];\nint n;\nint MaxSum(int i,int j){\n    if(MaxSum[i,j]!=-1){\n      return MaxSum[i,j];\n    }\n    if(i==n){\n      return D[i,j];\n    }\n    return max(MaxSum[i+1,j],MaxSum[i+1,j+1)+D[i,j];\n}\nint main(){\n    cin>>n;\n    for(int i=1;i<=n;i++){\n        for(int j=1;j<=i;j++){\n        cin >>D[i,j};\n        MaxSum[i,j]=-1;\n        }\n        }\n    cout<<MaxSum[1,1]<<endl;\n   }\n```\n因为递归要使用大量堆栈空间，容易造成栈溢出，所以考虑把递归改为递推。\n从最后一行开始计算，因为最后一行的值可以直接得到：\n![](http://img.blog.csdn.net/20150811152746815?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n然后倒数第二行，从左侧第一个数开始，将其与下方左右两个数分别相加，选择最大的填入空格。\n![](http://img.blog.csdn.net/20150811153237686?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n依次计算每行的值\n![](http://img.blog.csdn.net/20150811153534629?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n![](http://img.blog.csdn.net/20150811153553012?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n由此，便从递归型动态规划=>递推型动态规划：\n\n```\n#include<iostream>\n#include<stdio.h>\nusing namespace std;\nint D[101][101];\nint MaxSum[101][101];\nint n;\nint main(){\n    cin>>n;\n    for(int i=1;i<=n;i++){\n        for(int j=1;j<=i;j++){\n            cin>>D[i,j];\n        }\n    }\n    for(int i=1;i<=n;i++){\n        MaxSum[n][i] = D[n][i];\n    }\n    for(int i=n-1;i>=1;i--){\n        for(int j=1;j<=i,;j++){\n            MaxSum[i][j]=max(MaxSum[i+1][j],MaxSum[i+1][j+1])+D[i][j];\n       }\n     }\n     cout<<MaxSum[1][1]<<endl;  \n```\n接下来对空间进行优化，可以不采用二维数组来存储MaxSum[i][j],只要采用一维数组MaxSum[101]，一层一层向外推就可以了。\n对空间优化后的递推过程如下：\n![](http://img.blog.csdn.net/20150811155011262?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n![](http://img.blog.csdn.net/20150811155028144?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n![](http://img.blog.csdn.net/20150811155119121?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n![](http://img.blog.csdn.net/20150811155136507?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n![](http://img.blog.csdn.net/20150811155255355?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n![](http://img.blog.csdn.net/20150811155311499?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\nmaxSum数组都可以不要，直接用D的第n行直接替代maxSum即可\n\n```\n#include <iostream>  \n#include <algorithm> \nusing namespace std; \n\n#define MAX 101  \n\nint D[MAX][MAX];  \nint n; \nint * maxSum; \n\nint main(){    \n\tint i,j;    \n\tcin >> n;    \n\tfor(i=1;i<=n;i++)   \n\t\tfor(j=1;j<=i;j++)        \n\t\t\tcin >> D[i][j];   \n\tmaxSum = D[n]; //maxSum指向第n行    \n\tfor( int i = n-1; i>= 1;  --i )     \n\t\tfor( int j = 1; j <= i; ++j )       \n\t\t\tmaxSum[j] = max(maxSum[j],maxSum[j+1]) + D[i][j];    \n\tcout << maxSum[1] << endl;  \n}\n```\n### 动态规划适用情况\n一般具有三个性质：\n1. **最优化原理**：问题的最优解所包含的子问题的解也是最优的，称该问题具有最优子结构。\n2. **无后效性**：某阶段状态一旦确定，就不受这个状态以后的决策的影响。\n3. **有重叠子问题**：子问题之间是不独立的，一个子问题在下一阶段决策中可能被多次使用。（不是必要条件）。\n\n### 求解的基本步骤\n1. *化分阶段*：化分后的阶段一定要是有序的或者是可排序的。\n2. *确定状态和状态变量*：将问题发展到各个阶段时所处的各种客观情况用不同的状态表示出来。\n3. *确定决策并写出状态转移方程*：状态转移就是根据上一阶段的状态和决策来导出本阶段的状态。\n4. *寻找边界条件*：状态转移方程是一个递推式，需要递推的终止条件。\n\nf(n,m)=max{f(n-1.m),f(n-1,m-w[n])+P(n,m)};\n\n-----\n最后提供一个非常全面的动态规划讲解：\n作者：Hawstein\n出处：[http://www.hawstein.com/posts/dp-novice-to-advanced.html]()\n声明：本文采用以下协议进行授权： 自由转载-非商用-非衍生-保持署名|Creative Commons BY-NC-ND 3.0 ，转载请注明作者及出处。\n\n","slug":"2017-03-10-动态规划","published":1,"updated":"2020-03-01T12:09:37.507Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckreo13o30003ytt53mb393g0","content":"<h2 id=\"动态规划算法\"><a href=\"#动态规划算法\" class=\"headerlink\" title=\"动态规划算法\"></a>动态规划算法</h2><h3 id=\"动态规划算法基本概念\"><a href=\"#动态规划算法基本概念\" class=\"headerlink\" title=\"动态规划算法基本概念\"></a>动态规划算法基本概念</h3><p>动态规划的过程：每次决策依赖于当前状态，又随机引起状态的转移。一个决策序列就是在变化的状态中产生出来的，是一种多阶段最优化决策解决问题的过程。</p>\n<h3 id=\"基本思想\"><a href=\"#基本思想\" class=\"headerlink\" title=\"基本思想\"></a>基本思想</h3><p>将待求解的问题分解为若干个子问题（阶段），按顺序求解子阶段，前一子问题的解，为后一子问题的求解提供了有用的信息，在求解任一子问题时，列出各种可能的局部解，通过决策保留那些有可能达到最优的局部解，丢弃其它局部解。</p>\n<h3 id=\"实际问题\"><a href=\"#实际问题\" class=\"headerlink\" title=\"实际问题\"></a>实际问题</h3><blockquote>\n<h4 id=\"数字三角形\"><a href=\"#数字三角形\" class=\"headerlink\" title=\"数字三角形\"></a>数字三角形</h4><p><img src=\"http://img.blog.csdn.net/20150811133448624?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"数字三角形\"></p>\n</blockquote>\n<p> 在上面的数字三角形中寻找一条从顶部到底边的路径，使得路径上所经过的数字之和最大。路径上的每一步都只能往左下或 右下走。只需要求出这个最大和即可，不必给出具体路径。 三角形的行数大于1小于等于100，数字为 0 - 99。<br>输入格式：</p>\n<pre><code>5      //表示三角形的行数    \n\n7\n\n3   8\n\n8   1   0\n\n2   7   4   4\n\n4   5   2   6   5\n\n要求输出最大和</code></pre><h4 id=\"基本思路\"><a href=\"#基本思路\" class=\"headerlink\" title=\"基本思路\"></a>基本思路</h4><p>用一个二期数组存放数字三角形<br>用D[i,j]表示第i行第j个数字（i 和j 均从1开始）<br>用MaxSum[i,j]表示从D[i,j]到底边的各条路径的和的最大值。<br>因此，问题改为求MaxSum[1,1];</p>\n<hr>\n<p>用递归解决,递归方程如下：<br><em>MaxSum[i,j] = D[i,j]  i=N<br>MaxSum[i,j] = Max(MaxSum[i+1,j],MaxSum[i+1,j+1])+D[i,j] i!=N</em><br>根据递归方程可得代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include&lt;iostream&gt;</span><br><span class=\"line\">#include&lt;Math.h&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\">int D[101][101];</span><br><span class=\"line\">int n;</span><br><span class=\"line\">int MaxSum(int i,int j)&#123;</span><br><span class=\"line\">    if(i&#x3D;&#x3D;n)&#123;</span><br><span class=\"line\">      return D[i,j];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return max(MaxSum[i+1,j],MaxSum[i+1,j+1)+D[i,j];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">int main()&#123;</span><br><span class=\"line\">    cin&gt;&gt;n;</span><br><span class=\"line\">    for(int i&#x3D;1;i&lt;&#x3D;n;i++)&#123;</span><br><span class=\"line\">        for(int j&#x3D;1;j&lt;&#x3D;i;j++)&#123;</span><br><span class=\"line\">        cin &gt;&gt;D[i,j&#125;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">   cout&lt;&lt;MaxSum[1,1]&lt;&lt;endl;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p>但是，这样计算的时间复杂度非常高，因为我们重复计算了很多次已经计算过的值。</p>\n<p><img src=\"http://img.blog.csdn.net/20150811140840233?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"三角形计算值\"><br><strong>例如</strong>：计算MaxSum[2,1]时，会计算MaxSum[3,2];当计算MaxSum[2,2]时，又会计算MaxSum[3,2]。这样就会重复很多次无用计算。<br>所以可以改进程序，使之成为 <em>记忆型递归算法</em></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include&lt;iostream&gt;</span><br><span class=\"line\">#include&lt;Math.h&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\">int D[101][101];</span><br><span class=\"line\">int n;</span><br><span class=\"line\">int MaxSum(int i,int j)&#123;</span><br><span class=\"line\">    if(MaxSum[i,j]!&#x3D;-1)&#123;</span><br><span class=\"line\">      return MaxSum[i,j];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if(i&#x3D;&#x3D;n)&#123;</span><br><span class=\"line\">      return D[i,j];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return max(MaxSum[i+1,j],MaxSum[i+1,j+1)+D[i,j];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">int main()&#123;</span><br><span class=\"line\">    cin&gt;&gt;n;</span><br><span class=\"line\">    for(int i&#x3D;1;i&lt;&#x3D;n;i++)&#123;</span><br><span class=\"line\">        for(int j&#x3D;1;j&lt;&#x3D;i;j++)&#123;</span><br><span class=\"line\">        cin &gt;&gt;D[i,j&#125;;</span><br><span class=\"line\">        MaxSum[i,j]&#x3D;-1;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    cout&lt;&lt;MaxSum[1,1]&lt;&lt;endl;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p>因为递归要使用大量堆栈空间，容易造成栈溢出，所以考虑把递归改为递推。<br>从最后一行开始计算，因为最后一行的值可以直接得到：<br><img src=\"http://img.blog.csdn.net/20150811152746815?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"\"><br>然后倒数第二行，从左侧第一个数开始，将其与下方左右两个数分别相加，选择最大的填入空格。<br><img src=\"http://img.blog.csdn.net/20150811153237686?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"\"><br>依次计算每行的值<br><img src=\"http://img.blog.csdn.net/20150811153534629?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"\"><br><img src=\"http://img.blog.csdn.net/20150811153553012?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"\"><br>由此，便从递归型动态规划=&gt;递推型动态规划：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include&lt;iostream&gt;</span><br><span class=\"line\">#include&lt;stdio.h&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\">int D[101][101];</span><br><span class=\"line\">int MaxSum[101][101];</span><br><span class=\"line\">int n;</span><br><span class=\"line\">int main()&#123;</span><br><span class=\"line\">    cin&gt;&gt;n;</span><br><span class=\"line\">    for(int i&#x3D;1;i&lt;&#x3D;n;i++)&#123;</span><br><span class=\"line\">        for(int j&#x3D;1;j&lt;&#x3D;i;j++)&#123;</span><br><span class=\"line\">            cin&gt;&gt;D[i,j];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    for(int i&#x3D;1;i&lt;&#x3D;n;i++)&#123;</span><br><span class=\"line\">        MaxSum[n][i] &#x3D; D[n][i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    for(int i&#x3D;n-1;i&gt;&#x3D;1;i--)&#123;</span><br><span class=\"line\">        for(int j&#x3D;1;j&lt;&#x3D;i,;j++)&#123;</span><br><span class=\"line\">            MaxSum[i][j]&#x3D;max(MaxSum[i+1][j],MaxSum[i+1][j+1])+D[i][j];</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     cout&lt;&lt;MaxSum[1][1]&lt;&lt;endl;</span><br></pre></td></tr></table></figure>\n<p>接下来对空间进行优化，可以不采用二维数组来存储MaxSum[i][j],只要采用一维数组MaxSum[101]，一层一层向外推就可以了。<br>对空间优化后的递推过程如下：<br><img src=\"http://img.blog.csdn.net/20150811155011262?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"\"><br><img src=\"http://img.blog.csdn.net/20150811155028144?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"\"><br><img src=\"http://img.blog.csdn.net/20150811155119121?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"\"><br><img src=\"http://img.blog.csdn.net/20150811155136507?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"\"><br><img src=\"http://img.blog.csdn.net/20150811155255355?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"\"><br><img src=\"http://img.blog.csdn.net/20150811155311499?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"\"><br>maxSum数组都可以不要，直接用D的第n行直接替代maxSum即可</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;iostream&gt;  </span><br><span class=\"line\">#include &lt;algorithm&gt; </span><br><span class=\"line\">using namespace std; </span><br><span class=\"line\"></span><br><span class=\"line\">#define MAX 101  </span><br><span class=\"line\"></span><br><span class=\"line\">int D[MAX][MAX];  </span><br><span class=\"line\">int n; </span><br><span class=\"line\">int * maxSum; </span><br><span class=\"line\"></span><br><span class=\"line\">int main()&#123;    </span><br><span class=\"line\">\tint i,j;    </span><br><span class=\"line\">\tcin &gt;&gt; n;    </span><br><span class=\"line\">\tfor(i&#x3D;1;i&lt;&#x3D;n;i++)   </span><br><span class=\"line\">\t\tfor(j&#x3D;1;j&lt;&#x3D;i;j++)        </span><br><span class=\"line\">\t\t\tcin &gt;&gt; D[i][j];   </span><br><span class=\"line\">\tmaxSum &#x3D; D[n]; &#x2F;&#x2F;maxSum指向第n行    </span><br><span class=\"line\">\tfor( int i &#x3D; n-1; i&gt;&#x3D; 1;  --i )     </span><br><span class=\"line\">\t\tfor( int j &#x3D; 1; j &lt;&#x3D; i; ++j )       </span><br><span class=\"line\">\t\t\tmaxSum[j] &#x3D; max(maxSum[j],maxSum[j+1]) + D[i][j];    </span><br><span class=\"line\">\tcout &lt;&lt; maxSum[1] &lt;&lt; endl;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"动态规划适用情况\"><a href=\"#动态规划适用情况\" class=\"headerlink\" title=\"动态规划适用情况\"></a>动态规划适用情况</h3><p>一般具有三个性质：</p>\n<ol>\n<li><strong>最优化原理</strong>：问题的最优解所包含的子问题的解也是最优的，称该问题具有最优子结构。</li>\n<li><strong>无后效性</strong>：某阶段状态一旦确定，就不受这个状态以后的决策的影响。</li>\n<li><strong>有重叠子问题</strong>：子问题之间是不独立的，一个子问题在下一阶段决策中可能被多次使用。（不是必要条件）。</li>\n</ol>\n<h3 id=\"求解的基本步骤\"><a href=\"#求解的基本步骤\" class=\"headerlink\" title=\"求解的基本步骤\"></a>求解的基本步骤</h3><ol>\n<li><em>化分阶段</em>：化分后的阶段一定要是有序的或者是可排序的。</li>\n<li><em>确定状态和状态变量</em>：将问题发展到各个阶段时所处的各种客观情况用不同的状态表示出来。</li>\n<li><em>确定决策并写出状态转移方程</em>：状态转移就是根据上一阶段的状态和决策来导出本阶段的状态。</li>\n<li><em>寻找边界条件</em>：状态转移方程是一个递推式，需要递推的终止条件。</li>\n</ol>\n<p>f(n,m)=max{f(n-1.m),f(n-1,m-w[n])+P(n,m)};</p>\n<hr>\n<p>最后提供一个非常全面的动态规划讲解：<br>作者：Hawstein<br>出处：<a href=\"\">http://www.hawstein.com/posts/dp-novice-to-advanced.html</a><br>声明：本文采用以下协议进行授权： 自由转载-非商用-非衍生-保持署名|Creative Commons BY-NC-ND 3.0 ，转载请注明作者及出处。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"动态规划算法\"><a href=\"#动态规划算法\" class=\"headerlink\" title=\"动态规划算法\"></a>动态规划算法</h2><h3 id=\"动态规划算法基本概念\"><a href=\"#动态规划算法基本概念\" class=\"headerlink\" title=\"动态规划算法基本概念\"></a>动态规划算法基本概念</h3><p>动态规划的过程：每次决策依赖于当前状态，又随机引起状态的转移。一个决策序列就是在变化的状态中产生出来的，是一种多阶段最优化决策解决问题的过程。</p>\n<h3 id=\"基本思想\"><a href=\"#基本思想\" class=\"headerlink\" title=\"基本思想\"></a>基本思想</h3><p>将待求解的问题分解为若干个子问题（阶段），按顺序求解子阶段，前一子问题的解，为后一子问题的求解提供了有用的信息，在求解任一子问题时，列出各种可能的局部解，通过决策保留那些有可能达到最优的局部解，丢弃其它局部解。</p>\n<h3 id=\"实际问题\"><a href=\"#实际问题\" class=\"headerlink\" title=\"实际问题\"></a>实际问题</h3><blockquote>\n<h4 id=\"数字三角形\"><a href=\"#数字三角形\" class=\"headerlink\" title=\"数字三角形\"></a>数字三角形</h4><p><img src=\"http://img.blog.csdn.net/20150811133448624?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"数字三角形\"></p>\n</blockquote>\n<p> 在上面的数字三角形中寻找一条从顶部到底边的路径，使得路径上所经过的数字之和最大。路径上的每一步都只能往左下或 右下走。只需要求出这个最大和即可，不必给出具体路径。 三角形的行数大于1小于等于100，数字为 0 - 99。<br>输入格式：</p>\n<pre><code>5      //表示三角形的行数    \n\n7\n\n3   8\n\n8   1   0\n\n2   7   4   4\n\n4   5   2   6   5\n\n要求输出最大和</code></pre><h4 id=\"基本思路\"><a href=\"#基本思路\" class=\"headerlink\" title=\"基本思路\"></a>基本思路</h4><p>用一个二期数组存放数字三角形<br>用D[i,j]表示第i行第j个数字（i 和j 均从1开始）<br>用MaxSum[i,j]表示从D[i,j]到底边的各条路径的和的最大值。<br>因此，问题改为求MaxSum[1,1];</p>\n<hr>\n<p>用递归解决,递归方程如下：<br><em>MaxSum[i,j] = D[i,j]  i=N<br>MaxSum[i,j] = Max(MaxSum[i+1,j],MaxSum[i+1,j+1])+D[i,j] i!=N</em><br>根据递归方程可得代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include&lt;iostream&gt;</span><br><span class=\"line\">#include&lt;Math.h&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\">int D[101][101];</span><br><span class=\"line\">int n;</span><br><span class=\"line\">int MaxSum(int i,int j)&#123;</span><br><span class=\"line\">    if(i&#x3D;&#x3D;n)&#123;</span><br><span class=\"line\">      return D[i,j];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return max(MaxSum[i+1,j],MaxSum[i+1,j+1)+D[i,j];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">int main()&#123;</span><br><span class=\"line\">    cin&gt;&gt;n;</span><br><span class=\"line\">    for(int i&#x3D;1;i&lt;&#x3D;n;i++)&#123;</span><br><span class=\"line\">        for(int j&#x3D;1;j&lt;&#x3D;i;j++)&#123;</span><br><span class=\"line\">        cin &gt;&gt;D[i,j&#125;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">   cout&lt;&lt;MaxSum[1,1]&lt;&lt;endl;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p>但是，这样计算的时间复杂度非常高，因为我们重复计算了很多次已经计算过的值。</p>\n<p><img src=\"http://img.blog.csdn.net/20150811140840233?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"三角形计算值\"><br><strong>例如</strong>：计算MaxSum[2,1]时，会计算MaxSum[3,2];当计算MaxSum[2,2]时，又会计算MaxSum[3,2]。这样就会重复很多次无用计算。<br>所以可以改进程序，使之成为 <em>记忆型递归算法</em></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include&lt;iostream&gt;</span><br><span class=\"line\">#include&lt;Math.h&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\">int D[101][101];</span><br><span class=\"line\">int n;</span><br><span class=\"line\">int MaxSum(int i,int j)&#123;</span><br><span class=\"line\">    if(MaxSum[i,j]!&#x3D;-1)&#123;</span><br><span class=\"line\">      return MaxSum[i,j];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if(i&#x3D;&#x3D;n)&#123;</span><br><span class=\"line\">      return D[i,j];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return max(MaxSum[i+1,j],MaxSum[i+1,j+1)+D[i,j];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">int main()&#123;</span><br><span class=\"line\">    cin&gt;&gt;n;</span><br><span class=\"line\">    for(int i&#x3D;1;i&lt;&#x3D;n;i++)&#123;</span><br><span class=\"line\">        for(int j&#x3D;1;j&lt;&#x3D;i;j++)&#123;</span><br><span class=\"line\">        cin &gt;&gt;D[i,j&#125;;</span><br><span class=\"line\">        MaxSum[i,j]&#x3D;-1;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    cout&lt;&lt;MaxSum[1,1]&lt;&lt;endl;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p>因为递归要使用大量堆栈空间，容易造成栈溢出，所以考虑把递归改为递推。<br>从最后一行开始计算，因为最后一行的值可以直接得到：<br><img src=\"http://img.blog.csdn.net/20150811152746815?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"\"><br>然后倒数第二行，从左侧第一个数开始，将其与下方左右两个数分别相加，选择最大的填入空格。<br><img src=\"http://img.blog.csdn.net/20150811153237686?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"\"><br>依次计算每行的值<br><img src=\"http://img.blog.csdn.net/20150811153534629?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"\"><br><img src=\"http://img.blog.csdn.net/20150811153553012?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"\"><br>由此，便从递归型动态规划=&gt;递推型动态规划：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include&lt;iostream&gt;</span><br><span class=\"line\">#include&lt;stdio.h&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\">int D[101][101];</span><br><span class=\"line\">int MaxSum[101][101];</span><br><span class=\"line\">int n;</span><br><span class=\"line\">int main()&#123;</span><br><span class=\"line\">    cin&gt;&gt;n;</span><br><span class=\"line\">    for(int i&#x3D;1;i&lt;&#x3D;n;i++)&#123;</span><br><span class=\"line\">        for(int j&#x3D;1;j&lt;&#x3D;i;j++)&#123;</span><br><span class=\"line\">            cin&gt;&gt;D[i,j];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    for(int i&#x3D;1;i&lt;&#x3D;n;i++)&#123;</span><br><span class=\"line\">        MaxSum[n][i] &#x3D; D[n][i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    for(int i&#x3D;n-1;i&gt;&#x3D;1;i--)&#123;</span><br><span class=\"line\">        for(int j&#x3D;1;j&lt;&#x3D;i,;j++)&#123;</span><br><span class=\"line\">            MaxSum[i][j]&#x3D;max(MaxSum[i+1][j],MaxSum[i+1][j+1])+D[i][j];</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     cout&lt;&lt;MaxSum[1][1]&lt;&lt;endl;</span><br></pre></td></tr></table></figure>\n<p>接下来对空间进行优化，可以不采用二维数组来存储MaxSum[i][j],只要采用一维数组MaxSum[101]，一层一层向外推就可以了。<br>对空间优化后的递推过程如下：<br><img src=\"http://img.blog.csdn.net/20150811155011262?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"\"><br><img src=\"http://img.blog.csdn.net/20150811155028144?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"\"><br><img src=\"http://img.blog.csdn.net/20150811155119121?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"\"><br><img src=\"http://img.blog.csdn.net/20150811155136507?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"\"><br><img src=\"http://img.blog.csdn.net/20150811155255355?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"\"><br><img src=\"http://img.blog.csdn.net/20150811155311499?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"\"><br>maxSum数组都可以不要，直接用D的第n行直接替代maxSum即可</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;iostream&gt;  </span><br><span class=\"line\">#include &lt;algorithm&gt; </span><br><span class=\"line\">using namespace std; </span><br><span class=\"line\"></span><br><span class=\"line\">#define MAX 101  </span><br><span class=\"line\"></span><br><span class=\"line\">int D[MAX][MAX];  </span><br><span class=\"line\">int n; </span><br><span class=\"line\">int * maxSum; </span><br><span class=\"line\"></span><br><span class=\"line\">int main()&#123;    </span><br><span class=\"line\">\tint i,j;    </span><br><span class=\"line\">\tcin &gt;&gt; n;    </span><br><span class=\"line\">\tfor(i&#x3D;1;i&lt;&#x3D;n;i++)   </span><br><span class=\"line\">\t\tfor(j&#x3D;1;j&lt;&#x3D;i;j++)        </span><br><span class=\"line\">\t\t\tcin &gt;&gt; D[i][j];   </span><br><span class=\"line\">\tmaxSum &#x3D; D[n]; &#x2F;&#x2F;maxSum指向第n行    </span><br><span class=\"line\">\tfor( int i &#x3D; n-1; i&gt;&#x3D; 1;  --i )     </span><br><span class=\"line\">\t\tfor( int j &#x3D; 1; j &lt;&#x3D; i; ++j )       </span><br><span class=\"line\">\t\t\tmaxSum[j] &#x3D; max(maxSum[j],maxSum[j+1]) + D[i][j];    </span><br><span class=\"line\">\tcout &lt;&lt; maxSum[1] &lt;&lt; endl;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"动态规划适用情况\"><a href=\"#动态规划适用情况\" class=\"headerlink\" title=\"动态规划适用情况\"></a>动态规划适用情况</h3><p>一般具有三个性质：</p>\n<ol>\n<li><strong>最优化原理</strong>：问题的最优解所包含的子问题的解也是最优的，称该问题具有最优子结构。</li>\n<li><strong>无后效性</strong>：某阶段状态一旦确定，就不受这个状态以后的决策的影响。</li>\n<li><strong>有重叠子问题</strong>：子问题之间是不独立的，一个子问题在下一阶段决策中可能被多次使用。（不是必要条件）。</li>\n</ol>\n<h3 id=\"求解的基本步骤\"><a href=\"#求解的基本步骤\" class=\"headerlink\" title=\"求解的基本步骤\"></a>求解的基本步骤</h3><ol>\n<li><em>化分阶段</em>：化分后的阶段一定要是有序的或者是可排序的。</li>\n<li><em>确定状态和状态变量</em>：将问题发展到各个阶段时所处的各种客观情况用不同的状态表示出来。</li>\n<li><em>确定决策并写出状态转移方程</em>：状态转移就是根据上一阶段的状态和决策来导出本阶段的状态。</li>\n<li><em>寻找边界条件</em>：状态转移方程是一个递推式，需要递推的终止条件。</li>\n</ol>\n<p>f(n,m)=max{f(n-1.m),f(n-1,m-w[n])+P(n,m)};</p>\n<hr>\n<p>最后提供一个非常全面的动态规划讲解：<br>作者：Hawstein<br>出处：<a href=\"\">http://www.hawstein.com/posts/dp-novice-to-advanced.html</a><br>声明：本文采用以下协议进行授权： 自由转载-非商用-非衍生-保持署名|Creative Commons BY-NC-ND 3.0 ，转载请注明作者及出处。</p>\n"},{"title":"CSS语法","date":"2017-03-13T16:00:00.000Z","_content":"\n## CSS3 语法\n\nfirst-of-type :用来定位一个父元素下的某个类型的第一个子元素。\n\nnth-of-type (n):\n\nlast-of-type:\n\nonly-child:选择父元素中只有一个子元素，且只有唯一的一个子元素。\n\nonly-of-type:一个父元素有很多元素，而其中只有一种类型的子元素是唯一的，选中这个元素中唯一一个类型的子元素。\n\nenabled: 用于选择可用表单元素\n\ndisabled：用于选择不可用表单元素\n\nchecked:选中状态 常用于自定义样式\n\n\n```\thtml\n\t<form action=\"#\">\n\t<div class=\"wrapper”>\n\t\t<div class=\"box\">\n\t\t  <input type=\"radio\" checked=\"checked\"  id=\"boy\" ''name=\"1\" /><span></span>\n\t\t</div>\n\t\t<label for=\"boy\">男</label>\n\t </div>  \n\t <div class=\"wrapper\">\n\t\t<div class=\"box\">\n\t\t  <input type=\"radio\"  id=\"girl\" name=\"1\"  /><span></span>\n\t</div>\n\t<label for=\"girl\">女</label>\n\t</div>\n\t</form>\n```\n\n\n```css\n\t.box{\n\tdisplay:inlne-block;\n\t width: 30px;\n\t  height: 30px;\n\t  margin-right: 10px;\n\t  position: relative;\n\t  background: orange;\n\t  vertical-align: middle;\n\t  border-radius: 100%;\n\t}\n\t.box input {\n\t  opacity: 0;\n\t  position: absolute;\n\t  top:0;\n\t  left:0;\n\t  width: 100%;\n\t  height:100%;\n\t  z-index:100;/*使input按钮在span的上一层，不加点击区域会出现不灵敏*/\n\t}\n\t\n\t.box span { \n\t  display: block;\n\t  width: 10px;\n\t  height: 10px;\n\t  border-radius: 100%;\n\t  position: absolute;\n\t  background: #fff;\n\t  top: 50%;\n\t  left:50%;\n\t  margin: -5px 0  0 -5px;\n\t  z-index:1;\n\t}\n\t\n\tinput[type=\"radio\"] + span {\n\t  opacity: 0;\n\t\n\t}\n\tinput[type=\"radio\"]:checked + span {\n\t  opacity: 1;\n\t}\n```\n\nselection伪元素， 匹配突出显示的文本\n\n:read-only \n\nbefore/after 用来给元素的前面或后面插入内容，常和content配合使用，使用场景最多的是清除浮动。\n\t\n\n```css\n.clearfix::before,\n\t.clearfix::after {\n\t    content: \".\";\n\t    display: block;\n\t    height: 0;\n\t    visibility: hidden;\n\t}\n\t.clearfix:after {clear: both;}\n\t.clearfix {zoom: 1;}\n```\n\n\n### 实现阴影框效果\n\t\n```css\n.effect::before, .effect::after{\n\t    content:\"\";\n\t    position:absolute;\n\t    z-index:-1;\n\t    -webkit-box-shadow:0 0 20px rgba(0,0,0,0.8);\n\t    -moz-box-shadow:0 0 20px rgba(0,0,0,0.8);\n\t    box-shadow:0 0 20px rgba(0,0,0,0.8);\n\t    top:50%;\n\t    bottom:0;\n\t    left:10px;\n\t    right:10px;\n\t    -moz-border-radius:100px / 10px;\n\t    border-radius:100px / 10px;\n\t}\n```\n\n### 给背景图添加蒙板效果可以用before\n\n```css\n\ta::before{\n\t            content:\"\";\n\t            display: block;\n\t            height: 120px;\n\t            width: 120px;\n\t            border: 5px solid #fff;\n\t            border-radius: 50%;\n\t            position: absolute;\n\t            left: 50%;\n\t            margin-left: -60px;\n\t            z-index: 99999;\n\t            top: -80px;\n\t            background: rgba(0,0,0,0.3);\n\t     }\n```\n\n### CSS变形和动画\n\n动画效果：transform：（属性值）\n\n**rotate(xdeg)**设置一个角度值，用来指定旋转的幅度。如果这个值为正值，元素相对原点中心顺时针旋转；如果这个值为负\n值，元素相对原点中心逆时针旋转\n\n**skew(x,y)**使元素在水平和垂直方向同时扭曲\n\n**skewX(x)**仅使元素在水平方向扭曲变形（X轴扭曲变形）\n\n**skewY(y)**仅使元素在竖直方向扭曲变形\n\n**scale(X,Y)**使元素水平方向和垂直方向同时缩放（也就是X轴和Y轴同时缩放）\n\n**translate(x,y)** 使用translate()函数，可以把元素从原来的位置移动，而不影响在X、Y轴上的任何Web组件。常用于实现在不确定宽高的元素实现水平和垂直居中。\n\n**transition**\n\ntransition-property\ntransition-timing-function\ntransition-delay**\n\n关键帧KeyFrames\n以“@keyframes”开头，后面紧跟着是动画名称加上一对花括号“…”，括号中就是一些不同时间段样式规则.\n\t@keyframes changecolor{\n\t  0%{\n\t   background: red;\n\t  }\n\t  100%{\n\t    background: green;\n\t  }\n\t}\n通过animation调用\n\nanimation-duration\n\nanimation-name\n\nanimation-timing-function:ease | linear | ease-in | ease-out | ease-in-out | cubic-bezier(\\<number\\>, \\<number\\>, \\<number\\>, \\<number\\>) [, ease | linear | ease-in | ease-out | ease-in-out | cubic-bezier(\\<number\\>, \\<number\\>, \\<number\\>, \\<number\\>)](#)*\n\nanimation-iteration-count: infinite | \\<number\\> [, infinite | \\<number\\>](#)*\n\nanimation-play-state:paused/running\n\n","source":"_posts/2017-03-14-CSS3 语法.md","raw":"---\ntitle: CSS语法\ndate: 2017-03-14\ncategories: \n- FE\ntags:\n- FE\n- css\n---\n\n## CSS3 语法\n\nfirst-of-type :用来定位一个父元素下的某个类型的第一个子元素。\n\nnth-of-type (n):\n\nlast-of-type:\n\nonly-child:选择父元素中只有一个子元素，且只有唯一的一个子元素。\n\nonly-of-type:一个父元素有很多元素，而其中只有一种类型的子元素是唯一的，选中这个元素中唯一一个类型的子元素。\n\nenabled: 用于选择可用表单元素\n\ndisabled：用于选择不可用表单元素\n\nchecked:选中状态 常用于自定义样式\n\n\n```\thtml\n\t<form action=\"#\">\n\t<div class=\"wrapper”>\n\t\t<div class=\"box\">\n\t\t  <input type=\"radio\" checked=\"checked\"  id=\"boy\" ''name=\"1\" /><span></span>\n\t\t</div>\n\t\t<label for=\"boy\">男</label>\n\t </div>  \n\t <div class=\"wrapper\">\n\t\t<div class=\"box\">\n\t\t  <input type=\"radio\"  id=\"girl\" name=\"1\"  /><span></span>\n\t</div>\n\t<label for=\"girl\">女</label>\n\t</div>\n\t</form>\n```\n\n\n```css\n\t.box{\n\tdisplay:inlne-block;\n\t width: 30px;\n\t  height: 30px;\n\t  margin-right: 10px;\n\t  position: relative;\n\t  background: orange;\n\t  vertical-align: middle;\n\t  border-radius: 100%;\n\t}\n\t.box input {\n\t  opacity: 0;\n\t  position: absolute;\n\t  top:0;\n\t  left:0;\n\t  width: 100%;\n\t  height:100%;\n\t  z-index:100;/*使input按钮在span的上一层，不加点击区域会出现不灵敏*/\n\t}\n\t\n\t.box span { \n\t  display: block;\n\t  width: 10px;\n\t  height: 10px;\n\t  border-radius: 100%;\n\t  position: absolute;\n\t  background: #fff;\n\t  top: 50%;\n\t  left:50%;\n\t  margin: -5px 0  0 -5px;\n\t  z-index:1;\n\t}\n\t\n\tinput[type=\"radio\"] + span {\n\t  opacity: 0;\n\t\n\t}\n\tinput[type=\"radio\"]:checked + span {\n\t  opacity: 1;\n\t}\n```\n\nselection伪元素， 匹配突出显示的文本\n\n:read-only \n\nbefore/after 用来给元素的前面或后面插入内容，常和content配合使用，使用场景最多的是清除浮动。\n\t\n\n```css\n.clearfix::before,\n\t.clearfix::after {\n\t    content: \".\";\n\t    display: block;\n\t    height: 0;\n\t    visibility: hidden;\n\t}\n\t.clearfix:after {clear: both;}\n\t.clearfix {zoom: 1;}\n```\n\n\n### 实现阴影框效果\n\t\n```css\n.effect::before, .effect::after{\n\t    content:\"\";\n\t    position:absolute;\n\t    z-index:-1;\n\t    -webkit-box-shadow:0 0 20px rgba(0,0,0,0.8);\n\t    -moz-box-shadow:0 0 20px rgba(0,0,0,0.8);\n\t    box-shadow:0 0 20px rgba(0,0,0,0.8);\n\t    top:50%;\n\t    bottom:0;\n\t    left:10px;\n\t    right:10px;\n\t    -moz-border-radius:100px / 10px;\n\t    border-radius:100px / 10px;\n\t}\n```\n\n### 给背景图添加蒙板效果可以用before\n\n```css\n\ta::before{\n\t            content:\"\";\n\t            display: block;\n\t            height: 120px;\n\t            width: 120px;\n\t            border: 5px solid #fff;\n\t            border-radius: 50%;\n\t            position: absolute;\n\t            left: 50%;\n\t            margin-left: -60px;\n\t            z-index: 99999;\n\t            top: -80px;\n\t            background: rgba(0,0,0,0.3);\n\t     }\n```\n\n### CSS变形和动画\n\n动画效果：transform：（属性值）\n\n**rotate(xdeg)**设置一个角度值，用来指定旋转的幅度。如果这个值为正值，元素相对原点中心顺时针旋转；如果这个值为负\n值，元素相对原点中心逆时针旋转\n\n**skew(x,y)**使元素在水平和垂直方向同时扭曲\n\n**skewX(x)**仅使元素在水平方向扭曲变形（X轴扭曲变形）\n\n**skewY(y)**仅使元素在竖直方向扭曲变形\n\n**scale(X,Y)**使元素水平方向和垂直方向同时缩放（也就是X轴和Y轴同时缩放）\n\n**translate(x,y)** 使用translate()函数，可以把元素从原来的位置移动，而不影响在X、Y轴上的任何Web组件。常用于实现在不确定宽高的元素实现水平和垂直居中。\n\n**transition**\n\ntransition-property\ntransition-timing-function\ntransition-delay**\n\n关键帧KeyFrames\n以“@keyframes”开头，后面紧跟着是动画名称加上一对花括号“…”，括号中就是一些不同时间段样式规则.\n\t@keyframes changecolor{\n\t  0%{\n\t   background: red;\n\t  }\n\t  100%{\n\t    background: green;\n\t  }\n\t}\n通过animation调用\n\nanimation-duration\n\nanimation-name\n\nanimation-timing-function:ease | linear | ease-in | ease-out | ease-in-out | cubic-bezier(\\<number\\>, \\<number\\>, \\<number\\>, \\<number\\>) [, ease | linear | ease-in | ease-out | ease-in-out | cubic-bezier(\\<number\\>, \\<number\\>, \\<number\\>, \\<number\\>)](#)*\n\nanimation-iteration-count: infinite | \\<number\\> [, infinite | \\<number\\>](#)*\n\nanimation-play-state:paused/running\n\n","slug":"2017-03-14-CSS3 语法","published":1,"updated":"2020-03-01T12:09:37.507Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckreo13o60006ytt5g6llh3po","content":"<h2 id=\"CSS3-语法\"><a href=\"#CSS3-语法\" class=\"headerlink\" title=\"CSS3 语法\"></a>CSS3 语法</h2><p>first-of-type :用来定位一个父元素下的某个类型的第一个子元素。</p>\n<p>nth-of-type (n):</p>\n<p>last-of-type:</p>\n<p>only-child:选择父元素中只有一个子元素，且只有唯一的一个子元素。</p>\n<p>only-of-type:一个父元素有很多元素，而其中只有一种类型的子元素是唯一的，选中这个元素中唯一一个类型的子元素。</p>\n<p>enabled: 用于选择可用表单元素</p>\n<p>disabled：用于选择不可用表单元素</p>\n<p>checked:选中状态 常用于自定义样式</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">\"#\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"wrapper”&gt;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">\t&lt;div class=\"</span><span class=\"attr\">box</span>\"&gt;</span></span><br><span class=\"line\">\t  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"radio\"</span> <span class=\"attr\">checked</span>=<span class=\"string\">\"checked\"</span>  <span class=\"attr\">id</span>=<span class=\"string\">\"boy\"</span> ''<span class=\"attr\">name</span>=<span class=\"string\">\"1\"</span> /&gt;</span><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"boy\"</span>&gt;</span>男<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>  </span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"wrapper\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span></span><br><span class=\"line\">\t  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"radio\"</span>  <span class=\"attr\">id</span>=<span class=\"string\">\"girl\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"1\"</span>  /&gt;</span><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"girl\"</span>&gt;</span>女<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span>&#123;</span><br><span class=\"line\"><span class=\"attribute\">display</span>:inlne-block;</span><br><span class=\"line\"> <span class=\"attribute\">width</span>: <span class=\"number\">30px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">30px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin-right</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: orange;</span><br><span class=\"line\">  <span class=\"attribute\">vertical-align</span>: middle;</span><br><span class=\"line\">  <span class=\"attribute\">border-radius</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.box</span> <span class=\"selector-tag\">input</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">opacity</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>:<span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">left</span>:<span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>:<span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">z-index</span>:<span class=\"number\">100</span>;<span class=\"comment\">/*使input按钮在span的上一层，不加点击区域会出现不灵敏*/</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.box</span> <span class=\"selector-tag\">span</span> &#123; </span><br><span class=\"line\">  <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border-radius</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">left</span>:<span class=\"number\">50%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: -<span class=\"number\">5px</span> <span class=\"number\">0</span>  <span class=\"number\">0</span> -<span class=\"number\">5px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">z-index</span>:<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">input</span><span class=\"selector-attr\">[type=<span class=\"string\">\"radio\"</span>]</span> + <span class=\"selector-tag\">span</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">opacity</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">input</span><span class=\"selector-attr\">[type=<span class=\"string\">\"radio\"</span>]</span><span class=\"selector-pseudo\">:checked</span> + <span class=\"selector-tag\">span</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">opacity</span>: <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>selection伪元素， 匹配突出显示的文本</p>\n<p>:read-only </p>\n<p>before/after 用来给元素的前面或后面插入内容，常和content配合使用，使用场景最多的是清除浮动。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.clearfix</span><span class=\"selector-pseudo\">::before</span>,</span><br><span class=\"line\">\t<span class=\"selector-class\">.clearfix</span><span class=\"selector-pseudo\">::after</span> &#123;</span><br><span class=\"line\">\t    <span class=\"attribute\">content</span>: <span class=\"string\">\".\"</span>;</span><br><span class=\"line\">\t    <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">\t    <span class=\"attribute\">height</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">\t    <span class=\"attribute\">visibility</span>: hidden;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"selector-class\">.clearfix</span><span class=\"selector-pseudo\">:after</span> &#123;<span class=\"attribute\">clear</span>: both;&#125;</span><br><span class=\"line\">\t<span class=\"selector-class\">.clearfix</span> &#123;<span class=\"attribute\">zoom</span>: <span class=\"number\">1</span>;&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"实现阴影框效果\"><a href=\"#实现阴影框效果\" class=\"headerlink\" title=\"实现阴影框效果\"></a>实现阴影框效果</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.effect</span><span class=\"selector-pseudo\">::before</span>, <span class=\"selector-class\">.effect</span><span class=\"selector-pseudo\">::after</span>&#123;</span><br><span class=\"line\">\t    <span class=\"attribute\">content</span>:<span class=\"string\">\"\"</span>;</span><br><span class=\"line\">\t    <span class=\"attribute\">position</span>:absolute;</span><br><span class=\"line\">\t    <span class=\"attribute\">z-index</span>:-<span class=\"number\">1</span>;</span><br><span class=\"line\">\t    <span class=\"attribute\">-webkit-box-shadow</span>:<span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">20px</span> <span class=\"built_in\">rgba</span>(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0.8</span>);</span><br><span class=\"line\">\t    <span class=\"attribute\">-moz-box-shadow</span>:<span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">20px</span> <span class=\"built_in\">rgba</span>(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0.8</span>);</span><br><span class=\"line\">\t    <span class=\"attribute\">box-shadow</span>:<span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">20px</span> <span class=\"built_in\">rgba</span>(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0.8</span>);</span><br><span class=\"line\">\t    <span class=\"attribute\">top</span>:<span class=\"number\">50%</span>;</span><br><span class=\"line\">\t    <span class=\"attribute\">bottom</span>:<span class=\"number\">0</span>;</span><br><span class=\"line\">\t    <span class=\"attribute\">left</span>:<span class=\"number\">10px</span>;</span><br><span class=\"line\">\t    <span class=\"attribute\">right</span>:<span class=\"number\">10px</span>;</span><br><span class=\"line\">\t    <span class=\"attribute\">-moz-border-radius</span>:<span class=\"number\">100px</span> / <span class=\"number\">10px</span>;</span><br><span class=\"line\">\t    <span class=\"attribute\">border-radius</span>:<span class=\"number\">100px</span> / <span class=\"number\">10px</span>;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"给背景图添加蒙板效果可以用before\"><a href=\"#给背景图添加蒙板效果可以用before\" class=\"headerlink\" title=\"给背景图添加蒙板效果可以用before\"></a>给背景图添加蒙板效果可以用before</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">a</span><span class=\"selector-pseudo\">::before</span>&#123;</span><br><span class=\"line\">            <span class=\"attribute\">content</span>:<span class=\"string\">\"\"</span>;</span><br><span class=\"line\">            <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">            <span class=\"attribute\">height</span>: <span class=\"number\">120px</span>;</span><br><span class=\"line\">            <span class=\"attribute\">width</span>: <span class=\"number\">120px</span>;</span><br><span class=\"line\">            <span class=\"attribute\">border</span>: <span class=\"number\">5px</span> solid <span class=\"number\">#fff</span>;</span><br><span class=\"line\">            <span class=\"attribute\">border-radius</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">            <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">            <span class=\"attribute\">left</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">            <span class=\"attribute\">margin-left</span>: -<span class=\"number\">60px</span>;</span><br><span class=\"line\">            <span class=\"attribute\">z-index</span>: <span class=\"number\">99999</span>;</span><br><span class=\"line\">            <span class=\"attribute\">top</span>: -<span class=\"number\">80px</span>;</span><br><span class=\"line\">            <span class=\"attribute\">background</span>: <span class=\"built_in\">rgba</span>(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0.3</span>);</span><br><span class=\"line\">     &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"CSS变形和动画\"><a href=\"#CSS变形和动画\" class=\"headerlink\" title=\"CSS变形和动画\"></a>CSS变形和动画</h3><p>动画效果：transform：（属性值）</p>\n<p><strong>rotate(xdeg)</strong>设置一个角度值，用来指定旋转的幅度。如果这个值为正值，元素相对原点中心顺时针旋转；如果这个值为负<br>值，元素相对原点中心逆时针旋转</p>\n<p><strong>skew(x,y)</strong>使元素在水平和垂直方向同时扭曲</p>\n<p><strong>skewX(x)</strong>仅使元素在水平方向扭曲变形（X轴扭曲变形）</p>\n<p><strong>skewY(y)</strong>仅使元素在竖直方向扭曲变形</p>\n<p><strong>scale(X,Y)</strong>使元素水平方向和垂直方向同时缩放（也就是X轴和Y轴同时缩放）</p>\n<p><strong>translate(x,y)</strong> 使用translate()函数，可以把元素从原来的位置移动，而不影响在X、Y轴上的任何Web组件。常用于实现在不确定宽高的元素实现水平和垂直居中。</p>\n<p><strong>transition</strong></p>\n<p>transition-property<br>transition-timing-function<br>transition-delay**</p>\n<p>关键帧KeyFrames<br>以“@keyframes”开头，后面紧跟着是动画名称加上一对花括号“…”，括号中就是一些不同时间段样式规则.<br>    @keyframes changecolor{<br>      0%{<br>       background: red;<br>      }<br>      100%{<br>        background: green;<br>      }<br>    }<br>通过animation调用</p>\n<p>animation-duration</p>\n<p>animation-name</p>\n<p>animation-timing-function:ease | linear | ease-in | ease-out | ease-in-out | cubic-bezier(&lt;number&gt;, &lt;number&gt;, &lt;number&gt;, &lt;number&gt;) <a href=\"#\">, ease | linear | ease-in | ease-out | ease-in-out | cubic-bezier(&lt;number&gt;, &lt;number&gt;, &lt;number&gt;, &lt;number&gt;)</a>*</p>\n<p>animation-iteration-count: infinite | &lt;number&gt; <a href=\"#\">, infinite | &lt;number&gt;</a>*</p>\n<p>animation-play-state:paused/running</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"CSS3-语法\"><a href=\"#CSS3-语法\" class=\"headerlink\" title=\"CSS3 语法\"></a>CSS3 语法</h2><p>first-of-type :用来定位一个父元素下的某个类型的第一个子元素。</p>\n<p>nth-of-type (n):</p>\n<p>last-of-type:</p>\n<p>only-child:选择父元素中只有一个子元素，且只有唯一的一个子元素。</p>\n<p>only-of-type:一个父元素有很多元素，而其中只有一种类型的子元素是唯一的，选中这个元素中唯一一个类型的子元素。</p>\n<p>enabled: 用于选择可用表单元素</p>\n<p>disabled：用于选择不可用表单元素</p>\n<p>checked:选中状态 常用于自定义样式</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">\"#\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"wrapper”&gt;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">\t&lt;div class=\"</span><span class=\"attr\">box</span>\"&gt;</span></span><br><span class=\"line\">\t  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"radio\"</span> <span class=\"attr\">checked</span>=<span class=\"string\">\"checked\"</span>  <span class=\"attr\">id</span>=<span class=\"string\">\"boy\"</span> ''<span class=\"attr\">name</span>=<span class=\"string\">\"1\"</span> /&gt;</span><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"boy\"</span>&gt;</span>男<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>  </span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"wrapper\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span></span><br><span class=\"line\">\t  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"radio\"</span>  <span class=\"attr\">id</span>=<span class=\"string\">\"girl\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"1\"</span>  /&gt;</span><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"girl\"</span>&gt;</span>女<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span>&#123;</span><br><span class=\"line\"><span class=\"attribute\">display</span>:inlne-block;</span><br><span class=\"line\"> <span class=\"attribute\">width</span>: <span class=\"number\">30px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">30px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin-right</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: orange;</span><br><span class=\"line\">  <span class=\"attribute\">vertical-align</span>: middle;</span><br><span class=\"line\">  <span class=\"attribute\">border-radius</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.box</span> <span class=\"selector-tag\">input</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">opacity</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>:<span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">left</span>:<span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>:<span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">z-index</span>:<span class=\"number\">100</span>;<span class=\"comment\">/*使input按钮在span的上一层，不加点击区域会出现不灵敏*/</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.box</span> <span class=\"selector-tag\">span</span> &#123; </span><br><span class=\"line\">  <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border-radius</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">left</span>:<span class=\"number\">50%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: -<span class=\"number\">5px</span> <span class=\"number\">0</span>  <span class=\"number\">0</span> -<span class=\"number\">5px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">z-index</span>:<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">input</span><span class=\"selector-attr\">[type=<span class=\"string\">\"radio\"</span>]</span> + <span class=\"selector-tag\">span</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">opacity</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">input</span><span class=\"selector-attr\">[type=<span class=\"string\">\"radio\"</span>]</span><span class=\"selector-pseudo\">:checked</span> + <span class=\"selector-tag\">span</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">opacity</span>: <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>selection伪元素， 匹配突出显示的文本</p>\n<p>:read-only </p>\n<p>before/after 用来给元素的前面或后面插入内容，常和content配合使用，使用场景最多的是清除浮动。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.clearfix</span><span class=\"selector-pseudo\">::before</span>,</span><br><span class=\"line\">\t<span class=\"selector-class\">.clearfix</span><span class=\"selector-pseudo\">::after</span> &#123;</span><br><span class=\"line\">\t    <span class=\"attribute\">content</span>: <span class=\"string\">\".\"</span>;</span><br><span class=\"line\">\t    <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">\t    <span class=\"attribute\">height</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">\t    <span class=\"attribute\">visibility</span>: hidden;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"selector-class\">.clearfix</span><span class=\"selector-pseudo\">:after</span> &#123;<span class=\"attribute\">clear</span>: both;&#125;</span><br><span class=\"line\">\t<span class=\"selector-class\">.clearfix</span> &#123;<span class=\"attribute\">zoom</span>: <span class=\"number\">1</span>;&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"实现阴影框效果\"><a href=\"#实现阴影框效果\" class=\"headerlink\" title=\"实现阴影框效果\"></a>实现阴影框效果</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.effect</span><span class=\"selector-pseudo\">::before</span>, <span class=\"selector-class\">.effect</span><span class=\"selector-pseudo\">::after</span>&#123;</span><br><span class=\"line\">\t    <span class=\"attribute\">content</span>:<span class=\"string\">\"\"</span>;</span><br><span class=\"line\">\t    <span class=\"attribute\">position</span>:absolute;</span><br><span class=\"line\">\t    <span class=\"attribute\">z-index</span>:-<span class=\"number\">1</span>;</span><br><span class=\"line\">\t    <span class=\"attribute\">-webkit-box-shadow</span>:<span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">20px</span> <span class=\"built_in\">rgba</span>(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0.8</span>);</span><br><span class=\"line\">\t    <span class=\"attribute\">-moz-box-shadow</span>:<span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">20px</span> <span class=\"built_in\">rgba</span>(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0.8</span>);</span><br><span class=\"line\">\t    <span class=\"attribute\">box-shadow</span>:<span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">20px</span> <span class=\"built_in\">rgba</span>(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0.8</span>);</span><br><span class=\"line\">\t    <span class=\"attribute\">top</span>:<span class=\"number\">50%</span>;</span><br><span class=\"line\">\t    <span class=\"attribute\">bottom</span>:<span class=\"number\">0</span>;</span><br><span class=\"line\">\t    <span class=\"attribute\">left</span>:<span class=\"number\">10px</span>;</span><br><span class=\"line\">\t    <span class=\"attribute\">right</span>:<span class=\"number\">10px</span>;</span><br><span class=\"line\">\t    <span class=\"attribute\">-moz-border-radius</span>:<span class=\"number\">100px</span> / <span class=\"number\">10px</span>;</span><br><span class=\"line\">\t    <span class=\"attribute\">border-radius</span>:<span class=\"number\">100px</span> / <span class=\"number\">10px</span>;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"给背景图添加蒙板效果可以用before\"><a href=\"#给背景图添加蒙板效果可以用before\" class=\"headerlink\" title=\"给背景图添加蒙板效果可以用before\"></a>给背景图添加蒙板效果可以用before</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">a</span><span class=\"selector-pseudo\">::before</span>&#123;</span><br><span class=\"line\">            <span class=\"attribute\">content</span>:<span class=\"string\">\"\"</span>;</span><br><span class=\"line\">            <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">            <span class=\"attribute\">height</span>: <span class=\"number\">120px</span>;</span><br><span class=\"line\">            <span class=\"attribute\">width</span>: <span class=\"number\">120px</span>;</span><br><span class=\"line\">            <span class=\"attribute\">border</span>: <span class=\"number\">5px</span> solid <span class=\"number\">#fff</span>;</span><br><span class=\"line\">            <span class=\"attribute\">border-radius</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">            <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">            <span class=\"attribute\">left</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">            <span class=\"attribute\">margin-left</span>: -<span class=\"number\">60px</span>;</span><br><span class=\"line\">            <span class=\"attribute\">z-index</span>: <span class=\"number\">99999</span>;</span><br><span class=\"line\">            <span class=\"attribute\">top</span>: -<span class=\"number\">80px</span>;</span><br><span class=\"line\">            <span class=\"attribute\">background</span>: <span class=\"built_in\">rgba</span>(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0.3</span>);</span><br><span class=\"line\">     &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"CSS变形和动画\"><a href=\"#CSS变形和动画\" class=\"headerlink\" title=\"CSS变形和动画\"></a>CSS变形和动画</h3><p>动画效果：transform：（属性值）</p>\n<p><strong>rotate(xdeg)</strong>设置一个角度值，用来指定旋转的幅度。如果这个值为正值，元素相对原点中心顺时针旋转；如果这个值为负<br>值，元素相对原点中心逆时针旋转</p>\n<p><strong>skew(x,y)</strong>使元素在水平和垂直方向同时扭曲</p>\n<p><strong>skewX(x)</strong>仅使元素在水平方向扭曲变形（X轴扭曲变形）</p>\n<p><strong>skewY(y)</strong>仅使元素在竖直方向扭曲变形</p>\n<p><strong>scale(X,Y)</strong>使元素水平方向和垂直方向同时缩放（也就是X轴和Y轴同时缩放）</p>\n<p><strong>translate(x,y)</strong> 使用translate()函数，可以把元素从原来的位置移动，而不影响在X、Y轴上的任何Web组件。常用于实现在不确定宽高的元素实现水平和垂直居中。</p>\n<p><strong>transition</strong></p>\n<p>transition-property<br>transition-timing-function<br>transition-delay**</p>\n<p>关键帧KeyFrames<br>以“@keyframes”开头，后面紧跟着是动画名称加上一对花括号“…”，括号中就是一些不同时间段样式规则.<br>    @keyframes changecolor{<br>      0%{<br>       background: red;<br>      }<br>      100%{<br>        background: green;<br>      }<br>    }<br>通过animation调用</p>\n<p>animation-duration</p>\n<p>animation-name</p>\n<p>animation-timing-function:ease | linear | ease-in | ease-out | ease-in-out | cubic-bezier(&lt;number&gt;, &lt;number&gt;, &lt;number&gt;, &lt;number&gt;) <a href=\"#\">, ease | linear | ease-in | ease-out | ease-in-out | cubic-bezier(&lt;number&gt;, &lt;number&gt;, &lt;number&gt;, &lt;number&gt;)</a>*</p>\n<p>animation-iteration-count: infinite | &lt;number&gt; <a href=\"#\">, infinite | &lt;number&gt;</a>*</p>\n<p>animation-play-state:paused/running</p>\n"},{"title":"react router","date":"2017-04-04T16:00:00.000Z","_content":"\n# React-Router\n\n路由本质就是嵌套的视图组件\n### browserHistory\n\n**功能**：监听浏览器地址栏的变化，解析URL并与路由组件进行匹配。还提供了一些方法让你在代码中进行导航。\n//跳转到某个路径\n`browserHistory.push('./some.path');`\n//回退到先前的地址\n`browserHistory.goBack()`\n\n### 路由匹配\n配置路由匹配信息。\n\n\n```javascript\nexport default()=>(\n  <Route path='/' component={Main}>\n    <IndexRoute component={Home}/>\n    <Route path='counter' component={Counter}/>\n </Route>\n```\n\n通过上面的配置，程序知道如何渲染这些URL:\n\n| URL | Components |\n| --- | --- |\n| / | Main->Home  |\n| /counter | Main->Counter |\n\n使用了嵌套路由的概念\nIndexRoute组件将作为父级Route的默认子路由组件，即为URL为/时显示的组件。\n\n### 使用Link和IndexLink导航\n如果使用<Link to='/'>Home</Link>去导航/这个URL。只要进入以/开头的URL时，Link组件都会被激活。\ncommon/comtainer/Main.js\n-------\n\n```javascript\nimport React,{PropTypes} from 'react'\nimport {Link,IndexLink} from 'react-router'\n\nfunction Main(props){\n    return (\n        <div>\n          <ul>\n            <li><IndexLink to='/' activeStyle={{color:'red'}}>Home</IndexLink></li>\n            <li><IndexLink to='/counter' activeStyle={{color:'red'}}Counter</li>\n        </ul>\n        {/*this will render the child routes*/}\n        {React.cloneElement(props.children,props)}\n       </div>\n    );\n}\n Main.propTypes ={\n    children:PropTypes.any.isRequired          \n };\n export default Main;\n```\n\n### 服务端路由\n在React-Router中实现服务端路由，需要在Express中间件中加一个用于匹配路由的match函数，并在match的回调中进行渲染就可以。\n\nserver/server.js\n-------\n \n```javascript\nfunction handleRender(req,res){\n    const initialState ={counter:0};\n    const store = configureStore(initialState);\n    const routes =getRoutes();\n    \nmatch({routes,location:req.url},(err,redirect,renderProps)=>{\n    const html = renderToString(\n        <Provider store={store}>\n         <RouterContext {...renderProps}/>\n        </Provider>\n        );\n    const finalState =store.getState();\n    res.send(renderFullPage(html,finalState)));\n    });\n    }\n    \n//第一个的参数是一个对象，包括所有路由集合和location\n//第二个参数是一个回调函数，渲染路由组件\n//match是专为异步路由设计的函数\n//match会根据不同的请求，在回掉函数中返回不同的参数：\n*     正确匹配，没有重定向，，前两个参数为null，renderProps包含了匹配的组件和location等信息\n*     有重定向，redirect将包含重定向信息\n*     出现内部错误，err将包含错误信息\n*     404错误下，三个参数均为undefined\n```\n\n\n\n\n\n\n","source":"_posts/2017-04-05-react-router.md","raw":"---\ntitle: react router\ndate: 2017-04-05\ncategories: \n- FE\n- React\ntags:\n- FE\n- React\n- react-router\n---\n\n# React-Router\n\n路由本质就是嵌套的视图组件\n### browserHistory\n\n**功能**：监听浏览器地址栏的变化，解析URL并与路由组件进行匹配。还提供了一些方法让你在代码中进行导航。\n//跳转到某个路径\n`browserHistory.push('./some.path');`\n//回退到先前的地址\n`browserHistory.goBack()`\n\n### 路由匹配\n配置路由匹配信息。\n\n\n```javascript\nexport default()=>(\n  <Route path='/' component={Main}>\n    <IndexRoute component={Home}/>\n    <Route path='counter' component={Counter}/>\n </Route>\n```\n\n通过上面的配置，程序知道如何渲染这些URL:\n\n| URL | Components |\n| --- | --- |\n| / | Main->Home  |\n| /counter | Main->Counter |\n\n使用了嵌套路由的概念\nIndexRoute组件将作为父级Route的默认子路由组件，即为URL为/时显示的组件。\n\n### 使用Link和IndexLink导航\n如果使用<Link to='/'>Home</Link>去导航/这个URL。只要进入以/开头的URL时，Link组件都会被激活。\ncommon/comtainer/Main.js\n-------\n\n```javascript\nimport React,{PropTypes} from 'react'\nimport {Link,IndexLink} from 'react-router'\n\nfunction Main(props){\n    return (\n        <div>\n          <ul>\n            <li><IndexLink to='/' activeStyle={{color:'red'}}>Home</IndexLink></li>\n            <li><IndexLink to='/counter' activeStyle={{color:'red'}}Counter</li>\n        </ul>\n        {/*this will render the child routes*/}\n        {React.cloneElement(props.children,props)}\n       </div>\n    );\n}\n Main.propTypes ={\n    children:PropTypes.any.isRequired          \n };\n export default Main;\n```\n\n### 服务端路由\n在React-Router中实现服务端路由，需要在Express中间件中加一个用于匹配路由的match函数，并在match的回调中进行渲染就可以。\n\nserver/server.js\n-------\n \n```javascript\nfunction handleRender(req,res){\n    const initialState ={counter:0};\n    const store = configureStore(initialState);\n    const routes =getRoutes();\n    \nmatch({routes,location:req.url},(err,redirect,renderProps)=>{\n    const html = renderToString(\n        <Provider store={store}>\n         <RouterContext {...renderProps}/>\n        </Provider>\n        );\n    const finalState =store.getState();\n    res.send(renderFullPage(html,finalState)));\n    });\n    }\n    \n//第一个的参数是一个对象，包括所有路由集合和location\n//第二个参数是一个回调函数，渲染路由组件\n//match是专为异步路由设计的函数\n//match会根据不同的请求，在回掉函数中返回不同的参数：\n*     正确匹配，没有重定向，，前两个参数为null，renderProps包含了匹配的组件和location等信息\n*     有重定向，redirect将包含重定向信息\n*     出现内部错误，err将包含错误信息\n*     404错误下，三个参数均为undefined\n```\n\n\n\n\n\n\n","slug":"2017-04-05-react-router","published":1,"updated":"2020-03-01T12:09:37.510Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckreo13o70007ytt5duj07usa","content":"<h1 id=\"React-Router\"><a href=\"#React-Router\" class=\"headerlink\" title=\"React-Router\"></a>React-Router</h1><p>路由本质就是嵌套的视图组件</p>\n<h3 id=\"browserHistory\"><a href=\"#browserHistory\" class=\"headerlink\" title=\"browserHistory\"></a>browserHistory</h3><p><strong>功能</strong>：监听浏览器地址栏的变化，解析URL并与路由组件进行匹配。还提供了一些方法让你在代码中进行导航。<br>//跳转到某个路径<br><code>browserHistory.push(&#39;./some.path&#39;);</code><br>//回退到先前的地址<br><code>browserHistory.goBack()</code></p>\n<h3 id=\"路由匹配\"><a href=\"#路由匹配\" class=\"headerlink\" title=\"路由匹配\"></a>路由匹配</h3><p>配置路由匹配信息。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span>()=&gt;(</span><br><span class=\"line\">  &lt;Route path=<span class=\"string\">'/'</span> component=&#123;Main&#125;&gt;</span><br><span class=\"line\">    &lt;IndexRoute component=&#123;Home&#125;/&gt;</span><br><span class=\"line\">    &lt;Route path=<span class=\"string\">'counter'</span> component=&#123;Counter&#125;/&gt;</span><br><span class=\"line\"> &lt;<span class=\"regexp\">/Route&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>通过上面的配置，程序知道如何渲染这些URL:</p>\n<table>\n<thead>\n<tr>\n<th>URL</th>\n<th>Components</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>/</td>\n<td>Main-&gt;Home</td>\n</tr>\n<tr>\n<td>/counter</td>\n<td>Main-&gt;Counter</td>\n</tr>\n</tbody></table>\n<p>使用了嵌套路由的概念<br>IndexRoute组件将作为父级Route的默认子路由组件，即为URL为/时显示的组件。</p>\n<h3 id=\"使用Link和IndexLink导航\"><a href=\"#使用Link和IndexLink导航\" class=\"headerlink\" title=\"使用Link和IndexLink导航\"></a>使用Link和IndexLink导航</h3><p>如果使用<Link to='/'>Home</Link>去导航/这个URL。只要进入以/开头的URL时，Link组件都会被激活。<br>common/comtainer/Main.js</p>\n<hr>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React,&#123;PropTypes&#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;Link,IndexLink&#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-router'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Main</span>(<span class=\"params\">props</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">        &lt;div&gt;</span><br><span class=\"line\">          &lt;ul&gt;</span><br><span class=\"line\">            &lt;li&gt;<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">IndexLink</span> <span class=\"attr\">to</span>=<span class=\"string\">'/'</span> <span class=\"attr\">activeStyle</span>=<span class=\"string\">&#123;&#123;color:</span>'<span class=\"attr\">red</span>'&#125;&#125;&gt;</span>Home<span class=\"tag\">&lt;/<span class=\"name\">IndexLink</span>&gt;</span></span>&lt;<span class=\"regexp\">/li&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">            &lt;li&gt;&lt;IndexLink to='/</span>counter<span class=\"string\">' activeStyle=&#123;&#123;color:'</span>red<span class=\"string\">'&#125;&#125;Counter&lt;/li&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;/ul&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &#123;/*this will render the child routes*/&#125;</span></span><br><span class=\"line\"><span class=\"string\">        &#123;React.cloneElement(props.children,props)&#125;</span></span><br><span class=\"line\"><span class=\"string\">       &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">    );</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\"> Main.propTypes =&#123;</span></span><br><span class=\"line\"><span class=\"string\">    children:PropTypes.any.isRequired          </span></span><br><span class=\"line\"><span class=\"string\"> &#125;;</span></span><br><span class=\"line\"><span class=\"string\"> export default Main;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"服务端路由\"><a href=\"#服务端路由\" class=\"headerlink\" title=\"服务端路由\"></a>服务端路由</h3><p>在React-Router中实现服务端路由，需要在Express中间件中加一个用于匹配路由的match函数，并在match的回调中进行渲染就可以。</p>\n<h2 id=\"server-server-js\"><a href=\"#server-server-js\" class=\"headerlink\" title=\"server/server.js\"></a>server/server.js</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">handleRender</span>(<span class=\"params\">req,res</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> initialState =&#123;<span class=\"attr\">counter</span>:<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> store = configureStore(initialState);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> routes =getRoutes();</span><br><span class=\"line\">    </span><br><span class=\"line\">match(&#123;routes,<span class=\"attr\">location</span>:req.url&#125;,(err,redirect,renderProps)=&gt;&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> html = renderToString(</span><br><span class=\"line\">        &lt;Provider store=&#123;store&#125;&gt;</span><br><span class=\"line\">         &lt;RouterContext &#123;...renderProps&#125;/&gt;</span><br><span class=\"line\">        &lt;<span class=\"regexp\">/Provider&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        );</span></span><br><span class=\"line\"><span class=\"regexp\">    const finalState =store.getState();</span></span><br><span class=\"line\"><span class=\"regexp\">    res.send(renderFullPage(html,finalState)));</span></span><br><span class=\"line\"><span class=\"regexp\">    &#125;);</span></span><br><span class=\"line\"><span class=\"regexp\">    &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">    </span></span><br><span class=\"line\"><span class=\"regexp\">/</span><span class=\"regexp\">/第一个的参数是一个对象，包括所有路由集合和location</span></span><br><span class=\"line\"><span class=\"regexp\">/</span><span class=\"regexp\">/第二个参数是一个回调函数，渲染路由组件</span></span><br><span class=\"line\"><span class=\"regexp\">/</span><span class=\"regexp\">/match是专为异步路由设计的函数</span></span><br><span class=\"line\"><span class=\"regexp\">/</span><span class=\"regexp\">/match会根据不同的请求，在回掉函数中返回不同的参数：</span></span><br><span class=\"line\"><span class=\"regexp\">*     正确匹配，没有重定向，，前两个参数为null，renderProps包含了匹配的组件和location等信息</span></span><br><span class=\"line\"><span class=\"regexp\">*     有重定向，redirect将包含重定向信息</span></span><br><span class=\"line\"><span class=\"regexp\">*     出现内部错误，err将包含错误信息</span></span><br><span class=\"line\"><span class=\"regexp\">*     404错误下，三个参数均为undefined</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"React-Router\"><a href=\"#React-Router\" class=\"headerlink\" title=\"React-Router\"></a>React-Router</h1><p>路由本质就是嵌套的视图组件</p>\n<h3 id=\"browserHistory\"><a href=\"#browserHistory\" class=\"headerlink\" title=\"browserHistory\"></a>browserHistory</h3><p><strong>功能</strong>：监听浏览器地址栏的变化，解析URL并与路由组件进行匹配。还提供了一些方法让你在代码中进行导航。<br>//跳转到某个路径<br><code>browserHistory.push(&#39;./some.path&#39;);</code><br>//回退到先前的地址<br><code>browserHistory.goBack()</code></p>\n<h3 id=\"路由匹配\"><a href=\"#路由匹配\" class=\"headerlink\" title=\"路由匹配\"></a>路由匹配</h3><p>配置路由匹配信息。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span>()=&gt;(</span><br><span class=\"line\">  &lt;Route path=<span class=\"string\">'/'</span> component=&#123;Main&#125;&gt;</span><br><span class=\"line\">    &lt;IndexRoute component=&#123;Home&#125;/&gt;</span><br><span class=\"line\">    &lt;Route path=<span class=\"string\">'counter'</span> component=&#123;Counter&#125;/&gt;</span><br><span class=\"line\"> &lt;<span class=\"regexp\">/Route&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>通过上面的配置，程序知道如何渲染这些URL:</p>\n<table>\n<thead>\n<tr>\n<th>URL</th>\n<th>Components</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>/</td>\n<td>Main-&gt;Home</td>\n</tr>\n<tr>\n<td>/counter</td>\n<td>Main-&gt;Counter</td>\n</tr>\n</tbody></table>\n<p>使用了嵌套路由的概念<br>IndexRoute组件将作为父级Route的默认子路由组件，即为URL为/时显示的组件。</p>\n<h3 id=\"使用Link和IndexLink导航\"><a href=\"#使用Link和IndexLink导航\" class=\"headerlink\" title=\"使用Link和IndexLink导航\"></a>使用Link和IndexLink导航</h3><p>如果使用<Link to='/'>Home</Link>去导航/这个URL。只要进入以/开头的URL时，Link组件都会被激活。<br>common/comtainer/Main.js</p>\n<hr>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React,&#123;PropTypes&#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;Link,IndexLink&#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-router'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Main</span>(<span class=\"params\">props</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">        &lt;div&gt;</span><br><span class=\"line\">          &lt;ul&gt;</span><br><span class=\"line\">            &lt;li&gt;<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">IndexLink</span> <span class=\"attr\">to</span>=<span class=\"string\">'/'</span> <span class=\"attr\">activeStyle</span>=<span class=\"string\">&#123;&#123;color:</span>'<span class=\"attr\">red</span>'&#125;&#125;&gt;</span>Home<span class=\"tag\">&lt;/<span class=\"name\">IndexLink</span>&gt;</span></span>&lt;<span class=\"regexp\">/li&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">            &lt;li&gt;&lt;IndexLink to='/</span>counter<span class=\"string\">' activeStyle=&#123;&#123;color:'</span>red<span class=\"string\">'&#125;&#125;Counter&lt;/li&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;/ul&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &#123;/*this will render the child routes*/&#125;</span></span><br><span class=\"line\"><span class=\"string\">        &#123;React.cloneElement(props.children,props)&#125;</span></span><br><span class=\"line\"><span class=\"string\">       &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">    );</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\"> Main.propTypes =&#123;</span></span><br><span class=\"line\"><span class=\"string\">    children:PropTypes.any.isRequired          </span></span><br><span class=\"line\"><span class=\"string\"> &#125;;</span></span><br><span class=\"line\"><span class=\"string\"> export default Main;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"服务端路由\"><a href=\"#服务端路由\" class=\"headerlink\" title=\"服务端路由\"></a>服务端路由</h3><p>在React-Router中实现服务端路由，需要在Express中间件中加一个用于匹配路由的match函数，并在match的回调中进行渲染就可以。</p>\n<h2 id=\"server-server-js\"><a href=\"#server-server-js\" class=\"headerlink\" title=\"server/server.js\"></a>server/server.js</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">handleRender</span>(<span class=\"params\">req,res</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> initialState =&#123;<span class=\"attr\">counter</span>:<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> store = configureStore(initialState);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> routes =getRoutes();</span><br><span class=\"line\">    </span><br><span class=\"line\">match(&#123;routes,<span class=\"attr\">location</span>:req.url&#125;,(err,redirect,renderProps)=&gt;&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> html = renderToString(</span><br><span class=\"line\">        &lt;Provider store=&#123;store&#125;&gt;</span><br><span class=\"line\">         &lt;RouterContext &#123;...renderProps&#125;/&gt;</span><br><span class=\"line\">        &lt;<span class=\"regexp\">/Provider&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        );</span></span><br><span class=\"line\"><span class=\"regexp\">    const finalState =store.getState();</span></span><br><span class=\"line\"><span class=\"regexp\">    res.send(renderFullPage(html,finalState)));</span></span><br><span class=\"line\"><span class=\"regexp\">    &#125;);</span></span><br><span class=\"line\"><span class=\"regexp\">    &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">    </span></span><br><span class=\"line\"><span class=\"regexp\">/</span><span class=\"regexp\">/第一个的参数是一个对象，包括所有路由集合和location</span></span><br><span class=\"line\"><span class=\"regexp\">/</span><span class=\"regexp\">/第二个参数是一个回调函数，渲染路由组件</span></span><br><span class=\"line\"><span class=\"regexp\">/</span><span class=\"regexp\">/match是专为异步路由设计的函数</span></span><br><span class=\"line\"><span class=\"regexp\">/</span><span class=\"regexp\">/match会根据不同的请求，在回掉函数中返回不同的参数：</span></span><br><span class=\"line\"><span class=\"regexp\">*     正确匹配，没有重定向，，前两个参数为null，renderProps包含了匹配的组件和location等信息</span></span><br><span class=\"line\"><span class=\"regexp\">*     有重定向，redirect将包含重定向信息</span></span><br><span class=\"line\"><span class=\"regexp\">*     出现内部错误，err将包含错误信息</span></span><br><span class=\"line\"><span class=\"regexp\">*     404错误下，三个参数均为undefined</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n"},{"title":"服务器渲染与浏览器渲染","date":"2017-04-04T16:00:00.000Z","_content":"\n## 服务器渲染与浏览器渲染的区别\n\n这里的渲染，就是指生成html文档的过程，和浏览器渲染html没有关系。\n\n**浏览器端渲染**，指的是用js去生成html，前端做路由。举例：React, V\bue等等前端框架。适合单页面应用程序。\n\n**服务器端渲染**，指的是用后台语言通过一些模版引擎生成html。举例：PHP文件、JSP文件、Python的Flask配合Jinja引擎、Django框架、Java配合vm模版引擎、NodeJS配合Jade。适合多页面应用。其实现在大部分网站还是这种形式。\n\n所以有为了让单页面应用利于SEO，让服务器和客户端同构，也使用React/Vue渲染的方案。\n\n### 服务器渲染的优点：\n\n1. 服务器端渲染固然耗CPU，但可以使用服务器端缓存的方式解决，并不是每个用户访问都需要重新渲染一遍。而且服务器端渲染甚至可以潜在地增加服务器效率\n2. 服务器端和客户端可以共享某些代码，避免重复定义。这样可以使结构更清晰，增加可维护性\n3. 首次加载页面的速度加快。客户端渲染的一个缺点是，当用户第一次进入站点，此时浏览器中没有缓存，需要下载代码后在本地渲染，时间较长。而服务器渲染则是，用户在下载的已经是渲染好的页面了，打开速度比本地渲染快。\n4. SEO,服务器端渲染可以让搜索引擎更容易读取页面的meta信息以及其他SEO相关信息，大大增加网站在搜索引擎中的可见度。\n\n[Universal渲染](https://zhuanlan.zhihu.com/p/20721015)\n\n\n### 服务器调用\n\n在Node.js中使用require()方法调用各种资源文件。\n默认情况下，在Node.js中只能使用require调用Javascript模块，使用webpack同构工具，可以调用其他文件。\n\n\n\n\n","source":"_posts/2017-04-05-serverside or brower.md","raw":"---\ntitle: 服务器渲染与浏览器渲染\ndate: 2017-04-05\ncategories: \n- FE\ntags:\n- FE\n---\n\n## 服务器渲染与浏览器渲染的区别\n\n这里的渲染，就是指生成html文档的过程，和浏览器渲染html没有关系。\n\n**浏览器端渲染**，指的是用js去生成html，前端做路由。举例：React, V\bue等等前端框架。适合单页面应用程序。\n\n**服务器端渲染**，指的是用后台语言通过一些模版引擎生成html。举例：PHP文件、JSP文件、Python的Flask配合Jinja引擎、Django框架、Java配合vm模版引擎、NodeJS配合Jade。适合多页面应用。其实现在大部分网站还是这种形式。\n\n所以有为了让单页面应用利于SEO，让服务器和客户端同构，也使用React/Vue渲染的方案。\n\n### 服务器渲染的优点：\n\n1. 服务器端渲染固然耗CPU，但可以使用服务器端缓存的方式解决，并不是每个用户访问都需要重新渲染一遍。而且服务器端渲染甚至可以潜在地增加服务器效率\n2. 服务器端和客户端可以共享某些代码，避免重复定义。这样可以使结构更清晰，增加可维护性\n3. 首次加载页面的速度加快。客户端渲染的一个缺点是，当用户第一次进入站点，此时浏览器中没有缓存，需要下载代码后在本地渲染，时间较长。而服务器渲染则是，用户在下载的已经是渲染好的页面了，打开速度比本地渲染快。\n4. SEO,服务器端渲染可以让搜索引擎更容易读取页面的meta信息以及其他SEO相关信息，大大增加网站在搜索引擎中的可见度。\n\n[Universal渲染](https://zhuanlan.zhihu.com/p/20721015)\n\n\n### 服务器调用\n\n在Node.js中使用require()方法调用各种资源文件。\n默认情况下，在Node.js中只能使用require调用Javascript模块，使用webpack同构工具，可以调用其他文件。\n\n\n\n\n","slug":"2017-04-05-serverside or brower","published":1,"updated":"2020-03-01T12:09:37.511Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckreo13o70008ytt5365r52x2","content":"<h2 id=\"服务器渲染与浏览器渲染的区别\"><a href=\"#服务器渲染与浏览器渲染的区别\" class=\"headerlink\" title=\"服务器渲染与浏览器渲染的区别\"></a>服务器渲染与浏览器渲染的区别</h2><p>这里的渲染，就是指生成html文档的过程，和浏览器渲染html没有关系。</p>\n<p><strong>浏览器端渲染</strong>，指的是用js去生成html，前端做路由。举例：React, V\bue等等前端框架。适合单页面应用程序。</p>\n<p><strong>服务器端渲染</strong>，指的是用后台语言通过一些模版引擎生成html。举例：PHP文件、JSP文件、Python的Flask配合Jinja引擎、Django框架、Java配合vm模版引擎、NodeJS配合Jade。适合多页面应用。其实现在大部分网站还是这种形式。</p>\n<p>所以有为了让单页面应用利于SEO，让服务器和客户端同构，也使用React/Vue渲染的方案。</p>\n<h3 id=\"服务器渲染的优点：\"><a href=\"#服务器渲染的优点：\" class=\"headerlink\" title=\"服务器渲染的优点：\"></a>服务器渲染的优点：</h3><ol>\n<li>服务器端渲染固然耗CPU，但可以使用服务器端缓存的方式解决，并不是每个用户访问都需要重新渲染一遍。而且服务器端渲染甚至可以潜在地增加服务器效率</li>\n<li>服务器端和客户端可以共享某些代码，避免重复定义。这样可以使结构更清晰，增加可维护性</li>\n<li>首次加载页面的速度加快。客户端渲染的一个缺点是，当用户第一次进入站点，此时浏览器中没有缓存，需要下载代码后在本地渲染，时间较长。而服务器渲染则是，用户在下载的已经是渲染好的页面了，打开速度比本地渲染快。</li>\n<li>SEO,服务器端渲染可以让搜索引擎更容易读取页面的meta信息以及其他SEO相关信息，大大增加网站在搜索引擎中的可见度。</li>\n</ol>\n<p><a href=\"https://zhuanlan.zhihu.com/p/20721015\" target=\"_blank\" rel=\"noopener\">Universal渲染</a></p>\n<h3 id=\"服务器调用\"><a href=\"#服务器调用\" class=\"headerlink\" title=\"服务器调用\"></a>服务器调用</h3><p>在Node.js中使用require()方法调用各种资源文件。<br>默认情况下，在Node.js中只能使用require调用Javascript模块，使用webpack同构工具，可以调用其他文件。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"服务器渲染与浏览器渲染的区别\"><a href=\"#服务器渲染与浏览器渲染的区别\" class=\"headerlink\" title=\"服务器渲染与浏览器渲染的区别\"></a>服务器渲染与浏览器渲染的区别</h2><p>这里的渲染，就是指生成html文档的过程，和浏览器渲染html没有关系。</p>\n<p><strong>浏览器端渲染</strong>，指的是用js去生成html，前端做路由。举例：React, V\bue等等前端框架。适合单页面应用程序。</p>\n<p><strong>服务器端渲染</strong>，指的是用后台语言通过一些模版引擎生成html。举例：PHP文件、JSP文件、Python的Flask配合Jinja引擎、Django框架、Java配合vm模版引擎、NodeJS配合Jade。适合多页面应用。其实现在大部分网站还是这种形式。</p>\n<p>所以有为了让单页面应用利于SEO，让服务器和客户端同构，也使用React/Vue渲染的方案。</p>\n<h3 id=\"服务器渲染的优点：\"><a href=\"#服务器渲染的优点：\" class=\"headerlink\" title=\"服务器渲染的优点：\"></a>服务器渲染的优点：</h3><ol>\n<li>服务器端渲染固然耗CPU，但可以使用服务器端缓存的方式解决，并不是每个用户访问都需要重新渲染一遍。而且服务器端渲染甚至可以潜在地增加服务器效率</li>\n<li>服务器端和客户端可以共享某些代码，避免重复定义。这样可以使结构更清晰，增加可维护性</li>\n<li>首次加载页面的速度加快。客户端渲染的一个缺点是，当用户第一次进入站点，此时浏览器中没有缓存，需要下载代码后在本地渲染，时间较长。而服务器渲染则是，用户在下载的已经是渲染好的页面了，打开速度比本地渲染快。</li>\n<li>SEO,服务器端渲染可以让搜索引擎更容易读取页面的meta信息以及其他SEO相关信息，大大增加网站在搜索引擎中的可见度。</li>\n</ol>\n<p><a href=\"https://zhuanlan.zhihu.com/p/20721015\" target=\"_blank\" rel=\"noopener\">Universal渲染</a></p>\n<h3 id=\"服务器调用\"><a href=\"#服务器调用\" class=\"headerlink\" title=\"服务器调用\"></a>服务器调用</h3><p>在Node.js中使用require()方法调用各种资源文件。<br>默认情况下，在Node.js中只能使用require调用Javascript模块，使用webpack同构工具，可以调用其他文件。</p>\n"},{"title":"Jquery源码解析","date":"2017-06-30T16:00:00.000Z","_content":"\n\n# jquery源码解析\nps :smile 想把这个写成一个系列解析的文章，督促自己每天学一下 :smile\n\n\n匿名函数没有函数名的函数，不存在外部引用\n\njQuery使用()将匿名函数括起来，然后后面再加一对小括号（包含参数列表），那么这小括号能把我们的表达式组合分块，并且每一块（也就是每一对小括号），都有一个返回值。这个返回值实际上也就是小括号中表达式的返回值。所以，当我们用一对小括号把匿名函数括起来的时候，实际上小括号返回的，就是一个匿名函数的Function对象。因此，小括号对加上匿名函数就如同有名字的函数般被我们取得它的引用位置了。所以如果在这个引用变量后面再加上参数列表，就会实现普通函数的调用形式。\n\n## 加载时立即初始化\n\n```javascript\nif (typeof module === \"object\" && typeof module.exports === \"object\") {\n    module.exports = global.document ?\n        factory(global, true) :\n        function(w) {\n            if (!w.document) {\n                throw new Error(\"jQuery requires a window with a document\");\n            }\n            return factory(w);\n    };\n} else {\n    factory(global);\n}\n```\n\n\n## 变量提升，函数声明可以进行变量提升，函数表达式不能进行变量提升\n三种文档加载方式：\n\n```javascript\n$(document).ready(function() {\n    // ...代码...\n})\n//document ready 简写\n$(function() {\n    // ...代码...\n})\n$(document).load(function() {\n    // ...代码...\n})\n```\n## DOM文档加载步骤\n\n(1) 解析HTML结构。\n(2) 加载外部脚本和样式表文件。\n(3) 解析并执行脚本代码。\n(4) 构造HTML DOM模型。//ready\n(5) 加载图片等外部文件。\n(6) 页面加载完毕。//load\n\nready和load的区别就在于 资源文件的加载\n高级的浏览器，可以用DOMContentLoaded\n\n```javascript\ndocument.attachEvent( \"onreadystatechange\", completed );\nwindow.attachEvent( \"onload\", completed );\nvar top = false;\ntry {\n    top = window.frameElement == null && document.documentElement;\n} catch(e) {}\nif ( top && top.doScroll ) {\n    (function doScrollCheck() {\n        if ( !jQuery.isReady ) {\n            try {\n                top.doScroll(\"left\");\n            } catch(e) {\n                return setTimeout( doScrollCheck, 50 );\n            }\n            detach();\n            jQuery.ready();\n        }\n    })();\n}\n```\n\n原理就是对于 IE 在非 iframe 内时，只有不断地通过能否执行 doScroll 判断 DOM 是否加载完毕。在上述中间隔 50 毫秒尝试去执行 doScroll，注意，由于页面没有加载完成的时候，调用 doScroll 会导致异常，所以使用了 try -catch 来捕获异常。\n结论：所以总的来说当页面 DOM 未加载完成时，调用 doScroll 方法时，会产生异常。那么我们反过来用，如果不异常，那么就是页面DOM加载完毕了。\n\n## jQuery多库共存处理\nnoConflict函数\n$.onConflict()\n\n## 分离构造器\n通过new操作符构建一个对象：\n1. 创建一个新对象\n2. 将构造函数的作用域赋给新对象（this就指向了新对象）\n3. 执行构造函数中的代码\n4. 返回这个新对象\nnew操作符主要把原型链和实例的this关联起来。\n\n```javascript\nvar $$=ajQuery =function(selector){\n    this.selector = selector;\n    return this;\n}\najQuery.fn = ajQuery.prototype = {\n    selectorName:function(){\n        return this.selector;\n    },\n    constructor:ajQuery\n}\nvar a = new $$('aaa');\na.selectorName();\n//另一种\nvar $$ = ajQuery = function(selector){\n     if(!this instanceof ajQuery){\n        return new ajQuery(selector);\n    }\n    this.selector =selector;\n    return this;\n}\n```\n## 方法链式调用的实现\n\n\n","source":"_posts/2017-07-01-jquery源码解析.md","raw":"---\ntitle: Jquery源码解析\ndate: 2017-07-01\ncategories: \n- FE\n- jquery\n- source code analysis\ntags:\n- FE\n- jquery\n---\n\n\n# jquery源码解析\nps :smile 想把这个写成一个系列解析的文章，督促自己每天学一下 :smile\n\n\n匿名函数没有函数名的函数，不存在外部引用\n\njQuery使用()将匿名函数括起来，然后后面再加一对小括号（包含参数列表），那么这小括号能把我们的表达式组合分块，并且每一块（也就是每一对小括号），都有一个返回值。这个返回值实际上也就是小括号中表达式的返回值。所以，当我们用一对小括号把匿名函数括起来的时候，实际上小括号返回的，就是一个匿名函数的Function对象。因此，小括号对加上匿名函数就如同有名字的函数般被我们取得它的引用位置了。所以如果在这个引用变量后面再加上参数列表，就会实现普通函数的调用形式。\n\n## 加载时立即初始化\n\n```javascript\nif (typeof module === \"object\" && typeof module.exports === \"object\") {\n    module.exports = global.document ?\n        factory(global, true) :\n        function(w) {\n            if (!w.document) {\n                throw new Error(\"jQuery requires a window with a document\");\n            }\n            return factory(w);\n    };\n} else {\n    factory(global);\n}\n```\n\n\n## 变量提升，函数声明可以进行变量提升，函数表达式不能进行变量提升\n三种文档加载方式：\n\n```javascript\n$(document).ready(function() {\n    // ...代码...\n})\n//document ready 简写\n$(function() {\n    // ...代码...\n})\n$(document).load(function() {\n    // ...代码...\n})\n```\n## DOM文档加载步骤\n\n(1) 解析HTML结构。\n(2) 加载外部脚本和样式表文件。\n(3) 解析并执行脚本代码。\n(4) 构造HTML DOM模型。//ready\n(5) 加载图片等外部文件。\n(6) 页面加载完毕。//load\n\nready和load的区别就在于 资源文件的加载\n高级的浏览器，可以用DOMContentLoaded\n\n```javascript\ndocument.attachEvent( \"onreadystatechange\", completed );\nwindow.attachEvent( \"onload\", completed );\nvar top = false;\ntry {\n    top = window.frameElement == null && document.documentElement;\n} catch(e) {}\nif ( top && top.doScroll ) {\n    (function doScrollCheck() {\n        if ( !jQuery.isReady ) {\n            try {\n                top.doScroll(\"left\");\n            } catch(e) {\n                return setTimeout( doScrollCheck, 50 );\n            }\n            detach();\n            jQuery.ready();\n        }\n    })();\n}\n```\n\n原理就是对于 IE 在非 iframe 内时，只有不断地通过能否执行 doScroll 判断 DOM 是否加载完毕。在上述中间隔 50 毫秒尝试去执行 doScroll，注意，由于页面没有加载完成的时候，调用 doScroll 会导致异常，所以使用了 try -catch 来捕获异常。\n结论：所以总的来说当页面 DOM 未加载完成时，调用 doScroll 方法时，会产生异常。那么我们反过来用，如果不异常，那么就是页面DOM加载完毕了。\n\n## jQuery多库共存处理\nnoConflict函数\n$.onConflict()\n\n## 分离构造器\n通过new操作符构建一个对象：\n1. 创建一个新对象\n2. 将构造函数的作用域赋给新对象（this就指向了新对象）\n3. 执行构造函数中的代码\n4. 返回这个新对象\nnew操作符主要把原型链和实例的this关联起来。\n\n```javascript\nvar $$=ajQuery =function(selector){\n    this.selector = selector;\n    return this;\n}\najQuery.fn = ajQuery.prototype = {\n    selectorName:function(){\n        return this.selector;\n    },\n    constructor:ajQuery\n}\nvar a = new $$('aaa');\na.selectorName();\n//另一种\nvar $$ = ajQuery = function(selector){\n     if(!this instanceof ajQuery){\n        return new ajQuery(selector);\n    }\n    this.selector =selector;\n    return this;\n}\n```\n## 方法链式调用的实现\n\n\n","slug":"2017-07-01-jquery源码解析","published":1,"updated":"2020-03-01T12:09:37.513Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckreo13o9000bytt57hon86go","content":"<h1 id=\"jquery源码解析\"><a href=\"#jquery源码解析\" class=\"headerlink\" title=\"jquery源码解析\"></a>jquery源码解析</h1><p>ps :smile 想把这个写成一个系列解析的文章，督促自己每天学一下 :smile</p>\n<p>匿名函数没有函数名的函数，不存在外部引用</p>\n<p>jQuery使用()将匿名函数括起来，然后后面再加一对小括号（包含参数列表），那么这小括号能把我们的表达式组合分块，并且每一块（也就是每一对小括号），都有一个返回值。这个返回值实际上也就是小括号中表达式的返回值。所以，当我们用一对小括号把匿名函数括起来的时候，实际上小括号返回的，就是一个匿名函数的Function对象。因此，小括号对加上匿名函数就如同有名字的函数般被我们取得它的引用位置了。所以如果在这个引用变量后面再加上参数列表，就会实现普通函数的调用形式。</p>\n<h2 id=\"加载时立即初始化\"><a href=\"#加载时立即初始化\" class=\"headerlink\" title=\"加载时立即初始化\"></a>加载时立即初始化</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"built_in\">module</span> === <span class=\"string\">\"object\"</span> &amp;&amp; <span class=\"keyword\">typeof</span> <span class=\"built_in\">module</span>.exports === <span class=\"string\">\"object\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">module</span>.exports = global.document ?</span><br><span class=\"line\">        factory(global, <span class=\"literal\">true</span>) :</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">w</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!w.document) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">\"jQuery requires a window with a document\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> factory(w);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    factory(global);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"变量提升，函数声明可以进行变量提升，函数表达式不能进行变量提升\"><a href=\"#变量提升，函数声明可以进行变量提升，函数表达式不能进行变量提升\" class=\"headerlink\" title=\"变量提升，函数声明可以进行变量提升，函数表达式不能进行变量提升\"></a>变量提升，函数声明可以进行变量提升，函数表达式不能进行变量提升</h2><p>三种文档加载方式：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"built_in\">document</span>).ready(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...代码...</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">//document ready 简写</span></span><br><span class=\"line\">$(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...代码...</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">$(<span class=\"built_in\">document</span>).load(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...代码...</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"DOM文档加载步骤\"><a href=\"#DOM文档加载步骤\" class=\"headerlink\" title=\"DOM文档加载步骤\"></a>DOM文档加载步骤</h2><p>(1) 解析HTML结构。<br>(2) 加载外部脚本和样式表文件。<br>(3) 解析并执行脚本代码。<br>(4) 构造HTML DOM模型。//ready<br>(5) 加载图片等外部文件。<br>(6) 页面加载完毕。//load</p>\n<p>ready和load的区别就在于 资源文件的加载<br>高级的浏览器，可以用DOMContentLoaded</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.attachEvent( <span class=\"string\">\"onreadystatechange\"</span>, completed );</span><br><span class=\"line\"><span class=\"built_in\">window</span>.attachEvent( <span class=\"string\">\"onload\"</span>, completed );</span><br><span class=\"line\"><span class=\"keyword\">var</span> top = <span class=\"literal\">false</span>;</span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    top = <span class=\"built_in\">window</span>.frameElement == <span class=\"literal\">null</span> &amp;&amp; <span class=\"built_in\">document</span>.documentElement;</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span>(e) &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> ( top &amp;&amp; top.doScroll ) &#123;</span><br><span class=\"line\">    (<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">doScrollCheck</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ( !jQuery.isReady ) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                top.doScroll(<span class=\"string\">\"left\"</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span>(e) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> setTimeout( doScrollCheck, <span class=\"number\">50</span> );</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            detach();</span><br><span class=\"line\">            jQuery.ready();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>原理就是对于 IE 在非 iframe 内时，只有不断地通过能否执行 doScroll 判断 DOM 是否加载完毕。在上述中间隔 50 毫秒尝试去执行 doScroll，注意，由于页面没有加载完成的时候，调用 doScroll 会导致异常，所以使用了 try -catch 来捕获异常。<br>结论：所以总的来说当页面 DOM 未加载完成时，调用 doScroll 方法时，会产生异常。那么我们反过来用，如果不异常，那么就是页面DOM加载完毕了。</p>\n<h2 id=\"jQuery多库共存处理\"><a href=\"#jQuery多库共存处理\" class=\"headerlink\" title=\"jQuery多库共存处理\"></a>jQuery多库共存处理</h2><p>noConflict函数<br>$.onConflict()</p>\n<h2 id=\"分离构造器\"><a href=\"#分离构造器\" class=\"headerlink\" title=\"分离构造器\"></a>分离构造器</h2><p>通过new操作符构建一个对象：</p>\n<ol>\n<li>创建一个新对象</li>\n<li>将构造函数的作用域赋给新对象（this就指向了新对象）</li>\n<li>执行构造函数中的代码</li>\n<li>返回这个新对象<br>new操作符主要把原型链和实例的this关联起来。</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> $$=ajQuery =<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">selector</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.selector = selector;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">ajQuery.fn = ajQuery.prototype = &#123;</span><br><span class=\"line\">    selectorName:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.selector;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>:ajQuery</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var a = new $$('aaa');</span><br><span class=\"line\">a.selectorName();</span><br><span class=\"line\">//另一种</span><br><span class=\"line\">var $$ = ajQuery = function(selector)&#123;</span><br><span class=\"line\">     <span class=\"keyword\">if</span>(!<span class=\"keyword\">this</span> <span class=\"keyword\">instanceof</span> ajQuery)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ajQuery(selector);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.selector =selector;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"方法链式调用的实现\"><a href=\"#方法链式调用的实现\" class=\"headerlink\" title=\"方法链式调用的实现\"></a>方法链式调用的实现</h2>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"jquery源码解析\"><a href=\"#jquery源码解析\" class=\"headerlink\" title=\"jquery源码解析\"></a>jquery源码解析</h1><p>ps :smile 想把这个写成一个系列解析的文章，督促自己每天学一下 :smile</p>\n<p>匿名函数没有函数名的函数，不存在外部引用</p>\n<p>jQuery使用()将匿名函数括起来，然后后面再加一对小括号（包含参数列表），那么这小括号能把我们的表达式组合分块，并且每一块（也就是每一对小括号），都有一个返回值。这个返回值实际上也就是小括号中表达式的返回值。所以，当我们用一对小括号把匿名函数括起来的时候，实际上小括号返回的，就是一个匿名函数的Function对象。因此，小括号对加上匿名函数就如同有名字的函数般被我们取得它的引用位置了。所以如果在这个引用变量后面再加上参数列表，就会实现普通函数的调用形式。</p>\n<h2 id=\"加载时立即初始化\"><a href=\"#加载时立即初始化\" class=\"headerlink\" title=\"加载时立即初始化\"></a>加载时立即初始化</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"built_in\">module</span> === <span class=\"string\">\"object\"</span> &amp;&amp; <span class=\"keyword\">typeof</span> <span class=\"built_in\">module</span>.exports === <span class=\"string\">\"object\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">module</span>.exports = global.document ?</span><br><span class=\"line\">        factory(global, <span class=\"literal\">true</span>) :</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">w</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!w.document) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">\"jQuery requires a window with a document\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> factory(w);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    factory(global);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"变量提升，函数声明可以进行变量提升，函数表达式不能进行变量提升\"><a href=\"#变量提升，函数声明可以进行变量提升，函数表达式不能进行变量提升\" class=\"headerlink\" title=\"变量提升，函数声明可以进行变量提升，函数表达式不能进行变量提升\"></a>变量提升，函数声明可以进行变量提升，函数表达式不能进行变量提升</h2><p>三种文档加载方式：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"built_in\">document</span>).ready(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...代码...</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">//document ready 简写</span></span><br><span class=\"line\">$(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...代码...</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">$(<span class=\"built_in\">document</span>).load(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...代码...</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"DOM文档加载步骤\"><a href=\"#DOM文档加载步骤\" class=\"headerlink\" title=\"DOM文档加载步骤\"></a>DOM文档加载步骤</h2><p>(1) 解析HTML结构。<br>(2) 加载外部脚本和样式表文件。<br>(3) 解析并执行脚本代码。<br>(4) 构造HTML DOM模型。//ready<br>(5) 加载图片等外部文件。<br>(6) 页面加载完毕。//load</p>\n<p>ready和load的区别就在于 资源文件的加载<br>高级的浏览器，可以用DOMContentLoaded</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.attachEvent( <span class=\"string\">\"onreadystatechange\"</span>, completed );</span><br><span class=\"line\"><span class=\"built_in\">window</span>.attachEvent( <span class=\"string\">\"onload\"</span>, completed );</span><br><span class=\"line\"><span class=\"keyword\">var</span> top = <span class=\"literal\">false</span>;</span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    top = <span class=\"built_in\">window</span>.frameElement == <span class=\"literal\">null</span> &amp;&amp; <span class=\"built_in\">document</span>.documentElement;</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span>(e) &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> ( top &amp;&amp; top.doScroll ) &#123;</span><br><span class=\"line\">    (<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">doScrollCheck</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ( !jQuery.isReady ) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                top.doScroll(<span class=\"string\">\"left\"</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span>(e) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> setTimeout( doScrollCheck, <span class=\"number\">50</span> );</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            detach();</span><br><span class=\"line\">            jQuery.ready();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>原理就是对于 IE 在非 iframe 内时，只有不断地通过能否执行 doScroll 判断 DOM 是否加载完毕。在上述中间隔 50 毫秒尝试去执行 doScroll，注意，由于页面没有加载完成的时候，调用 doScroll 会导致异常，所以使用了 try -catch 来捕获异常。<br>结论：所以总的来说当页面 DOM 未加载完成时，调用 doScroll 方法时，会产生异常。那么我们反过来用，如果不异常，那么就是页面DOM加载完毕了。</p>\n<h2 id=\"jQuery多库共存处理\"><a href=\"#jQuery多库共存处理\" class=\"headerlink\" title=\"jQuery多库共存处理\"></a>jQuery多库共存处理</h2><p>noConflict函数<br>$.onConflict()</p>\n<h2 id=\"分离构造器\"><a href=\"#分离构造器\" class=\"headerlink\" title=\"分离构造器\"></a>分离构造器</h2><p>通过new操作符构建一个对象：</p>\n<ol>\n<li>创建一个新对象</li>\n<li>将构造函数的作用域赋给新对象（this就指向了新对象）</li>\n<li>执行构造函数中的代码</li>\n<li>返回这个新对象<br>new操作符主要把原型链和实例的this关联起来。</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> $$=ajQuery =<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">selector</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.selector = selector;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">ajQuery.fn = ajQuery.prototype = &#123;</span><br><span class=\"line\">    selectorName:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.selector;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>:ajQuery</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var a = new $$('aaa');</span><br><span class=\"line\">a.selectorName();</span><br><span class=\"line\">//另一种</span><br><span class=\"line\">var $$ = ajQuery = function(selector)&#123;</span><br><span class=\"line\">     <span class=\"keyword\">if</span>(!<span class=\"keyword\">this</span> <span class=\"keyword\">instanceof</span> ajQuery)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ajQuery(selector);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.selector =selector;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"方法链式调用的实现\"><a href=\"#方法链式调用的实现\" class=\"headerlink\" title=\"方法链式调用的实现\"></a>方法链式调用的实现</h2>"},{"title":"最大递增子序列","date":"2017-09-21T16:00:00.000Z","_content":"\n### 最大递增子序列问题\n算法原型\n1. 第一种方法：\n时间复杂度O(n^2)\n\n\n2. 第二种方法：\n\n时间复杂度O(nlogn)的算法，（需要额外数组H）\nH(i)代表的意义：\n遍历到当前时刻为止，长度为i+1的最长递增子序列的最小末尾是多少\n找第一个比当前值大的值（二分法）\nn表示以当前数字结尾的最大子序列\n eg. arr=[2,1,6,4,5,2,7,4]\n i=0时，arr[0]=2,H[0]=2;H=[2],有效区=1 n=1\n i=1时，arr[1]=1,2>1,H[0]=1;H=[1],有效区=1 n=1\n i=2时，arr[2]=6,H中没有比6大的值，[1]=6,H=[1,6],有效区=2 n=2\n i=3时，arr[3]=4,6>4,H[1]=4,H=[1,4],有效区=2   n=2\n i=4时，arr[4]=5,H中没有比5大的值，H[2]=5,H=[1,4,5],有效区=3 n=3\ni=5时，arr[5]=2,4>2,H[1]=2,H=[1,2,5] n=2\n i=6时，arr[6]=7,H中没有比7大的值，H[3]=7,H=[1,2,5,7],有效区=4  n=4\n i=7时，arr[7]=4,5>4,H[2]=4,H=[1,2,4,7],有效区=4  n=3\n\n### 沙皇问题\n\n**最大递增子序列对**\n时间复杂度：O(nlogn)\n算法原型同上\n先按照a的值从小到大排序，在a的值相同的情况下，再按照b的值从小到大排序\nH数组中只存储b出现的最小末尾\n\n```javascript\nvar maxEnvelopes = function(envelopes) {\n    if(envelopes.length ===0 ||envelopes.length ===1){\n        return envelopes.length;\n    }\n    var Comparator = function(a,b){\n        if(a[0]<b[0]){\n            return -1;\n        }else if(a[0]>b[0]){\n            return 1;\n        }else{\n            if(a[1]<b[1]){\n                return 1;\n            }else if(a[1]>b[1]){\n                return -1\n            }else{\n                return 0;\n            }\n        }\n    }\n    envelopes.sort(Comparator);\n    var dp=[];\n    var ends=[];\n    dp[0]=envelopes[0][1];\n    ends[0]=envelopes[0][1];\n    var result=0;\n    var l=0;\n    var r=0;\n    var valid=0;\n    var m;\n    for(var i=0;i<envelopes.length;i++){\n        l=0;\n        r=valid;\n        while(l<=r){\n            m=parseInt((l+r)/2);\n            if(envelopes[i][1]>ends[m]){\n                l=m+1;\n            }else{\n                r=m-1;\n            }\n        }\n        valid = Math.max(valid,l);\n        ends[l]=envelopes[i][1];\n        dp[i]=l+1;\n    }\n    for(i in dp){\n        result = Math.max(result,dp[i]);\n    }\n    return result;\n};\n```\n\n\n","source":"_posts/2017-09-22-最大递增子序列.md","raw":"---\ntitle: 最大递增子序列\ndate: 2017-09-22\ncategories: \n- Leetcode\ntags:\n- Leetcode\n- 笔试题\n---\n\n### 最大递增子序列问题\n算法原型\n1. 第一种方法：\n时间复杂度O(n^2)\n\n\n2. 第二种方法：\n\n时间复杂度O(nlogn)的算法，（需要额外数组H）\nH(i)代表的意义：\n遍历到当前时刻为止，长度为i+1的最长递增子序列的最小末尾是多少\n找第一个比当前值大的值（二分法）\nn表示以当前数字结尾的最大子序列\n eg. arr=[2,1,6,4,5,2,7,4]\n i=0时，arr[0]=2,H[0]=2;H=[2],有效区=1 n=1\n i=1时，arr[1]=1,2>1,H[0]=1;H=[1],有效区=1 n=1\n i=2时，arr[2]=6,H中没有比6大的值，[1]=6,H=[1,6],有效区=2 n=2\n i=3时，arr[3]=4,6>4,H[1]=4,H=[1,4],有效区=2   n=2\n i=4时，arr[4]=5,H中没有比5大的值，H[2]=5,H=[1,4,5],有效区=3 n=3\ni=5时，arr[5]=2,4>2,H[1]=2,H=[1,2,5] n=2\n i=6时，arr[6]=7,H中没有比7大的值，H[3]=7,H=[1,2,5,7],有效区=4  n=4\n i=7时，arr[7]=4,5>4,H[2]=4,H=[1,2,4,7],有效区=4  n=3\n\n### 沙皇问题\n\n**最大递增子序列对**\n时间复杂度：O(nlogn)\n算法原型同上\n先按照a的值从小到大排序，在a的值相同的情况下，再按照b的值从小到大排序\nH数组中只存储b出现的最小末尾\n\n```javascript\nvar maxEnvelopes = function(envelopes) {\n    if(envelopes.length ===0 ||envelopes.length ===1){\n        return envelopes.length;\n    }\n    var Comparator = function(a,b){\n        if(a[0]<b[0]){\n            return -1;\n        }else if(a[0]>b[0]){\n            return 1;\n        }else{\n            if(a[1]<b[1]){\n                return 1;\n            }else if(a[1]>b[1]){\n                return -1\n            }else{\n                return 0;\n            }\n        }\n    }\n    envelopes.sort(Comparator);\n    var dp=[];\n    var ends=[];\n    dp[0]=envelopes[0][1];\n    ends[0]=envelopes[0][1];\n    var result=0;\n    var l=0;\n    var r=0;\n    var valid=0;\n    var m;\n    for(var i=0;i<envelopes.length;i++){\n        l=0;\n        r=valid;\n        while(l<=r){\n            m=parseInt((l+r)/2);\n            if(envelopes[i][1]>ends[m]){\n                l=m+1;\n            }else{\n                r=m-1;\n            }\n        }\n        valid = Math.max(valid,l);\n        ends[l]=envelopes[i][1];\n        dp[i]=l+1;\n    }\n    for(i in dp){\n        result = Math.max(result,dp[i]);\n    }\n    return result;\n};\n```\n\n\n","slug":"2017-09-22-最大递增子序列","published":1,"updated":"2020-03-01T12:09:37.515Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckreo13o9000cytt5b403ax9t","content":"<h3 id=\"最大递增子序列问题\"><a href=\"#最大递增子序列问题\" class=\"headerlink\" title=\"最大递增子序列问题\"></a>最大递增子序列问题</h3><p>算法原型</p>\n<ol>\n<li>第一种方法：<br>时间复杂度O(n^2)</li>\n</ol>\n<ol start=\"2\">\n<li>第二种方法：</li>\n</ol>\n<p>时间复杂度O(nlogn)的算法，（需要额外数组H）<br>H(i)代表的意义：<br>遍历到当前时刻为止，长度为i+1的最长递增子序列的最小末尾是多少<br>找第一个比当前值大的值（二分法）<br>n表示以当前数字结尾的最大子序列<br> eg. arr=[2,1,6,4,5,2,7,4]<br> i=0时，arr[0]=2,H[0]=2;H=[2],有效区=1 n=1<br> i=1时，arr[1]=1,2&gt;1,H[0]=1;H=[1],有效区=1 n=1<br> i=2时，arr[2]=6,H中没有比6大的值，[1]=6,H=[1,6],有效区=2 n=2<br> i=3时，arr[3]=4,6&gt;4,H[1]=4,H=[1,4],有效区=2   n=2<br> i=4时，arr[4]=5,H中没有比5大的值，H[2]=5,H=[1,4,5],有效区=3 n=3<br>i=5时，arr[5]=2,4&gt;2,H[1]=2,H=[1,2,5] n=2<br> i=6时，arr[6]=7,H中没有比7大的值，H[3]=7,H=[1,2,5,7],有效区=4  n=4<br> i=7时，arr[7]=4,5&gt;4,H[2]=4,H=[1,2,4,7],有效区=4  n=3</p>\n<h3 id=\"沙皇问题\"><a href=\"#沙皇问题\" class=\"headerlink\" title=\"沙皇问题\"></a>沙皇问题</h3><p><strong>最大递增子序列对</strong><br>时间复杂度：O(nlogn)<br>算法原型同上<br>先按照a的值从小到大排序，在a的值相同的情况下，再按照b的值从小到大排序<br>H数组中只存储b出现的最小末尾</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> maxEnvelopes = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">envelopes</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(envelopes.length ===<span class=\"number\">0</span> ||envelopes.length ===<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> envelopes.length;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> Comparator = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a,b</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(a[<span class=\"number\">0</span>]&lt;b[<span class=\"number\">0</span>])&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(a[<span class=\"number\">0</span>]&gt;b[<span class=\"number\">0</span>])&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(a[<span class=\"number\">1</span>]&lt;b[<span class=\"number\">1</span>])&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(a[<span class=\"number\">1</span>]&gt;b[<span class=\"number\">1</span>])&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">-1</span></span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    envelopes.sort(Comparator);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> dp=[];</span><br><span class=\"line\">    <span class=\"keyword\">var</span> ends=[];</span><br><span class=\"line\">    dp[<span class=\"number\">0</span>]=envelopes[<span class=\"number\">0</span>][<span class=\"number\">1</span>];</span><br><span class=\"line\">    ends[<span class=\"number\">0</span>]=envelopes[<span class=\"number\">0</span>][<span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"keyword\">var</span> result=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> l=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> r=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> valid=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> m;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;envelopes.length;i++)&#123;</span><br><span class=\"line\">        l=<span class=\"number\">0</span>;</span><br><span class=\"line\">        r=valid;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(l&lt;=r)&#123;</span><br><span class=\"line\">            m=<span class=\"built_in\">parseInt</span>((l+r)/<span class=\"number\">2</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(envelopes[i][<span class=\"number\">1</span>]&gt;ends[m])&#123;</span><br><span class=\"line\">                l=m+<span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                r=m<span class=\"number\">-1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        valid = <span class=\"built_in\">Math</span>.max(valid,l);</span><br><span class=\"line\">        ends[l]=envelopes[i][<span class=\"number\">1</span>];</span><br><span class=\"line\">        dp[i]=l+<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i <span class=\"keyword\">in</span> dp)&#123;</span><br><span class=\"line\">        result = <span class=\"built_in\">Math</span>.max(result,dp[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"最大递增子序列问题\"><a href=\"#最大递增子序列问题\" class=\"headerlink\" title=\"最大递增子序列问题\"></a>最大递增子序列问题</h3><p>算法原型</p>\n<ol>\n<li>第一种方法：<br>时间复杂度O(n^2)</li>\n</ol>\n<ol start=\"2\">\n<li>第二种方法：</li>\n</ol>\n<p>时间复杂度O(nlogn)的算法，（需要额外数组H）<br>H(i)代表的意义：<br>遍历到当前时刻为止，长度为i+1的最长递增子序列的最小末尾是多少<br>找第一个比当前值大的值（二分法）<br>n表示以当前数字结尾的最大子序列<br> eg. arr=[2,1,6,4,5,2,7,4]<br> i=0时，arr[0]=2,H[0]=2;H=[2],有效区=1 n=1<br> i=1时，arr[1]=1,2&gt;1,H[0]=1;H=[1],有效区=1 n=1<br> i=2时，arr[2]=6,H中没有比6大的值，[1]=6,H=[1,6],有效区=2 n=2<br> i=3时，arr[3]=4,6&gt;4,H[1]=4,H=[1,4],有效区=2   n=2<br> i=4时，arr[4]=5,H中没有比5大的值，H[2]=5,H=[1,4,5],有效区=3 n=3<br>i=5时，arr[5]=2,4&gt;2,H[1]=2,H=[1,2,5] n=2<br> i=6时，arr[6]=7,H中没有比7大的值，H[3]=7,H=[1,2,5,7],有效区=4  n=4<br> i=7时，arr[7]=4,5&gt;4,H[2]=4,H=[1,2,4,7],有效区=4  n=3</p>\n<h3 id=\"沙皇问题\"><a href=\"#沙皇问题\" class=\"headerlink\" title=\"沙皇问题\"></a>沙皇问题</h3><p><strong>最大递增子序列对</strong><br>时间复杂度：O(nlogn)<br>算法原型同上<br>先按照a的值从小到大排序，在a的值相同的情况下，再按照b的值从小到大排序<br>H数组中只存储b出现的最小末尾</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> maxEnvelopes = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">envelopes</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(envelopes.length ===<span class=\"number\">0</span> ||envelopes.length ===<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> envelopes.length;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> Comparator = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a,b</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(a[<span class=\"number\">0</span>]&lt;b[<span class=\"number\">0</span>])&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(a[<span class=\"number\">0</span>]&gt;b[<span class=\"number\">0</span>])&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(a[<span class=\"number\">1</span>]&lt;b[<span class=\"number\">1</span>])&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(a[<span class=\"number\">1</span>]&gt;b[<span class=\"number\">1</span>])&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">-1</span></span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    envelopes.sort(Comparator);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> dp=[];</span><br><span class=\"line\">    <span class=\"keyword\">var</span> ends=[];</span><br><span class=\"line\">    dp[<span class=\"number\">0</span>]=envelopes[<span class=\"number\">0</span>][<span class=\"number\">1</span>];</span><br><span class=\"line\">    ends[<span class=\"number\">0</span>]=envelopes[<span class=\"number\">0</span>][<span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"keyword\">var</span> result=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> l=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> r=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> valid=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> m;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;envelopes.length;i++)&#123;</span><br><span class=\"line\">        l=<span class=\"number\">0</span>;</span><br><span class=\"line\">        r=valid;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(l&lt;=r)&#123;</span><br><span class=\"line\">            m=<span class=\"built_in\">parseInt</span>((l+r)/<span class=\"number\">2</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(envelopes[i][<span class=\"number\">1</span>]&gt;ends[m])&#123;</span><br><span class=\"line\">                l=m+<span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                r=m<span class=\"number\">-1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        valid = <span class=\"built_in\">Math</span>.max(valid,l);</span><br><span class=\"line\">        ends[l]=envelopes[i][<span class=\"number\">1</span>];</span><br><span class=\"line\">        dp[i]=l+<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i <span class=\"keyword\">in</span> dp)&#123;</span><br><span class=\"line\">        result = <span class=\"built_in\">Math</span>.max(result,dp[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n\n"},{"title":"遍历二叉树","date":"2017-12-18T16:00:00.000Z","_content":"\n# 通过两种遍历构造二叉树\n\n\n## 前序遍历 + 中序遍历\n\n### 分析\n\n前序遍历的第一个节点一定是根结点，然后在中序遍历中查找此根结点，根结点左侧就是左子树，根结点右侧就是右子树，然后递归构造左右子树。\n\n### js代码如下\n\n```javascript\nvar buildTree = function(preorder, inorder) {\n    if(preorder.length == 0){\n        return null;\n    }\n    var val = preorder[0];\n    var root = new TreeNode(val);    \n    var i =0;\n    while(inorder[i]!=val){\n        i++;\n    }\n    root.left = buildTree(preorder.slice(1,i+1),inorder.slice(0,i));\n    root.right = buildTree(preorder.slice(i+1,preorder.length),inorder.slice(i+1,inorder.length));\n    return root;\n};\n```\n## 后续遍历 + 中序遍历\n\n### 分析\n\n同上，区别就是后序遍历最后一个节点是根结点\n\n### js代码如下\n\n```javascript\nvar buildTree = function(inorder, postorder) {\n    if(inorder.length ==0){\n        return null;\n    }\n    var val = postorder[postorder.length-1];\n    var root = new TreeNode(val);\n    var i=0;\n    while(inorder[i]!=val){\n        i++;\n    }\n    root.left = buildTree(inorder.slice(0,i),postorder.slice(0,i))\n    root.right = buildTree(inorder.slice(i+1,inorder.length),postorder.slice(i,postorder.length-1));\n    return root;\n};\n```\n\n\n\n","source":"_posts/2017-12-19-通过遍历构造二叉树总结.md","raw":"---\ntitle: 遍历二叉树\ndate: 2017-12-19\ncategories: \n- Leetcode\ntags:\n- Leetcode\n- 笔试题\n---\n\n# 通过两种遍历构造二叉树\n\n\n## 前序遍历 + 中序遍历\n\n### 分析\n\n前序遍历的第一个节点一定是根结点，然后在中序遍历中查找此根结点，根结点左侧就是左子树，根结点右侧就是右子树，然后递归构造左右子树。\n\n### js代码如下\n\n```javascript\nvar buildTree = function(preorder, inorder) {\n    if(preorder.length == 0){\n        return null;\n    }\n    var val = preorder[0];\n    var root = new TreeNode(val);    \n    var i =0;\n    while(inorder[i]!=val){\n        i++;\n    }\n    root.left = buildTree(preorder.slice(1,i+1),inorder.slice(0,i));\n    root.right = buildTree(preorder.slice(i+1,preorder.length),inorder.slice(i+1,inorder.length));\n    return root;\n};\n```\n## 后续遍历 + 中序遍历\n\n### 分析\n\n同上，区别就是后序遍历最后一个节点是根结点\n\n### js代码如下\n\n```javascript\nvar buildTree = function(inorder, postorder) {\n    if(inorder.length ==0){\n        return null;\n    }\n    var val = postorder[postorder.length-1];\n    var root = new TreeNode(val);\n    var i=0;\n    while(inorder[i]!=val){\n        i++;\n    }\n    root.left = buildTree(inorder.slice(0,i),postorder.slice(0,i))\n    root.right = buildTree(inorder.slice(i+1,inorder.length),postorder.slice(i,postorder.length-1));\n    return root;\n};\n```\n\n\n\n","slug":"2017-12-19-通过遍历构造二叉树总结","published":1,"updated":"2020-03-01T12:09:37.516Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckreo13ob000gytt5gq2m4das","content":"<h1 id=\"通过两种遍历构造二叉树\"><a href=\"#通过两种遍历构造二叉树\" class=\"headerlink\" title=\"通过两种遍历构造二叉树\"></a>通过两种遍历构造二叉树</h1><h2 id=\"前序遍历-中序遍历\"><a href=\"#前序遍历-中序遍历\" class=\"headerlink\" title=\"前序遍历 + 中序遍历\"></a>前序遍历 + 中序遍历</h2><h3 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h3><p>前序遍历的第一个节点一定是根结点，然后在中序遍历中查找此根结点，根结点左侧就是左子树，根结点右侧就是右子树，然后递归构造左右子树。</p>\n<h3 id=\"js代码如下\"><a href=\"#js代码如下\" class=\"headerlink\" title=\"js代码如下\"></a>js代码如下</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> buildTree = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">preorder, inorder</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(preorder.length == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> val = preorder[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">var</span> root = <span class=\"keyword\">new</span> TreeNode(val);    </span><br><span class=\"line\">    <span class=\"keyword\">var</span> i =<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(inorder[i]!=val)&#123;</span><br><span class=\"line\">        i++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    root.left = buildTree(preorder.slice(<span class=\"number\">1</span>,i+<span class=\"number\">1</span>),inorder.slice(<span class=\"number\">0</span>,i));</span><br><span class=\"line\">    root.right = buildTree(preorder.slice(i+<span class=\"number\">1</span>,preorder.length),inorder.slice(i+<span class=\"number\">1</span>,inorder.length));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"后续遍历-中序遍历\"><a href=\"#后续遍历-中序遍历\" class=\"headerlink\" title=\"后续遍历 + 中序遍历\"></a>后续遍历 + 中序遍历</h2><h3 id=\"分析-1\"><a href=\"#分析-1\" class=\"headerlink\" title=\"分析\"></a>分析</h3><p>同上，区别就是后序遍历最后一个节点是根结点</p>\n<h3 id=\"js代码如下-1\"><a href=\"#js代码如下-1\" class=\"headerlink\" title=\"js代码如下\"></a>js代码如下</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> buildTree = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">inorder, postorder</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(inorder.length ==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> val = postorder[postorder.length<span class=\"number\">-1</span>];</span><br><span class=\"line\">    <span class=\"keyword\">var</span> root = <span class=\"keyword\">new</span> TreeNode(val);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(inorder[i]!=val)&#123;</span><br><span class=\"line\">        i++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    root.left = buildTree(inorder.slice(<span class=\"number\">0</span>,i),postorder.slice(<span class=\"number\">0</span>,i))</span><br><span class=\"line\">    root.right = buildTree(inorder.slice(i+<span class=\"number\">1</span>,inorder.length),postorder.slice(i,postorder.length<span class=\"number\">-1</span>));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"通过两种遍历构造二叉树\"><a href=\"#通过两种遍历构造二叉树\" class=\"headerlink\" title=\"通过两种遍历构造二叉树\"></a>通过两种遍历构造二叉树</h1><h2 id=\"前序遍历-中序遍历\"><a href=\"#前序遍历-中序遍历\" class=\"headerlink\" title=\"前序遍历 + 中序遍历\"></a>前序遍历 + 中序遍历</h2><h3 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h3><p>前序遍历的第一个节点一定是根结点，然后在中序遍历中查找此根结点，根结点左侧就是左子树，根结点右侧就是右子树，然后递归构造左右子树。</p>\n<h3 id=\"js代码如下\"><a href=\"#js代码如下\" class=\"headerlink\" title=\"js代码如下\"></a>js代码如下</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> buildTree = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">preorder, inorder</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(preorder.length == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> val = preorder[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">var</span> root = <span class=\"keyword\">new</span> TreeNode(val);    </span><br><span class=\"line\">    <span class=\"keyword\">var</span> i =<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(inorder[i]!=val)&#123;</span><br><span class=\"line\">        i++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    root.left = buildTree(preorder.slice(<span class=\"number\">1</span>,i+<span class=\"number\">1</span>),inorder.slice(<span class=\"number\">0</span>,i));</span><br><span class=\"line\">    root.right = buildTree(preorder.slice(i+<span class=\"number\">1</span>,preorder.length),inorder.slice(i+<span class=\"number\">1</span>,inorder.length));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"后续遍历-中序遍历\"><a href=\"#后续遍历-中序遍历\" class=\"headerlink\" title=\"后续遍历 + 中序遍历\"></a>后续遍历 + 中序遍历</h2><h3 id=\"分析-1\"><a href=\"#分析-1\" class=\"headerlink\" title=\"分析\"></a>分析</h3><p>同上，区别就是后序遍历最后一个节点是根结点</p>\n<h3 id=\"js代码如下-1\"><a href=\"#js代码如下-1\" class=\"headerlink\" title=\"js代码如下\"></a>js代码如下</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> buildTree = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">inorder, postorder</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(inorder.length ==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> val = postorder[postorder.length<span class=\"number\">-1</span>];</span><br><span class=\"line\">    <span class=\"keyword\">var</span> root = <span class=\"keyword\">new</span> TreeNode(val);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(inorder[i]!=val)&#123;</span><br><span class=\"line\">        i++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    root.left = buildTree(inorder.slice(<span class=\"number\">0</span>,i),postorder.slice(<span class=\"number\">0</span>,i))</span><br><span class=\"line\">    root.right = buildTree(inorder.slice(i+<span class=\"number\">1</span>,inorder.length),postorder.slice(i,postorder.length<span class=\"number\">-1</span>));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n\n\n"},{"title":"leetcode 380","date":"2017-09-19T16:00:00.000Z","_content":"\n# Leetcode 380\n> Design a data structure that supports all following operations in average O(1) \n> time.\n1. insert(val): Inserts an item val to the set if not already present.\n2. remove(val): Removes an item val from the set if present.\n3. getRandom: Returns a random element from current set of elements. Each element must have the same probability of being returned.\n\nExample:\n\n```javascript\n// Init an empty set.\nRandomizedSet randomSet = new RandomizedSet();\n\n// Inserts 1 to the set. Returns true as 1 was inserted successfully.\nrandomSet.insert(1);\n\n// Returns false as 2 does not exist in the set.\nrandomSet.remove(2);\n\n// Inserts 2 to the set, returns true. Set now contains [1,2].\nrandomSet.insert(2);\n\n// getRandom should return either 1 or 2 randomly.\nrandomSet.getRandom();\n\n// Removes 1 from the set, returns true. Set now contains [2].\nrandomSet.remove(1);\n\n// 2 was already in the set, so return false.\nrandomSet.insert(2);\n\n// Since 2 is the only number in the set, getRandom always return 2.\nrandomSet.getRandom();\n```\n## 解题思路\n**哈希表 + 数组（HashMap + Array）**\n\n此题的正确解法是利用到了一个一维数组和一个哈希表，其中数组用来保存数字，哈希表用来建立每个数字和其在数组中的位置之间的映射，对于插入操作，我们先看这个数字是否已经在哈希表中存在，如果存在的话直接返回false，不存在的话，我们将其插入到数组的末尾，然后建立数字和其位置的映射。删除操作是比较tricky的，我们还是要先判断其是否在哈希表里，如果没有，直接返回false。由于哈希表的删除是常数时间的，而数组并不是，为了使数组删除也能常数级，我们实际上将要删除的数字和数组的最后一个数字调换个位置，然后修改对应的哈希表中的值，这样我们只需要删除数组的最后一个元素即可，保证了常数时间内的删除。而返回随机数对于数组来说就很简单了，我们只要随机生成一个位置，返回该位置上的数字即可\n\n","source":"_posts/2017-09-20-leetcode380.md","raw":"---\ntitle: leetcode 380\ndate: 2017-09-20\ncategories: \n- Leetcode\ntags:\n- Leetcode\n- 笔试题\n---\n\n# Leetcode 380\n> Design a data structure that supports all following operations in average O(1) \n> time.\n1. insert(val): Inserts an item val to the set if not already present.\n2. remove(val): Removes an item val from the set if present.\n3. getRandom: Returns a random element from current set of elements. Each element must have the same probability of being returned.\n\nExample:\n\n```javascript\n// Init an empty set.\nRandomizedSet randomSet = new RandomizedSet();\n\n// Inserts 1 to the set. Returns true as 1 was inserted successfully.\nrandomSet.insert(1);\n\n// Returns false as 2 does not exist in the set.\nrandomSet.remove(2);\n\n// Inserts 2 to the set, returns true. Set now contains [1,2].\nrandomSet.insert(2);\n\n// getRandom should return either 1 or 2 randomly.\nrandomSet.getRandom();\n\n// Removes 1 from the set, returns true. Set now contains [2].\nrandomSet.remove(1);\n\n// 2 was already in the set, so return false.\nrandomSet.insert(2);\n\n// Since 2 is the only number in the set, getRandom always return 2.\nrandomSet.getRandom();\n```\n## 解题思路\n**哈希表 + 数组（HashMap + Array）**\n\n此题的正确解法是利用到了一个一维数组和一个哈希表，其中数组用来保存数字，哈希表用来建立每个数字和其在数组中的位置之间的映射，对于插入操作，我们先看这个数字是否已经在哈希表中存在，如果存在的话直接返回false，不存在的话，我们将其插入到数组的末尾，然后建立数字和其位置的映射。删除操作是比较tricky的，我们还是要先判断其是否在哈希表里，如果没有，直接返回false。由于哈希表的删除是常数时间的，而数组并不是，为了使数组删除也能常数级，我们实际上将要删除的数字和数组的最后一个数字调换个位置，然后修改对应的哈希表中的值，这样我们只需要删除数组的最后一个元素即可，保证了常数时间内的删除。而返回随机数对于数组来说就很简单了，我们只要随机生成一个位置，返回该位置上的数字即可\n\n","slug":"2017-09-20-leetcode380","published":1,"updated":"2020-03-01T12:09:37.515Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckreo13ob000iytt5dnfz4xhv","content":"<h1 id=\"Leetcode-380\"><a href=\"#Leetcode-380\" class=\"headerlink\" title=\"Leetcode 380\"></a>Leetcode 380</h1><blockquote>\n<p>Design a data structure that supports all following operations in average O(1)<br>time.</p>\n</blockquote>\n<ol>\n<li>insert(val): Inserts an item val to the set if not already present.</li>\n<li>remove(val): Removes an item val from the set if present.</li>\n<li>getRandom: Returns a random element from current set of elements. Each element must have the same probability of being returned.</li>\n</ol>\n<p>Example:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Init an empty set.</span></span><br><span class=\"line\">RandomizedSet randomSet = <span class=\"keyword\">new</span> RandomizedSet();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Inserts 1 to the set. Returns true as 1 was inserted successfully.</span></span><br><span class=\"line\">randomSet.insert(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Returns false as 2 does not exist in the set.</span></span><br><span class=\"line\">randomSet.remove(<span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Inserts 2 to the set, returns true. Set now contains [1,2].</span></span><br><span class=\"line\">randomSet.insert(<span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// getRandom should return either 1 or 2 randomly.</span></span><br><span class=\"line\">randomSet.getRandom();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Removes 1 from the set, returns true. Set now contains [2].</span></span><br><span class=\"line\">randomSet.remove(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2 was already in the set, so return false.</span></span><br><span class=\"line\">randomSet.insert(<span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Since 2 is the only number in the set, getRandom always return 2.</span></span><br><span class=\"line\">randomSet.getRandom();</span><br></pre></td></tr></table></figure>\n<h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p><strong>哈希表 + 数组（HashMap + Array）</strong></p>\n<p>此题的正确解法是利用到了一个一维数组和一个哈希表，其中数组用来保存数字，哈希表用来建立每个数字和其在数组中的位置之间的映射，对于插入操作，我们先看这个数字是否已经在哈希表中存在，如果存在的话直接返回false，不存在的话，我们将其插入到数组的末尾，然后建立数字和其位置的映射。删除操作是比较tricky的，我们还是要先判断其是否在哈希表里，如果没有，直接返回false。由于哈希表的删除是常数时间的，而数组并不是，为了使数组删除也能常数级，我们实际上将要删除的数字和数组的最后一个数字调换个位置，然后修改对应的哈希表中的值，这样我们只需要删除数组的最后一个元素即可，保证了常数时间内的删除。而返回随机数对于数组来说就很简单了，我们只要随机生成一个位置，返回该位置上的数字即可</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Leetcode-380\"><a href=\"#Leetcode-380\" class=\"headerlink\" title=\"Leetcode 380\"></a>Leetcode 380</h1><blockquote>\n<p>Design a data structure that supports all following operations in average O(1)<br>time.</p>\n</blockquote>\n<ol>\n<li>insert(val): Inserts an item val to the set if not already present.</li>\n<li>remove(val): Removes an item val from the set if present.</li>\n<li>getRandom: Returns a random element from current set of elements. Each element must have the same probability of being returned.</li>\n</ol>\n<p>Example:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Init an empty set.</span></span><br><span class=\"line\">RandomizedSet randomSet = <span class=\"keyword\">new</span> RandomizedSet();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Inserts 1 to the set. Returns true as 1 was inserted successfully.</span></span><br><span class=\"line\">randomSet.insert(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Returns false as 2 does not exist in the set.</span></span><br><span class=\"line\">randomSet.remove(<span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Inserts 2 to the set, returns true. Set now contains [1,2].</span></span><br><span class=\"line\">randomSet.insert(<span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// getRandom should return either 1 or 2 randomly.</span></span><br><span class=\"line\">randomSet.getRandom();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Removes 1 from the set, returns true. Set now contains [2].</span></span><br><span class=\"line\">randomSet.remove(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2 was already in the set, so return false.</span></span><br><span class=\"line\">randomSet.insert(<span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Since 2 is the only number in the set, getRandom always return 2.</span></span><br><span class=\"line\">randomSet.getRandom();</span><br></pre></td></tr></table></figure>\n<h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p><strong>哈希表 + 数组（HashMap + Array）</strong></p>\n<p>此题的正确解法是利用到了一个一维数组和一个哈希表，其中数组用来保存数字，哈希表用来建立每个数字和其在数组中的位置之间的映射，对于插入操作，我们先看这个数字是否已经在哈希表中存在，如果存在的话直接返回false，不存在的话，我们将其插入到数组的末尾，然后建立数字和其位置的映射。删除操作是比较tricky的，我们还是要先判断其是否在哈希表里，如果没有，直接返回false。由于哈希表的删除是常数时间的，而数组并不是，为了使数组删除也能常数级，我们实际上将要删除的数字和数组的最后一个数字调换个位置，然后修改对应的哈希表中的值，这样我们只需要删除数组的最后一个元素即可，保证了常数时间内的删除。而返回随机数对于数组来说就很简单了，我们只要随机生成一个位置，返回该位置上的数字即可</p>\n"},{"title":"排序算法","date":"2017-12-28T16:00:00.000Z","_content":"\n元旦放假前的最后一天啦\n\n还是要好好学习的啦~~\n\n# 选择排序\n\n## 特点：\n1. 运行时间和输入无关 与初始状态无关\n2. 数据移动是最少的\n3. 不稳定排序（举个例子：序列5 8 5 2 9， 我们知道第一趟选择第1个元素5会与2进行交换，那么原序列中两个5的相对先后顺序也就被破坏了。）\n\n\n\n```javascript\n//选择排序\nvar selectSort  = function(arr){\n  for(var i=0;i<arr.length;i++){\n    var min_Index = i;\n    for(var j=i+1;j<arr.length;j++){\n      min_Index = arr[min_Index] <arr[j]?min_Index:j;\n    }\n    console.log(min_Index);\n    if(min_Index != i ){\n      swap(arr,i,min_Index);\n    }\n  }\n  return arr;\n}\nvar swap = function(arr,i,j){\n  var tmp = arr[i];\n  arr[i] = arr[j];\n  arr[j] = tmp;\n}\n```\n\n# 插入排序\n\n1. 时间取决于输入中元素的初始排序\n2. 在有序数组中效率最高 O(n)\n3. 稳定排序\n\n```javascript\n//插入排序\nvar insertSort  = function(){\n  for(var i=0;i<arr.length;i++){\n    var item = arr[i];\n    for(var j=i-1;j>=0;j--){\n      if(arr[j]>item){\n        arr[j+1] = arr[j]; \n      }else{\n        break;\n      }\n    }\n    arr[j+1] = item;\n  }\n  return arr;\n}\n```\n\n# 希尔排序\n\n1. 插入排序的变形，将数组先转化成h有序的数组\n2. 不稳定排序\n\n```javascript\n//希尔排序\nvar swap = function(arr,i,j){\n  var tmp = arr[i];\n  arr[i] = arr[j];\n  arr[j] = tmp;\n}\nvar xierSort = function(arr){\n  var h =1;\n  var n = arr.length;\n  while(h < n/3){\n    h =h*3+1;\n  }\n  while(h>=1){\n    for(var i=h;i<n;i++){\n      for(var j=i;j>=h;j-=h){\n        if(arr[j] < arr[j-h]){\n          swap(arr,j,j-h);\n        }\n      }\n    }\n    h = parseInt(h/3);\n  }\n  return arr;\n}\n```\n# 归并排序\n\n1. 稳定排序\n\n\n```javascript\n//归并排序\n\nvar guibinSort = function(arr){\n  sort(arr,0,arr.length-1);\n  return arr;\n}\nvar sort = function(arr,low,high){\n  if(high <=low){\n    return;\n  }\n  var mid = parseInt((low+high)/2);\n  sort(arr,0,mid);\n  sort(arr,mid+1,high);\n  merge(arr,low,mid,high);\n  console.log(arr)\n}\nvar merge = function(arr,low,mid,high){\n  var aux = arr.slice();\n  var i= low,j= mid+1;\n  for(var k=low;k<=high;k++){\n    if(i>mid){\n      arr[k] = aux[j++];\n    }else if(j>high){\n      arr[k] = aux[i++];\n    }else if(aux[j]<aux[i]){\n      arr[k] = aux[j++];\n    }else{\n      arr[k] = aux[i++];\n    }\n  }\n}\n```\n# 快速排序\n\n1. 这是平均查找效率很高的排序\n2. 不稳定排序\n（比如序列为 5 3 3 4 3 8 9 10 11 \n现在中枢元素5和3(第5个元素，下标从1开始计)交换就会把元素3的稳定性打乱。\n所以快速排序是一个不稳定的排序算法，不稳定发生在中枢元素和a[j]交换的时刻。)\n\n```javascript\n//快速排序\n\nvar quickSort = function(arr){\n  sort(arr,0,arr.length-1);\n  return arr;\n}\nvar sort = function(arr,low,high){\n   if(high <=low){\n    return;\n  }\n  var j = partition(arr,low,high);\n  sort(arr,low,j-1);\n  sort(arr,j+1,high);\n}\nvar partition = function(arr,low,high){\n  var pivot = arr[low];\n  var i=low\n  var j=high+1;\n  while(true){\n    while(arr[++i] <pivot){\n      if(i==high){\n        break;\n      }\n    }\n    while(pivot <arr[--j]){\n      if(j==low){\n        break;\n      }\n    }\n    if(i>=j){\n      break;\n    }\n    swap(arr,i,j);\n  }\n  swap(arr,low,j);\n  return j;\n}\nvar swap = function(arr,i,j){\n  var tmp = arr[i];\n  arr[i] = arr[j];\n  arr[j] = tmp;\n}\n```","source":"_posts/2017-12-29-sort.md","raw":"---\ntitle: 排序算法\ndate: 2017-12-29\ncategories: \n- Algorithm\ntags:\n- sort\n---\n\n元旦放假前的最后一天啦\n\n还是要好好学习的啦~~\n\n# 选择排序\n\n## 特点：\n1. 运行时间和输入无关 与初始状态无关\n2. 数据移动是最少的\n3. 不稳定排序（举个例子：序列5 8 5 2 9， 我们知道第一趟选择第1个元素5会与2进行交换，那么原序列中两个5的相对先后顺序也就被破坏了。）\n\n\n\n```javascript\n//选择排序\nvar selectSort  = function(arr){\n  for(var i=0;i<arr.length;i++){\n    var min_Index = i;\n    for(var j=i+1;j<arr.length;j++){\n      min_Index = arr[min_Index] <arr[j]?min_Index:j;\n    }\n    console.log(min_Index);\n    if(min_Index != i ){\n      swap(arr,i,min_Index);\n    }\n  }\n  return arr;\n}\nvar swap = function(arr,i,j){\n  var tmp = arr[i];\n  arr[i] = arr[j];\n  arr[j] = tmp;\n}\n```\n\n# 插入排序\n\n1. 时间取决于输入中元素的初始排序\n2. 在有序数组中效率最高 O(n)\n3. 稳定排序\n\n```javascript\n//插入排序\nvar insertSort  = function(){\n  for(var i=0;i<arr.length;i++){\n    var item = arr[i];\n    for(var j=i-1;j>=0;j--){\n      if(arr[j]>item){\n        arr[j+1] = arr[j]; \n      }else{\n        break;\n      }\n    }\n    arr[j+1] = item;\n  }\n  return arr;\n}\n```\n\n# 希尔排序\n\n1. 插入排序的变形，将数组先转化成h有序的数组\n2. 不稳定排序\n\n```javascript\n//希尔排序\nvar swap = function(arr,i,j){\n  var tmp = arr[i];\n  arr[i] = arr[j];\n  arr[j] = tmp;\n}\nvar xierSort = function(arr){\n  var h =1;\n  var n = arr.length;\n  while(h < n/3){\n    h =h*3+1;\n  }\n  while(h>=1){\n    for(var i=h;i<n;i++){\n      for(var j=i;j>=h;j-=h){\n        if(arr[j] < arr[j-h]){\n          swap(arr,j,j-h);\n        }\n      }\n    }\n    h = parseInt(h/3);\n  }\n  return arr;\n}\n```\n# 归并排序\n\n1. 稳定排序\n\n\n```javascript\n//归并排序\n\nvar guibinSort = function(arr){\n  sort(arr,0,arr.length-1);\n  return arr;\n}\nvar sort = function(arr,low,high){\n  if(high <=low){\n    return;\n  }\n  var mid = parseInt((low+high)/2);\n  sort(arr,0,mid);\n  sort(arr,mid+1,high);\n  merge(arr,low,mid,high);\n  console.log(arr)\n}\nvar merge = function(arr,low,mid,high){\n  var aux = arr.slice();\n  var i= low,j= mid+1;\n  for(var k=low;k<=high;k++){\n    if(i>mid){\n      arr[k] = aux[j++];\n    }else if(j>high){\n      arr[k] = aux[i++];\n    }else if(aux[j]<aux[i]){\n      arr[k] = aux[j++];\n    }else{\n      arr[k] = aux[i++];\n    }\n  }\n}\n```\n# 快速排序\n\n1. 这是平均查找效率很高的排序\n2. 不稳定排序\n（比如序列为 5 3 3 4 3 8 9 10 11 \n现在中枢元素5和3(第5个元素，下标从1开始计)交换就会把元素3的稳定性打乱。\n所以快速排序是一个不稳定的排序算法，不稳定发生在中枢元素和a[j]交换的时刻。)\n\n```javascript\n//快速排序\n\nvar quickSort = function(arr){\n  sort(arr,0,arr.length-1);\n  return arr;\n}\nvar sort = function(arr,low,high){\n   if(high <=low){\n    return;\n  }\n  var j = partition(arr,low,high);\n  sort(arr,low,j-1);\n  sort(arr,j+1,high);\n}\nvar partition = function(arr,low,high){\n  var pivot = arr[low];\n  var i=low\n  var j=high+1;\n  while(true){\n    while(arr[++i] <pivot){\n      if(i==high){\n        break;\n      }\n    }\n    while(pivot <arr[--j]){\n      if(j==low){\n        break;\n      }\n    }\n    if(i>=j){\n      break;\n    }\n    swap(arr,i,j);\n  }\n  swap(arr,low,j);\n  return j;\n}\nvar swap = function(arr,i,j){\n  var tmp = arr[i];\n  arr[i] = arr[j];\n  arr[j] = tmp;\n}\n```","slug":"2017-12-29-sort","published":1,"updated":"2020-03-01T12:09:37.518Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckreo13od000nytt56m1v0vd9","content":"<p>元旦放假前的最后一天啦</p>\n<p>还是要好好学习的啦~~</p>\n<h1 id=\"选择排序\"><a href=\"#选择排序\" class=\"headerlink\" title=\"选择排序\"></a>选择排序</h1><h2 id=\"特点：\"><a href=\"#特点：\" class=\"headerlink\" title=\"特点：\"></a>特点：</h2><ol>\n<li>运行时间和输入无关 与初始状态无关</li>\n<li>数据移动是最少的</li>\n<li>不稳定排序（举个例子：序列5 8 5 2 9， 我们知道第一趟选择第1个元素5会与2进行交换，那么原序列中两个5的相对先后顺序也就被破坏了。）</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//选择排序</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> selectSort  = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">arr</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> min_Index = i;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> j=i+<span class=\"number\">1</span>;j&lt;arr.length;j++)&#123;</span><br><span class=\"line\">      min_Index = arr[min_Index] &lt;arr[j]?min_Index:j;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(min_Index);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(min_Index != i )&#123;</span><br><span class=\"line\">      swap(arr,i,min_Index);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> swap = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">arr,i,j</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> tmp = arr[i];</span><br><span class=\"line\">  arr[i] = arr[j];</span><br><span class=\"line\">  arr[j] = tmp;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"插入排序\"><a href=\"#插入排序\" class=\"headerlink\" title=\"插入排序\"></a>插入排序</h1><ol>\n<li>时间取决于输入中元素的初始排序</li>\n<li>在有序数组中效率最高 O(n)</li>\n<li>稳定排序</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//插入排序</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> insertSort  = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> item = arr[i];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> j=i<span class=\"number\">-1</span>;j&gt;=<span class=\"number\">0</span>;j--)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(arr[j]&gt;item)&#123;</span><br><span class=\"line\">        arr[j+<span class=\"number\">1</span>] = arr[j]; </span><br><span class=\"line\">      &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    arr[j+<span class=\"number\">1</span>] = item;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"希尔排序\"><a href=\"#希尔排序\" class=\"headerlink\" title=\"希尔排序\"></a>希尔排序</h1><ol>\n<li>插入排序的变形，将数组先转化成h有序的数组</li>\n<li>不稳定排序</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//希尔排序</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> swap = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">arr,i,j</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> tmp = arr[i];</span><br><span class=\"line\">  arr[i] = arr[j];</span><br><span class=\"line\">  arr[j] = tmp;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> xierSort = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">arr</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> h =<span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> n = arr.length;</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(h &lt; n/<span class=\"number\">3</span>)&#123;</span><br><span class=\"line\">    h =h*<span class=\"number\">3</span>+<span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(h&gt;=<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=h;i&lt;n;i++)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> j=i;j&gt;=h;j-=h)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(arr[j] &lt; arr[j-h])&#123;</span><br><span class=\"line\">          swap(arr,j,j-h);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    h = <span class=\"built_in\">parseInt</span>(h/<span class=\"number\">3</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"归并排序\"><a href=\"#归并排序\" class=\"headerlink\" title=\"归并排序\"></a>归并排序</h1><ol>\n<li>稳定排序</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//归并排序</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> guibinSort = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">arr</span>)</span>&#123;</span><br><span class=\"line\">  sort(arr,<span class=\"number\">0</span>,arr.length<span class=\"number\">-1</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> sort = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">arr,low,high</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(high &lt;=low)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> mid = <span class=\"built_in\">parseInt</span>((low+high)/<span class=\"number\">2</span>);</span><br><span class=\"line\">  sort(arr,<span class=\"number\">0</span>,mid);</span><br><span class=\"line\">  sort(arr,mid+<span class=\"number\">1</span>,high);</span><br><span class=\"line\">  merge(arr,low,mid,high);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(arr)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> merge = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">arr,low,mid,high</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> aux = arr.slice();</span><br><span class=\"line\">  <span class=\"keyword\">var</span> i= low,j= mid+<span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> k=low;k&lt;=high;k++)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(i&gt;mid)&#123;</span><br><span class=\"line\">      arr[k] = aux[j++];</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(j&gt;high)&#123;</span><br><span class=\"line\">      arr[k] = aux[i++];</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(aux[j]&lt;aux[i])&#123;</span><br><span class=\"line\">      arr[k] = aux[j++];</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">      arr[k] = aux[i++];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"快速排序\"><a href=\"#快速排序\" class=\"headerlink\" title=\"快速排序\"></a>快速排序</h1><ol>\n<li>这是平均查找效率很高的排序</li>\n<li>不稳定排序<br>（比如序列为 5 3 3 4 3 8 9 10 11<br>现在中枢元素5和3(第5个元素，下标从1开始计)交换就会把元素3的稳定性打乱。<br>所以快速排序是一个不稳定的排序算法，不稳定发生在中枢元素和a[j]交换的时刻。)</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//快速排序</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> quickSort = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">arr</span>)</span>&#123;</span><br><span class=\"line\">  sort(arr,<span class=\"number\">0</span>,arr.length<span class=\"number\">-1</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> sort = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">arr,low,high</span>)</span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">if</span>(high &lt;=low)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> j = partition(arr,low,high);</span><br><span class=\"line\">  sort(arr,low,j<span class=\"number\">-1</span>);</span><br><span class=\"line\">  sort(arr,j+<span class=\"number\">1</span>,high);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> partition = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">arr,low,high</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> pivot = arr[low];</span><br><span class=\"line\">  <span class=\"keyword\">var</span> i=low</span><br><span class=\"line\">  <span class=\"keyword\">var</span> j=high+<span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(<span class=\"literal\">true</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(arr[++i] &lt;pivot)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(i==high)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(pivot &lt;arr[--j])&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(j==low)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(i&gt;=j)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    swap(arr,i,j);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  swap(arr,low,j);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> j;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> swap = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">arr,i,j</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> tmp = arr[i];</span><br><span class=\"line\">  arr[i] = arr[j];</span><br><span class=\"line\">  arr[j] = tmp;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>元旦放假前的最后一天啦</p>\n<p>还是要好好学习的啦~~</p>\n<h1 id=\"选择排序\"><a href=\"#选择排序\" class=\"headerlink\" title=\"选择排序\"></a>选择排序</h1><h2 id=\"特点：\"><a href=\"#特点：\" class=\"headerlink\" title=\"特点：\"></a>特点：</h2><ol>\n<li>运行时间和输入无关 与初始状态无关</li>\n<li>数据移动是最少的</li>\n<li>不稳定排序（举个例子：序列5 8 5 2 9， 我们知道第一趟选择第1个元素5会与2进行交换，那么原序列中两个5的相对先后顺序也就被破坏了。）</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//选择排序</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> selectSort  = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">arr</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> min_Index = i;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> j=i+<span class=\"number\">1</span>;j&lt;arr.length;j++)&#123;</span><br><span class=\"line\">      min_Index = arr[min_Index] &lt;arr[j]?min_Index:j;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(min_Index);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(min_Index != i )&#123;</span><br><span class=\"line\">      swap(arr,i,min_Index);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> swap = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">arr,i,j</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> tmp = arr[i];</span><br><span class=\"line\">  arr[i] = arr[j];</span><br><span class=\"line\">  arr[j] = tmp;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"插入排序\"><a href=\"#插入排序\" class=\"headerlink\" title=\"插入排序\"></a>插入排序</h1><ol>\n<li>时间取决于输入中元素的初始排序</li>\n<li>在有序数组中效率最高 O(n)</li>\n<li>稳定排序</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//插入排序</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> insertSort  = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> item = arr[i];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> j=i<span class=\"number\">-1</span>;j&gt;=<span class=\"number\">0</span>;j--)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(arr[j]&gt;item)&#123;</span><br><span class=\"line\">        arr[j+<span class=\"number\">1</span>] = arr[j]; </span><br><span class=\"line\">      &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    arr[j+<span class=\"number\">1</span>] = item;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"希尔排序\"><a href=\"#希尔排序\" class=\"headerlink\" title=\"希尔排序\"></a>希尔排序</h1><ol>\n<li>插入排序的变形，将数组先转化成h有序的数组</li>\n<li>不稳定排序</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//希尔排序</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> swap = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">arr,i,j</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> tmp = arr[i];</span><br><span class=\"line\">  arr[i] = arr[j];</span><br><span class=\"line\">  arr[j] = tmp;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> xierSort = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">arr</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> h =<span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> n = arr.length;</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(h &lt; n/<span class=\"number\">3</span>)&#123;</span><br><span class=\"line\">    h =h*<span class=\"number\">3</span>+<span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(h&gt;=<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=h;i&lt;n;i++)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> j=i;j&gt;=h;j-=h)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(arr[j] &lt; arr[j-h])&#123;</span><br><span class=\"line\">          swap(arr,j,j-h);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    h = <span class=\"built_in\">parseInt</span>(h/<span class=\"number\">3</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"归并排序\"><a href=\"#归并排序\" class=\"headerlink\" title=\"归并排序\"></a>归并排序</h1><ol>\n<li>稳定排序</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//归并排序</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> guibinSort = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">arr</span>)</span>&#123;</span><br><span class=\"line\">  sort(arr,<span class=\"number\">0</span>,arr.length<span class=\"number\">-1</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> sort = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">arr,low,high</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(high &lt;=low)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> mid = <span class=\"built_in\">parseInt</span>((low+high)/<span class=\"number\">2</span>);</span><br><span class=\"line\">  sort(arr,<span class=\"number\">0</span>,mid);</span><br><span class=\"line\">  sort(arr,mid+<span class=\"number\">1</span>,high);</span><br><span class=\"line\">  merge(arr,low,mid,high);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(arr)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> merge = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">arr,low,mid,high</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> aux = arr.slice();</span><br><span class=\"line\">  <span class=\"keyword\">var</span> i= low,j= mid+<span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> k=low;k&lt;=high;k++)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(i&gt;mid)&#123;</span><br><span class=\"line\">      arr[k] = aux[j++];</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(j&gt;high)&#123;</span><br><span class=\"line\">      arr[k] = aux[i++];</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(aux[j]&lt;aux[i])&#123;</span><br><span class=\"line\">      arr[k] = aux[j++];</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">      arr[k] = aux[i++];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"快速排序\"><a href=\"#快速排序\" class=\"headerlink\" title=\"快速排序\"></a>快速排序</h1><ol>\n<li>这是平均查找效率很高的排序</li>\n<li>不稳定排序<br>（比如序列为 5 3 3 4 3 8 9 10 11<br>现在中枢元素5和3(第5个元素，下标从1开始计)交换就会把元素3的稳定性打乱。<br>所以快速排序是一个不稳定的排序算法，不稳定发生在中枢元素和a[j]交换的时刻。)</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//快速排序</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> quickSort = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">arr</span>)</span>&#123;</span><br><span class=\"line\">  sort(arr,<span class=\"number\">0</span>,arr.length<span class=\"number\">-1</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> sort = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">arr,low,high</span>)</span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">if</span>(high &lt;=low)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> j = partition(arr,low,high);</span><br><span class=\"line\">  sort(arr,low,j<span class=\"number\">-1</span>);</span><br><span class=\"line\">  sort(arr,j+<span class=\"number\">1</span>,high);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> partition = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">arr,low,high</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> pivot = arr[low];</span><br><span class=\"line\">  <span class=\"keyword\">var</span> i=low</span><br><span class=\"line\">  <span class=\"keyword\">var</span> j=high+<span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(<span class=\"literal\">true</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(arr[++i] &lt;pivot)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(i==high)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(pivot &lt;arr[--j])&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(j==low)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(i&gt;=j)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    swap(arr,i,j);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  swap(arr,low,j);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> j;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> swap = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">arr,i,j</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> tmp = arr[i];</span><br><span class=\"line\">  arr[i] = arr[j];</span><br><span class=\"line\">  arr[j] = tmp;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"CSS各种框和元素","date":"2017-12-24T16:00:00.000Z","_content":"\n# CSS视觉格式化模型\n\nCSS视觉格式化模型：用来处理文档并将它显示在视觉媒体上的机制。\n\n视觉格式化模型 根据CSS盒模型为文档的每个元素生成0，1或多个框。这些框的布局取决于框的尺寸，类型，定位方式（正常流，浮动和绝对定位），元素之间的关系盒外部信息（视口大小，置换元素固有尺寸等）\n\ncontaining block（包含块）：\n一个元素，它的框的尺寸盒位置会相对于一个特定的矩形框边缘来计算而得到，这个特定的矩形框称之为该元素的 `包含块`\n\nblock-level element（块级元素）：视觉上会被格式化为块状的元素\n`display`属性\b：`block`,`list-item`,`table`,`flex`,`grid`都可以将元素转化为块级元素。\n\nblock element （块元素）: `display`属性为`block`的元素。\n\n\n行内级元素\n\n`display`属性是 `inline`,`inline-table`,`inline-block`,`inline-flex`,`inline-grid`\n\n\n\n# 置换元素\n\n内容不受*CSS视觉格式化模型*控制，CSS渲染模型并不考虑对此内容的渲染，且元素本身一般拥有固定尺寸（宽度、高度、宽高比）的元素，被称之为置换元素。\n\n浏览器根据元素的标签和属性，来决定元素的具体显示内容。\n\n如 img、input ,textarea, select\n\n\n\n\n\n\n","source":"_posts/2017-12-25-css置换元素和非置换元素.md","raw":"---\ntitle: CSS各种框和元素\ndate: 2017-12-25\ncategories: \n- FE\ntags:\n- FE\n- css\n---\n\n# CSS视觉格式化模型\n\nCSS视觉格式化模型：用来处理文档并将它显示在视觉媒体上的机制。\n\n视觉格式化模型 根据CSS盒模型为文档的每个元素生成0，1或多个框。这些框的布局取决于框的尺寸，类型，定位方式（正常流，浮动和绝对定位），元素之间的关系盒外部信息（视口大小，置换元素固有尺寸等）\n\ncontaining block（包含块）：\n一个元素，它的框的尺寸盒位置会相对于一个特定的矩形框边缘来计算而得到，这个特定的矩形框称之为该元素的 `包含块`\n\nblock-level element（块级元素）：视觉上会被格式化为块状的元素\n`display`属性\b：`block`,`list-item`,`table`,`flex`,`grid`都可以将元素转化为块级元素。\n\nblock element （块元素）: `display`属性为`block`的元素。\n\n\n行内级元素\n\n`display`属性是 `inline`,`inline-table`,`inline-block`,`inline-flex`,`inline-grid`\n\n\n\n# 置换元素\n\n内容不受*CSS视觉格式化模型*控制，CSS渲染模型并不考虑对此内容的渲染，且元素本身一般拥有固定尺寸（宽度、高度、宽高比）的元素，被称之为置换元素。\n\n浏览器根据元素的标签和属性，来决定元素的具体显示内容。\n\n如 img、input ,textarea, select\n\n\n\n\n\n\n","slug":"2017-12-25-css置换元素和非置换元素","published":1,"updated":"2020-03-01T12:09:37.517Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckreo13of000qytt5777zf1rq","content":"<h1 id=\"CSS视觉格式化模型\"><a href=\"#CSS视觉格式化模型\" class=\"headerlink\" title=\"CSS视觉格式化模型\"></a>CSS视觉格式化模型</h1><p>CSS视觉格式化模型：用来处理文档并将它显示在视觉媒体上的机制。</p>\n<p>视觉格式化模型 根据CSS盒模型为文档的每个元素生成0，1或多个框。这些框的布局取决于框的尺寸，类型，定位方式（正常流，浮动和绝对定位），元素之间的关系盒外部信息（视口大小，置换元素固有尺寸等）</p>\n<p>containing block（包含块）：<br>一个元素，它的框的尺寸盒位置会相对于一个特定的矩形框边缘来计算而得到，这个特定的矩形框称之为该元素的 <code>包含块</code></p>\n<p>block-level element（块级元素）：视觉上会被格式化为块状的元素<br><code>display</code>属性\b：<code>block</code>,<code>list-item</code>,<code>table</code>,<code>flex</code>,<code>grid</code>都可以将元素转化为块级元素。</p>\n<p>block element （块元素）: <code>display</code>属性为<code>block</code>的元素。</p>\n<p>行内级元素</p>\n<p><code>display</code>属性是 <code>inline</code>,<code>inline-table</code>,<code>inline-block</code>,<code>inline-flex</code>,<code>inline-grid</code></p>\n<h1 id=\"置换元素\"><a href=\"#置换元素\" class=\"headerlink\" title=\"置换元素\"></a>置换元素</h1><p>内容不受<em>CSS视觉格式化模型</em>控制，CSS渲染模型并不考虑对此内容的渲染，且元素本身一般拥有固定尺寸（宽度、高度、宽高比）的元素，被称之为置换元素。</p>\n<p>浏览器根据元素的标签和属性，来决定元素的具体显示内容。</p>\n<p>如 img、input ,textarea, select</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"CSS视觉格式化模型\"><a href=\"#CSS视觉格式化模型\" class=\"headerlink\" title=\"CSS视觉格式化模型\"></a>CSS视觉格式化模型</h1><p>CSS视觉格式化模型：用来处理文档并将它显示在视觉媒体上的机制。</p>\n<p>视觉格式化模型 根据CSS盒模型为文档的每个元素生成0，1或多个框。这些框的布局取决于框的尺寸，类型，定位方式（正常流，浮动和绝对定位），元素之间的关系盒外部信息（视口大小，置换元素固有尺寸等）</p>\n<p>containing block（包含块）：<br>一个元素，它的框的尺寸盒位置会相对于一个特定的矩形框边缘来计算而得到，这个特定的矩形框称之为该元素的 <code>包含块</code></p>\n<p>block-level element（块级元素）：视觉上会被格式化为块状的元素<br><code>display</code>属性\b：<code>block</code>,<code>list-item</code>,<code>table</code>,<code>flex</code>,<code>grid</code>都可以将元素转化为块级元素。</p>\n<p>block element （块元素）: <code>display</code>属性为<code>block</code>的元素。</p>\n<p>行内级元素</p>\n<p><code>display</code>属性是 <code>inline</code>,<code>inline-table</code>,<code>inline-block</code>,<code>inline-flex</code>,<code>inline-grid</code></p>\n<h1 id=\"置换元素\"><a href=\"#置换元素\" class=\"headerlink\" title=\"置换元素\"></a>置换元素</h1><p>内容不受<em>CSS视觉格式化模型</em>控制，CSS渲染模型并不考虑对此内容的渲染，且元素本身一般拥有固定尺寸（宽度、高度、宽高比）的元素，被称之为置换元素。</p>\n<p>浏览器根据元素的标签和属性，来决定元素的具体显示内容。</p>\n<p>如 img、input ,textarea, select</p>\n"},{"title":"Array问题","date":"2017-12-19T16:00:00.000Z","_content":"# Array对象常用方法\n\n一道简单的数据操作题 ---居然错了🤪，主要就是对js操作数组方法返回值没有完全掌握\n\n## 原题如下：\n\n将数组var a = [1,2,3]变成[4,3,2,1]的正确方式\n\nA. a.reverse().unshift()\n\nB. a.push(4).reverse()\nßß\nC. a.push(4);a.reverse()\n\nD. a.splice(3,1,4).reverse()\n\n\n## 既然错了就顺便总结下Array操作方法\n\n1. 不改变原数组\n\nconcat() : 连接两个或多个数组\n返回被连接数组的一个副本\n\njoin() :返回字符串\n\nslice() : 返回一个新数组\n\ntoString() : 返回字符串\n\n2. 改变原数组\n\npush() : 返回新数组长度\n\npop() : 返回被删除的元素\n\nreverse() : 返回逆序数组\n\nshift() : 返回第一个元素值\n\nsort() : 返回排序后的数组\n\nsplice() : 返回被删除的元素\n\nunshift() : 返回新数组长度\n\n\b\n","source":"_posts/2017-12-20-数组操作总结.md","raw":"---\ntitle: Array问题\ndate: 2017-12-20\ncategories: \n- FE\ntags:\n- FE\n- js\n---\n# Array对象常用方法\n\n一道简单的数据操作题 ---居然错了🤪，主要就是对js操作数组方法返回值没有完全掌握\n\n## 原题如下：\n\n将数组var a = [1,2,3]变成[4,3,2,1]的正确方式\n\nA. a.reverse().unshift()\n\nB. a.push(4).reverse()\nßß\nC. a.push(4);a.reverse()\n\nD. a.splice(3,1,4).reverse()\n\n\n## 既然错了就顺便总结下Array操作方法\n\n1. 不改变原数组\n\nconcat() : 连接两个或多个数组\n返回被连接数组的一个副本\n\njoin() :返回字符串\n\nslice() : 返回一个新数组\n\ntoString() : 返回字符串\n\n2. 改变原数组\n\npush() : 返回新数组长度\n\npop() : 返回被删除的元素\n\nreverse() : 返回逆序数组\n\nshift() : 返回第一个元素值\n\nsort() : 返回排序后的数组\n\nsplice() : 返回被删除的元素\n\nunshift() : 返回新数组长度\n\n\b\n","slug":"2017-12-20-数组操作总结","published":1,"updated":"2020-03-01T12:09:37.516Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckreo13og000vytt5g0r20cp7","content":"<h1 id=\"Array对象常用方法\"><a href=\"#Array对象常用方法\" class=\"headerlink\" title=\"Array对象常用方法\"></a>Array对象常用方法</h1><p>一道简单的数据操作题 —居然错了🤪，主要就是对js操作数组方法返回值没有完全掌握</p>\n<h2 id=\"原题如下：\"><a href=\"#原题如下：\" class=\"headerlink\" title=\"原题如下：\"></a>原题如下：</h2><p>将数组var a = [1,2,3]变成[4,3,2,1]的正确方式</p>\n<p>A. a.reverse().unshift()</p>\n<p>B. a.push(4).reverse()<br>ßß<br>C. a.push(4);a.reverse()</p>\n<p>D. a.splice(3,1,4).reverse()</p>\n<h2 id=\"既然错了就顺便总结下Array操作方法\"><a href=\"#既然错了就顺便总结下Array操作方法\" class=\"headerlink\" title=\"既然错了就顺便总结下Array操作方法\"></a>既然错了就顺便总结下Array操作方法</h2><ol>\n<li>不改变原数组</li>\n</ol>\n<p>concat() : 连接两个或多个数组<br>返回被连接数组的一个副本</p>\n<p>join() :返回字符串</p>\n<p>slice() : 返回一个新数组</p>\n<p>toString() : 返回字符串</p>\n<ol start=\"2\">\n<li>改变原数组</li>\n</ol>\n<p>push() : 返回新数组长度</p>\n<p>pop() : 返回被删除的元素</p>\n<p>reverse() : 返回逆序数组</p>\n<p>shift() : 返回第一个元素值</p>\n<p>sort() : 返回排序后的数组</p>\n<p>splice() : 返回被删除的元素</p>\n<p>unshift() : 返回新数组长度</p>\n<p>\b</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Array对象常用方法\"><a href=\"#Array对象常用方法\" class=\"headerlink\" title=\"Array对象常用方法\"></a>Array对象常用方法</h1><p>一道简单的数据操作题 —居然错了🤪，主要就是对js操作数组方法返回值没有完全掌握</p>\n<h2 id=\"原题如下：\"><a href=\"#原题如下：\" class=\"headerlink\" title=\"原题如下：\"></a>原题如下：</h2><p>将数组var a = [1,2,3]变成[4,3,2,1]的正确方式</p>\n<p>A. a.reverse().unshift()</p>\n<p>B. a.push(4).reverse()<br>ßß<br>C. a.push(4);a.reverse()</p>\n<p>D. a.splice(3,1,4).reverse()</p>\n<h2 id=\"既然错了就顺便总结下Array操作方法\"><a href=\"#既然错了就顺便总结下Array操作方法\" class=\"headerlink\" title=\"既然错了就顺便总结下Array操作方法\"></a>既然错了就顺便总结下Array操作方法</h2><ol>\n<li>不改变原数组</li>\n</ol>\n<p>concat() : 连接两个或多个数组<br>返回被连接数组的一个副本</p>\n<p>join() :返回字符串</p>\n<p>slice() : 返回一个新数组</p>\n<p>toString() : 返回字符串</p>\n<ol start=\"2\">\n<li>改变原数组</li>\n</ol>\n<p>push() : 返回新数组长度</p>\n<p>pop() : 返回被删除的元素</p>\n<p>reverse() : 返回逆序数组</p>\n<p>shift() : 返回第一个元素值</p>\n<p>sort() : 返回排序后的数组</p>\n<p>splice() : 返回被删除的元素</p>\n<p>unshift() : 返回新数组长度</p>\n<p>\b</p>\n"},{"title":"二分查找总结","date":"2018-01-03T16:00:00.000Z","_content":"\n\n# 二分查找总结\n\n## 二分查找主要解决的问题\n\n一堆数中找出指定的数\n\n##  条件\n\n 数组、有序 （数据结构不能用链表）\n\n\n## 用二分法精确查找\n```javascript\nvar binarySearch = function(arr,low,high,target){\n    var mid = parseInt((low+high)/2);\n    while(low < high){\n        if(arr[mid] < target){\n            low = mid+1;\n        }else if(arr[mid] > target){\n            high = mid-1;\n        }else{\n            return mid;\n        }\n        mid = parseInt((low+high)/2);\n    }\n    return -1;\n}\n```\n## 用二分法界限查找\n\n### 严格界限查找\n\n在有序数组中找到\n1. 第一个大于target的值\n2. 最后一个小于target的值\n\n```javascript\nvar binarySearchUpperBound = function(arr,low,high,target){\n    if(low >high || target >=arr[high]){\n        return -1;\n    }\n    var mid = parseInt((low+high)/2);\n    while(high >low){\n        if(arr[mid] > target){\n            high = mid;  //arr[mid]也有可能是结果\n        }else{\n            low = mid+1;\n        }\n        mid = parseInt((low+high)/2);\n    }\n    return mid;\n}\n\n\nvar binarySearchLowerBound =function(arr,low,high,target){\n    if(low >high || target >=arr[high]){\n        return -1;\n    }\n    var mid = parseInt((low+high+1)/2);\n    while(high >low){\n        if(arr[mid] < target){\n            low = mid;\n        }else{\n            high = mid-1;\n        }\n        mid = parseInt((low+high+1)/2);  //防止进入无限循环\n    }\n    return mid;\n}\n```\n\n### 松散界限查找\n\n在有序数组中找到\n1. 第一个大于等于target的值\n2. 最后一个小于等于target的值\n\n```javascript\n\n//修改判断条件\n\b\barr[mid] >=target;\n\narr[mid] <=target;\n\n```\n\n## 用二分法查找区域\n\n找到下届和上届即可求出中间部分区域\n\n\n## 在轮转数组中应用二分查找\n\n轮转数组就是以某个数为轴将数组旋转之后的形式\n\n```javascript\nvar SearchInRotateSortedArray = function(arr,low,high,target){\n    while(low <= high){\n        var mid = parseInt((low+high)/2);\n        if(target < arr[mid]){\n            if(arr[mid] > arr[high]){\n                if(target > arr[low]){\n                    high = mid-1;\n                }else{\n                    low = mid+1;\n                }\n            }else{\n                high = mid-1;\n            }\n        }else if(target > arr[mid]){\n            if(arr[mid] > arr[low]){\n                low = mid+1;\n            }else{\n                if(target >arr[high]){\n                    high = mid-1;\n                }else{\n                    low = mid+1;\n                }\n            }\n        }else{\n            return mid;\n        }\n    }\n    return -1;\n}\n```","source":"_posts/2018-01-04-binarySearch.md","raw":"---\ntitle: 二分查找总结\ndate: 2018-01-04\ncategories:\n- Algorithm\ntags:\n- BinarySearch\n---\n\n\n# 二分查找总结\n\n## 二分查找主要解决的问题\n\n一堆数中找出指定的数\n\n##  条件\n\n 数组、有序 （数据结构不能用链表）\n\n\n## 用二分法精确查找\n```javascript\nvar binarySearch = function(arr,low,high,target){\n    var mid = parseInt((low+high)/2);\n    while(low < high){\n        if(arr[mid] < target){\n            low = mid+1;\n        }else if(arr[mid] > target){\n            high = mid-1;\n        }else{\n            return mid;\n        }\n        mid = parseInt((low+high)/2);\n    }\n    return -1;\n}\n```\n## 用二分法界限查找\n\n### 严格界限查找\n\n在有序数组中找到\n1. 第一个大于target的值\n2. 最后一个小于target的值\n\n```javascript\nvar binarySearchUpperBound = function(arr,low,high,target){\n    if(low >high || target >=arr[high]){\n        return -1;\n    }\n    var mid = parseInt((low+high)/2);\n    while(high >low){\n        if(arr[mid] > target){\n            high = mid;  //arr[mid]也有可能是结果\n        }else{\n            low = mid+1;\n        }\n        mid = parseInt((low+high)/2);\n    }\n    return mid;\n}\n\n\nvar binarySearchLowerBound =function(arr,low,high,target){\n    if(low >high || target >=arr[high]){\n        return -1;\n    }\n    var mid = parseInt((low+high+1)/2);\n    while(high >low){\n        if(arr[mid] < target){\n            low = mid;\n        }else{\n            high = mid-1;\n        }\n        mid = parseInt((low+high+1)/2);  //防止进入无限循环\n    }\n    return mid;\n}\n```\n\n### 松散界限查找\n\n在有序数组中找到\n1. 第一个大于等于target的值\n2. 最后一个小于等于target的值\n\n```javascript\n\n//修改判断条件\n\b\barr[mid] >=target;\n\narr[mid] <=target;\n\n```\n\n## 用二分法查找区域\n\n找到下届和上届即可求出中间部分区域\n\n\n## 在轮转数组中应用二分查找\n\n轮转数组就是以某个数为轴将数组旋转之后的形式\n\n```javascript\nvar SearchInRotateSortedArray = function(arr,low,high,target){\n    while(low <= high){\n        var mid = parseInt((low+high)/2);\n        if(target < arr[mid]){\n            if(arr[mid] > arr[high]){\n                if(target > arr[low]){\n                    high = mid-1;\n                }else{\n                    low = mid+1;\n                }\n            }else{\n                high = mid-1;\n            }\n        }else if(target > arr[mid]){\n            if(arr[mid] > arr[low]){\n                low = mid+1;\n            }else{\n                if(target >arr[high]){\n                    high = mid-1;\n                }else{\n                    low = mid+1;\n                }\n            }\n        }else{\n            return mid;\n        }\n    }\n    return -1;\n}\n```","slug":"2018-01-04-binarySearch","published":1,"updated":"2020-03-01T12:09:37.519Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckreo13oh000yytt57tuc6s76","content":"<h1 id=\"二分查找总结\"><a href=\"#二分查找总结\" class=\"headerlink\" title=\"二分查找总结\"></a>二分查找总结</h1><h2 id=\"二分查找主要解决的问题\"><a href=\"#二分查找主要解决的问题\" class=\"headerlink\" title=\"二分查找主要解决的问题\"></a>二分查找主要解决的问题</h2><p>一堆数中找出指定的数</p>\n<h2 id=\"条件\"><a href=\"#条件\" class=\"headerlink\" title=\"条件\"></a>条件</h2><p> 数组、有序 （数据结构不能用链表）</p>\n<h2 id=\"用二分法精确查找\"><a href=\"#用二分法精确查找\" class=\"headerlink\" title=\"用二分法精确查找\"></a>用二分法精确查找</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> binarySearch = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">arr,low,high,target</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> mid = <span class=\"built_in\">parseInt</span>((low+high)/<span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(low &lt; high)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(arr[mid] &lt; target)&#123;</span><br><span class=\"line\">            low = mid+<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(arr[mid] &gt; target)&#123;</span><br><span class=\"line\">            high = mid<span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> mid;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        mid = <span class=\"built_in\">parseInt</span>((low+high)/<span class=\"number\">2</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"用二分法界限查找\"><a href=\"#用二分法界限查找\" class=\"headerlink\" title=\"用二分法界限查找\"></a>用二分法界限查找</h2><h3 id=\"严格界限查找\"><a href=\"#严格界限查找\" class=\"headerlink\" title=\"严格界限查找\"></a>严格界限查找</h3><p>在有序数组中找到</p>\n<ol>\n<li>第一个大于target的值</li>\n<li>最后一个小于target的值</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> binarySearchUpperBound = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">arr,low,high,target</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(low &gt;high || target &gt;=arr[high])&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> mid = <span class=\"built_in\">parseInt</span>((low+high)/<span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(high &gt;low)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(arr[mid] &gt; target)&#123;</span><br><span class=\"line\">            high = mid;  <span class=\"comment\">//arr[mid]也有可能是结果</span></span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            low = mid+<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        mid = <span class=\"built_in\">parseInt</span>((low+high)/<span class=\"number\">2</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> mid;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> binarySearchLowerBound =<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">arr,low,high,target</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(low &gt;high || target &gt;=arr[high])&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> mid = <span class=\"built_in\">parseInt</span>((low+high+<span class=\"number\">1</span>)/<span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(high &gt;low)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(arr[mid] &lt; target)&#123;</span><br><span class=\"line\">            low = mid;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            high = mid<span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        mid = <span class=\"built_in\">parseInt</span>((low+high+<span class=\"number\">1</span>)/<span class=\"number\">2</span>);  <span class=\"comment\">//防止进入无限循环</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> mid;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"松散界限查找\"><a href=\"#松散界限查找\" class=\"headerlink\" title=\"松散界限查找\"></a>松散界限查找</h3><p>在有序数组中找到</p>\n<ol>\n<li>第一个大于等于target的值</li>\n<li>最后一个小于等于target的值</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//修改判断条件</span></span><br><span class=\"line\">\b\barr[mid] &gt;=target;</span><br><span class=\"line\"></span><br><span class=\"line\">arr[mid] &lt;=target;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"用二分法查找区域\"><a href=\"#用二分法查找区域\" class=\"headerlink\" title=\"用二分法查找区域\"></a>用二分法查找区域</h2><p>找到下届和上届即可求出中间部分区域</p>\n<h2 id=\"在轮转数组中应用二分查找\"><a href=\"#在轮转数组中应用二分查找\" class=\"headerlink\" title=\"在轮转数组中应用二分查找\"></a>在轮转数组中应用二分查找</h2><p>轮转数组就是以某个数为轴将数组旋转之后的形式</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> SearchInRotateSortedArray = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">arr,low,high,target</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(low &lt;= high)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> mid = <span class=\"built_in\">parseInt</span>((low+high)/<span class=\"number\">2</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(target &lt; arr[mid])&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(arr[mid] &gt; arr[high])&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(target &gt; arr[low])&#123;</span><br><span class=\"line\">                    high = mid<span class=\"number\">-1</span>;</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    low = mid+<span class=\"number\">1</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                high = mid<span class=\"number\">-1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(target &gt; arr[mid])&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(arr[mid] &gt; arr[low])&#123;</span><br><span class=\"line\">                low = mid+<span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(target &gt;arr[high])&#123;</span><br><span class=\"line\">                    high = mid<span class=\"number\">-1</span>;</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    low = mid+<span class=\"number\">1</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> mid;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"二分查找总结\"><a href=\"#二分查找总结\" class=\"headerlink\" title=\"二分查找总结\"></a>二分查找总结</h1><h2 id=\"二分查找主要解决的问题\"><a href=\"#二分查找主要解决的问题\" class=\"headerlink\" title=\"二分查找主要解决的问题\"></a>二分查找主要解决的问题</h2><p>一堆数中找出指定的数</p>\n<h2 id=\"条件\"><a href=\"#条件\" class=\"headerlink\" title=\"条件\"></a>条件</h2><p> 数组、有序 （数据结构不能用链表）</p>\n<h2 id=\"用二分法精确查找\"><a href=\"#用二分法精确查找\" class=\"headerlink\" title=\"用二分法精确查找\"></a>用二分法精确查找</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> binarySearch = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">arr,low,high,target</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> mid = <span class=\"built_in\">parseInt</span>((low+high)/<span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(low &lt; high)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(arr[mid] &lt; target)&#123;</span><br><span class=\"line\">            low = mid+<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(arr[mid] &gt; target)&#123;</span><br><span class=\"line\">            high = mid<span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> mid;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        mid = <span class=\"built_in\">parseInt</span>((low+high)/<span class=\"number\">2</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"用二分法界限查找\"><a href=\"#用二分法界限查找\" class=\"headerlink\" title=\"用二分法界限查找\"></a>用二分法界限查找</h2><h3 id=\"严格界限查找\"><a href=\"#严格界限查找\" class=\"headerlink\" title=\"严格界限查找\"></a>严格界限查找</h3><p>在有序数组中找到</p>\n<ol>\n<li>第一个大于target的值</li>\n<li>最后一个小于target的值</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> binarySearchUpperBound = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">arr,low,high,target</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(low &gt;high || target &gt;=arr[high])&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> mid = <span class=\"built_in\">parseInt</span>((low+high)/<span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(high &gt;low)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(arr[mid] &gt; target)&#123;</span><br><span class=\"line\">            high = mid;  <span class=\"comment\">//arr[mid]也有可能是结果</span></span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            low = mid+<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        mid = <span class=\"built_in\">parseInt</span>((low+high)/<span class=\"number\">2</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> mid;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> binarySearchLowerBound =<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">arr,low,high,target</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(low &gt;high || target &gt;=arr[high])&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> mid = <span class=\"built_in\">parseInt</span>((low+high+<span class=\"number\">1</span>)/<span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(high &gt;low)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(arr[mid] &lt; target)&#123;</span><br><span class=\"line\">            low = mid;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            high = mid<span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        mid = <span class=\"built_in\">parseInt</span>((low+high+<span class=\"number\">1</span>)/<span class=\"number\">2</span>);  <span class=\"comment\">//防止进入无限循环</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> mid;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"松散界限查找\"><a href=\"#松散界限查找\" class=\"headerlink\" title=\"松散界限查找\"></a>松散界限查找</h3><p>在有序数组中找到</p>\n<ol>\n<li>第一个大于等于target的值</li>\n<li>最后一个小于等于target的值</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//修改判断条件</span></span><br><span class=\"line\">\b\barr[mid] &gt;=target;</span><br><span class=\"line\"></span><br><span class=\"line\">arr[mid] &lt;=target;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"用二分法查找区域\"><a href=\"#用二分法查找区域\" class=\"headerlink\" title=\"用二分法查找区域\"></a>用二分法查找区域</h2><p>找到下届和上届即可求出中间部分区域</p>\n<h2 id=\"在轮转数组中应用二分查找\"><a href=\"#在轮转数组中应用二分查找\" class=\"headerlink\" title=\"在轮转数组中应用二分查找\"></a>在轮转数组中应用二分查找</h2><p>轮转数组就是以某个数为轴将数组旋转之后的形式</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> SearchInRotateSortedArray = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">arr,low,high,target</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(low &lt;= high)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> mid = <span class=\"built_in\">parseInt</span>((low+high)/<span class=\"number\">2</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(target &lt; arr[mid])&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(arr[mid] &gt; arr[high])&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(target &gt; arr[low])&#123;</span><br><span class=\"line\">                    high = mid<span class=\"number\">-1</span>;</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    low = mid+<span class=\"number\">1</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                high = mid<span class=\"number\">-1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(target &gt; arr[mid])&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(arr[mid] &gt; arr[low])&#123;</span><br><span class=\"line\">                low = mid+<span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(target &gt;arr[high])&#123;</span><br><span class=\"line\">                    high = mid<span class=\"number\">-1</span>;</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    low = mid+<span class=\"number\">1</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> mid;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"浏览器缓存","date":"2018-03-21T16:00:00.000Z","_content":"\n# 浏览器缓存\n\n浏览器对于请求资源，有以下缓存策略：\n\n**存储策略**：收到响应后应用\n\n**过期策略**：发送请求前\n\n**协商策略**：发送请求前 （http再验证）\n\n## http header中与缓存相关的key\n\n\n\bkey | description | 存储策略 | 过期策略   | 协商策略\n------ | --------- | :-------: | :------: | :-------: \n Cache-Control| 指定缓存机制 | 是 | 是 | 否 \nPragma | http1.0字段，指定缓存机制 | 是 | 否 | 否\nExpires | 指定缓存的过期时间 | 否 | 是 | 否\nLast-Modified|资源最后一次的修改时间 | 否 | 否| 是\nETag | 唯一标识请求资源的字符串 | 否 | 否 | 是\n\n\n\n\n## 缓存协商策略用于http再验证，缓存资源是否有效，相关key\n\n\n\bkey | description \n------ | --------- \nIf-Modified-Since | 缓存校验字段，值为资源最后一次的修改时间，即上次收到的Last-Modified\nIf-Unmodified-Since | 同上，处理方式与之相反\nIf-Match | 缓存校验字段，值为唯一标识请求资源的字符串，即上次收到的ETag\nIf-None-Match | 同上，处理方式与之相反\n\n------\n\n\n## Cache-Control\n\n优先级最高，可以覆盖其他字段的设置，可以同时在请求头和响应头中设置\n\ncache-directive | description\n| ------ | ------\npublic  | 资源将被客户端和代理服务器缓存\nprivate | 资源仅被客户端缓存，代理服务器不缓存\nno-store| 请求和响应都不缓存\nno-cache | 相当于max-age:0,缓存立刻过期，下次访问时强制验证资源有效性\nmax-age | 缓存资源，但在指定时间（s）后缓存过期\n\bs-maxage | 只在代理服务器上有效\n\n\n## Expires\n\n即到期时间, 以服务器时间为参考系, 其优先级比 Cache-Control:max-age 低, 两者同时出现在响应头时, Expires将被后者覆盖. 如果Expires, Cache-Control: max-age, 或 Cache-Control:s-maxage 都没有在响应头中出现, 并且也没有其它缓存的设置, 那么浏览器默认会采用一个启发式的算法, 通常会取响应头的Date_value - Last-Modified_value值的10%作为缓存时间.\n\n## 强缓存\n\n一旦资源命中强缓存, 浏览器便不会向服务器发送请求, 而是直接读取缓存. Chrome下的现象是 200 OK (from disk cache) 或者 200 OK (from memory cache)\n\n## 协商缓存\n\n缓存过期后, 继续请求该资源, 对于现代浏览器, 拥有如下两种做法:\n\n根据上次响应中的ETag_value, 自动往request header中添加If-None-Match字段. 服务器收到请求后, 拿If-None-Match字段的值与资源的ETag值进行比较, 若相同, 则命中协商缓存, 返回304响应.\n根据上次响应中的Last-Modified_value, 自动往request header中添加If-Modified-Since字段. 服务器收到请求后, 拿If-Modified-Since字段的值与资源的Last-Modified值进行比较, 若相同, 则命中协商缓存, 返回304响应.\n以上, ETag优先级比Last-Modified高, 同时存在时, 前者覆盖后者. 下面通过实例来理解下强缓存和协商缓存.\n\n如下忽略首次访问, 第二次通过 If-Modified-Since 命中了304协商缓存.\n\n\n## 让浏览器不缓存资源\n\n实际上, 工作中很多场景都需要避免浏览器缓存, 除了浏览器隐私模式, 请求时想要禁用缓存, 还可以设置请求头: Cache-Control: no-cache, no-store, must-revalidate。\n\n\n\n# DNS缓存\n\n按距离\n浏览器缓存-->系统缓存-->路由器缓存-->IPS服务器缓存-->根域名服务器缓存-->顶级域名服务器缓存-->主域名服务器缓存\n\n\n## DNS负载均衡（DNS重定向）\n\n应用：CDN技术 \n\nDNS服务器会返回一个跟用户最接近的点的IP地址给用户，CDN节点的服务器负责响应用户的请求，提供所需的内容。\n\n\n\n### 如何尽快的加载资源？\n\n能不从网络中加载的资源就不从网络中加载，当我们合理使用缓存，将资源放在浏览器端，这是最快的方式。如果资源必须从网络中加载，则要考虑缩短连接时间，即DNS优化部分;减少响应内容大小，即对内容进行压缩。另一方面，如果加载的资源数比较少的话，也可以快速的响应用户。\n\n当资源到达浏览器之后，浏览器开始进行解析渲染，浏览器中最耗时的部分就是reflow，所以围绕这一部分就是考虑如何减少reflow的次数。\n\n\n1.CDN加速是对网站所在服务器加速，还是对其域名加速？\n\nCDN是只对网站的某一个具体的域名加速。如果同一个网站有多个域名，则访客访问加入CDN的域名获得加速效果，访问未加入CDN的域名，或者直接访问IP地址，则无法获得CDN效果。","source":"_posts/2018-03-22-浏览器缓存.md","raw":"---\ntitle: 浏览器缓存\ndate: 2018-03-22\ncategories: \n- 浏览器\ntags:\n- FE\n- 浏览器\n---\n\n# 浏览器缓存\n\n浏览器对于请求资源，有以下缓存策略：\n\n**存储策略**：收到响应后应用\n\n**过期策略**：发送请求前\n\n**协商策略**：发送请求前 （http再验证）\n\n## http header中与缓存相关的key\n\n\n\bkey | description | 存储策略 | 过期策略   | 协商策略\n------ | --------- | :-------: | :------: | :-------: \n Cache-Control| 指定缓存机制 | 是 | 是 | 否 \nPragma | http1.0字段，指定缓存机制 | 是 | 否 | 否\nExpires | 指定缓存的过期时间 | 否 | 是 | 否\nLast-Modified|资源最后一次的修改时间 | 否 | 否| 是\nETag | 唯一标识请求资源的字符串 | 否 | 否 | 是\n\n\n\n\n## 缓存协商策略用于http再验证，缓存资源是否有效，相关key\n\n\n\bkey | description \n------ | --------- \nIf-Modified-Since | 缓存校验字段，值为资源最后一次的修改时间，即上次收到的Last-Modified\nIf-Unmodified-Since | 同上，处理方式与之相反\nIf-Match | 缓存校验字段，值为唯一标识请求资源的字符串，即上次收到的ETag\nIf-None-Match | 同上，处理方式与之相反\n\n------\n\n\n## Cache-Control\n\n优先级最高，可以覆盖其他字段的设置，可以同时在请求头和响应头中设置\n\ncache-directive | description\n| ------ | ------\npublic  | 资源将被客户端和代理服务器缓存\nprivate | 资源仅被客户端缓存，代理服务器不缓存\nno-store| 请求和响应都不缓存\nno-cache | 相当于max-age:0,缓存立刻过期，下次访问时强制验证资源有效性\nmax-age | 缓存资源，但在指定时间（s）后缓存过期\n\bs-maxage | 只在代理服务器上有效\n\n\n## Expires\n\n即到期时间, 以服务器时间为参考系, 其优先级比 Cache-Control:max-age 低, 两者同时出现在响应头时, Expires将被后者覆盖. 如果Expires, Cache-Control: max-age, 或 Cache-Control:s-maxage 都没有在响应头中出现, 并且也没有其它缓存的设置, 那么浏览器默认会采用一个启发式的算法, 通常会取响应头的Date_value - Last-Modified_value值的10%作为缓存时间.\n\n## 强缓存\n\n一旦资源命中强缓存, 浏览器便不会向服务器发送请求, 而是直接读取缓存. Chrome下的现象是 200 OK (from disk cache) 或者 200 OK (from memory cache)\n\n## 协商缓存\n\n缓存过期后, 继续请求该资源, 对于现代浏览器, 拥有如下两种做法:\n\n根据上次响应中的ETag_value, 自动往request header中添加If-None-Match字段. 服务器收到请求后, 拿If-None-Match字段的值与资源的ETag值进行比较, 若相同, 则命中协商缓存, 返回304响应.\n根据上次响应中的Last-Modified_value, 自动往request header中添加If-Modified-Since字段. 服务器收到请求后, 拿If-Modified-Since字段的值与资源的Last-Modified值进行比较, 若相同, 则命中协商缓存, 返回304响应.\n以上, ETag优先级比Last-Modified高, 同时存在时, 前者覆盖后者. 下面通过实例来理解下强缓存和协商缓存.\n\n如下忽略首次访问, 第二次通过 If-Modified-Since 命中了304协商缓存.\n\n\n## 让浏览器不缓存资源\n\n实际上, 工作中很多场景都需要避免浏览器缓存, 除了浏览器隐私模式, 请求时想要禁用缓存, 还可以设置请求头: Cache-Control: no-cache, no-store, must-revalidate。\n\n\n\n# DNS缓存\n\n按距离\n浏览器缓存-->系统缓存-->路由器缓存-->IPS服务器缓存-->根域名服务器缓存-->顶级域名服务器缓存-->主域名服务器缓存\n\n\n## DNS负载均衡（DNS重定向）\n\n应用：CDN技术 \n\nDNS服务器会返回一个跟用户最接近的点的IP地址给用户，CDN节点的服务器负责响应用户的请求，提供所需的内容。\n\n\n\n### 如何尽快的加载资源？\n\n能不从网络中加载的资源就不从网络中加载，当我们合理使用缓存，将资源放在浏览器端，这是最快的方式。如果资源必须从网络中加载，则要考虑缩短连接时间，即DNS优化部分;减少响应内容大小，即对内容进行压缩。另一方面，如果加载的资源数比较少的话，也可以快速的响应用户。\n\n当资源到达浏览器之后，浏览器开始进行解析渲染，浏览器中最耗时的部分就是reflow，所以围绕这一部分就是考虑如何减少reflow的次数。\n\n\n1.CDN加速是对网站所在服务器加速，还是对其域名加速？\n\nCDN是只对网站的某一个具体的域名加速。如果同一个网站有多个域名，则访客访问加入CDN的域名获得加速效果，访问未加入CDN的域名，或者直接访问IP地址，则无法获得CDN效果。","slug":"2018-03-22-浏览器缓存","published":1,"updated":"2020-03-01T12:09:37.520Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckreo13oi0012ytt54nh53264","content":"<h1 id=\"浏览器缓存\"><a href=\"#浏览器缓存\" class=\"headerlink\" title=\"浏览器缓存\"></a>浏览器缓存</h1><p>浏览器对于请求资源，有以下缓存策略：</p>\n<p><strong>存储策略</strong>：收到响应后应用</p>\n<p><strong>过期策略</strong>：发送请求前</p>\n<p><strong>协商策略</strong>：发送请求前 （http再验证）</p>\n<h2 id=\"http-header中与缓存相关的key\"><a href=\"#http-header中与缓存相关的key\" class=\"headerlink\" title=\"http header中与缓存相关的key\"></a>http header中与缓存相关的key</h2><table>\n<thead>\n<tr>\n<th>\bkey</th>\n<th>description</th>\n<th align=\"center\">存储策略</th>\n<th align=\"center\">过期策略</th>\n<th align=\"center\">协商策略</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Cache-Control</td>\n<td>指定缓存机制</td>\n<td align=\"center\">是</td>\n<td align=\"center\">是</td>\n<td align=\"center\">否</td>\n</tr>\n<tr>\n<td>Pragma</td>\n<td>http1.0字段，指定缓存机制</td>\n<td align=\"center\">是</td>\n<td align=\"center\">否</td>\n<td align=\"center\">否</td>\n</tr>\n<tr>\n<td>Expires</td>\n<td>指定缓存的过期时间</td>\n<td align=\"center\">否</td>\n<td align=\"center\">是</td>\n<td align=\"center\">否</td>\n</tr>\n<tr>\n<td>Last-Modified</td>\n<td>资源最后一次的修改时间</td>\n<td align=\"center\">否</td>\n<td align=\"center\">否</td>\n<td align=\"center\">是</td>\n</tr>\n<tr>\n<td>ETag</td>\n<td>唯一标识请求资源的字符串</td>\n<td align=\"center\">否</td>\n<td align=\"center\">否</td>\n<td align=\"center\">是</td>\n</tr>\n</tbody></table>\n<h2 id=\"缓存协商策略用于http再验证，缓存资源是否有效，相关key\"><a href=\"#缓存协商策略用于http再验证，缓存资源是否有效，相关key\" class=\"headerlink\" title=\"缓存协商策略用于http再验证，缓存资源是否有效，相关key\"></a>缓存协商策略用于http再验证，缓存资源是否有效，相关key</h2><table>\n<thead>\n<tr>\n<th>\bkey</th>\n<th>description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>If-Modified-Since</td>\n<td>缓存校验字段，值为资源最后一次的修改时间，即上次收到的Last-Modified</td>\n</tr>\n<tr>\n<td>If-Unmodified-Since</td>\n<td>同上，处理方式与之相反</td>\n</tr>\n<tr>\n<td>If-Match</td>\n<td>缓存校验字段，值为唯一标识请求资源的字符串，即上次收到的ETag</td>\n</tr>\n<tr>\n<td>If-None-Match</td>\n<td>同上，处理方式与之相反</td>\n</tr>\n</tbody></table>\n<hr>\n<h2 id=\"Cache-Control\"><a href=\"#Cache-Control\" class=\"headerlink\" title=\"Cache-Control\"></a>Cache-Control</h2><p>优先级最高，可以覆盖其他字段的设置，可以同时在请求头和响应头中设置</p>\n<p>cache-directive | description<br>| —— | ——<br>public  | 资源将被客户端和代理服务器缓存<br>private | 资源仅被客户端缓存，代理服务器不缓存<br>no-store| 请求和响应都不缓存<br>no-cache | 相当于max-age:0,缓存立刻过期，下次访问时强制验证资源有效性<br>max-age | 缓存资源，但在指定时间（s）后缓存过期<br>\bs-maxage | 只在代理服务器上有效</p>\n<h2 id=\"Expires\"><a href=\"#Expires\" class=\"headerlink\" title=\"Expires\"></a>Expires</h2><p>即到期时间, 以服务器时间为参考系, 其优先级比 Cache-Control:max-age 低, 两者同时出现在响应头时, Expires将被后者覆盖. 如果Expires, Cache-Control: max-age, 或 Cache-Control:s-maxage 都没有在响应头中出现, 并且也没有其它缓存的设置, 那么浏览器默认会采用一个启发式的算法, 通常会取响应头的Date_value - Last-Modified_value值的10%作为缓存时间.</p>\n<h2 id=\"强缓存\"><a href=\"#强缓存\" class=\"headerlink\" title=\"强缓存\"></a>强缓存</h2><p>一旦资源命中强缓存, 浏览器便不会向服务器发送请求, 而是直接读取缓存. Chrome下的现象是 200 OK (from disk cache) 或者 200 OK (from memory cache)</p>\n<h2 id=\"协商缓存\"><a href=\"#协商缓存\" class=\"headerlink\" title=\"协商缓存\"></a>协商缓存</h2><p>缓存过期后, 继续请求该资源, 对于现代浏览器, 拥有如下两种做法:</p>\n<p>根据上次响应中的ETag_value, 自动往request header中添加If-None-Match字段. 服务器收到请求后, 拿If-None-Match字段的值与资源的ETag值进行比较, 若相同, 则命中协商缓存, 返回304响应.<br>根据上次响应中的Last-Modified_value, 自动往request header中添加If-Modified-Since字段. 服务器收到请求后, 拿If-Modified-Since字段的值与资源的Last-Modified值进行比较, 若相同, 则命中协商缓存, 返回304响应.<br>以上, ETag优先级比Last-Modified高, 同时存在时, 前者覆盖后者. 下面通过实例来理解下强缓存和协商缓存.</p>\n<p>如下忽略首次访问, 第二次通过 If-Modified-Since 命中了304协商缓存.</p>\n<h2 id=\"让浏览器不缓存资源\"><a href=\"#让浏览器不缓存资源\" class=\"headerlink\" title=\"让浏览器不缓存资源\"></a>让浏览器不缓存资源</h2><p>实际上, 工作中很多场景都需要避免浏览器缓存, 除了浏览器隐私模式, 请求时想要禁用缓存, 还可以设置请求头: Cache-Control: no-cache, no-store, must-revalidate。</p>\n<h1 id=\"DNS缓存\"><a href=\"#DNS缓存\" class=\"headerlink\" title=\"DNS缓存\"></a>DNS缓存</h1><p>按距离<br>浏览器缓存–&gt;系统缓存–&gt;路由器缓存–&gt;IPS服务器缓存–&gt;根域名服务器缓存–&gt;顶级域名服务器缓存–&gt;主域名服务器缓存</p>\n<h2 id=\"DNS负载均衡（DNS重定向）\"><a href=\"#DNS负载均衡（DNS重定向）\" class=\"headerlink\" title=\"DNS负载均衡（DNS重定向）\"></a>DNS负载均衡（DNS重定向）</h2><p>应用：CDN技术 </p>\n<p>DNS服务器会返回一个跟用户最接近的点的IP地址给用户，CDN节点的服务器负责响应用户的请求，提供所需的内容。</p>\n<h3 id=\"如何尽快的加载资源？\"><a href=\"#如何尽快的加载资源？\" class=\"headerlink\" title=\"如何尽快的加载资源？\"></a>如何尽快的加载资源？</h3><p>能不从网络中加载的资源就不从网络中加载，当我们合理使用缓存，将资源放在浏览器端，这是最快的方式。如果资源必须从网络中加载，则要考虑缩短连接时间，即DNS优化部分;减少响应内容大小，即对内容进行压缩。另一方面，如果加载的资源数比较少的话，也可以快速的响应用户。</p>\n<p>当资源到达浏览器之后，浏览器开始进行解析渲染，浏览器中最耗时的部分就是reflow，所以围绕这一部分就是考虑如何减少reflow的次数。</p>\n<p>1.CDN加速是对网站所在服务器加速，还是对其域名加速？</p>\n<p>CDN是只对网站的某一个具体的域名加速。如果同一个网站有多个域名，则访客访问加入CDN的域名获得加速效果，访问未加入CDN的域名，或者直接访问IP地址，则无法获得CDN效果。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"浏览器缓存\"><a href=\"#浏览器缓存\" class=\"headerlink\" title=\"浏览器缓存\"></a>浏览器缓存</h1><p>浏览器对于请求资源，有以下缓存策略：</p>\n<p><strong>存储策略</strong>：收到响应后应用</p>\n<p><strong>过期策略</strong>：发送请求前</p>\n<p><strong>协商策略</strong>：发送请求前 （http再验证）</p>\n<h2 id=\"http-header中与缓存相关的key\"><a href=\"#http-header中与缓存相关的key\" class=\"headerlink\" title=\"http header中与缓存相关的key\"></a>http header中与缓存相关的key</h2><table>\n<thead>\n<tr>\n<th>\bkey</th>\n<th>description</th>\n<th align=\"center\">存储策略</th>\n<th align=\"center\">过期策略</th>\n<th align=\"center\">协商策略</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Cache-Control</td>\n<td>指定缓存机制</td>\n<td align=\"center\">是</td>\n<td align=\"center\">是</td>\n<td align=\"center\">否</td>\n</tr>\n<tr>\n<td>Pragma</td>\n<td>http1.0字段，指定缓存机制</td>\n<td align=\"center\">是</td>\n<td align=\"center\">否</td>\n<td align=\"center\">否</td>\n</tr>\n<tr>\n<td>Expires</td>\n<td>指定缓存的过期时间</td>\n<td align=\"center\">否</td>\n<td align=\"center\">是</td>\n<td align=\"center\">否</td>\n</tr>\n<tr>\n<td>Last-Modified</td>\n<td>资源最后一次的修改时间</td>\n<td align=\"center\">否</td>\n<td align=\"center\">否</td>\n<td align=\"center\">是</td>\n</tr>\n<tr>\n<td>ETag</td>\n<td>唯一标识请求资源的字符串</td>\n<td align=\"center\">否</td>\n<td align=\"center\">否</td>\n<td align=\"center\">是</td>\n</tr>\n</tbody></table>\n<h2 id=\"缓存协商策略用于http再验证，缓存资源是否有效，相关key\"><a href=\"#缓存协商策略用于http再验证，缓存资源是否有效，相关key\" class=\"headerlink\" title=\"缓存协商策略用于http再验证，缓存资源是否有效，相关key\"></a>缓存协商策略用于http再验证，缓存资源是否有效，相关key</h2><table>\n<thead>\n<tr>\n<th>\bkey</th>\n<th>description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>If-Modified-Since</td>\n<td>缓存校验字段，值为资源最后一次的修改时间，即上次收到的Last-Modified</td>\n</tr>\n<tr>\n<td>If-Unmodified-Since</td>\n<td>同上，处理方式与之相反</td>\n</tr>\n<tr>\n<td>If-Match</td>\n<td>缓存校验字段，值为唯一标识请求资源的字符串，即上次收到的ETag</td>\n</tr>\n<tr>\n<td>If-None-Match</td>\n<td>同上，处理方式与之相反</td>\n</tr>\n</tbody></table>\n<hr>\n<h2 id=\"Cache-Control\"><a href=\"#Cache-Control\" class=\"headerlink\" title=\"Cache-Control\"></a>Cache-Control</h2><p>优先级最高，可以覆盖其他字段的设置，可以同时在请求头和响应头中设置</p>\n<p>cache-directive | description<br>| —— | ——<br>public  | 资源将被客户端和代理服务器缓存<br>private | 资源仅被客户端缓存，代理服务器不缓存<br>no-store| 请求和响应都不缓存<br>no-cache | 相当于max-age:0,缓存立刻过期，下次访问时强制验证资源有效性<br>max-age | 缓存资源，但在指定时间（s）后缓存过期<br>\bs-maxage | 只在代理服务器上有效</p>\n<h2 id=\"Expires\"><a href=\"#Expires\" class=\"headerlink\" title=\"Expires\"></a>Expires</h2><p>即到期时间, 以服务器时间为参考系, 其优先级比 Cache-Control:max-age 低, 两者同时出现在响应头时, Expires将被后者覆盖. 如果Expires, Cache-Control: max-age, 或 Cache-Control:s-maxage 都没有在响应头中出现, 并且也没有其它缓存的设置, 那么浏览器默认会采用一个启发式的算法, 通常会取响应头的Date_value - Last-Modified_value值的10%作为缓存时间.</p>\n<h2 id=\"强缓存\"><a href=\"#强缓存\" class=\"headerlink\" title=\"强缓存\"></a>强缓存</h2><p>一旦资源命中强缓存, 浏览器便不会向服务器发送请求, 而是直接读取缓存. Chrome下的现象是 200 OK (from disk cache) 或者 200 OK (from memory cache)</p>\n<h2 id=\"协商缓存\"><a href=\"#协商缓存\" class=\"headerlink\" title=\"协商缓存\"></a>协商缓存</h2><p>缓存过期后, 继续请求该资源, 对于现代浏览器, 拥有如下两种做法:</p>\n<p>根据上次响应中的ETag_value, 自动往request header中添加If-None-Match字段. 服务器收到请求后, 拿If-None-Match字段的值与资源的ETag值进行比较, 若相同, 则命中协商缓存, 返回304响应.<br>根据上次响应中的Last-Modified_value, 自动往request header中添加If-Modified-Since字段. 服务器收到请求后, 拿If-Modified-Since字段的值与资源的Last-Modified值进行比较, 若相同, 则命中协商缓存, 返回304响应.<br>以上, ETag优先级比Last-Modified高, 同时存在时, 前者覆盖后者. 下面通过实例来理解下强缓存和协商缓存.</p>\n<p>如下忽略首次访问, 第二次通过 If-Modified-Since 命中了304协商缓存.</p>\n<h2 id=\"让浏览器不缓存资源\"><a href=\"#让浏览器不缓存资源\" class=\"headerlink\" title=\"让浏览器不缓存资源\"></a>让浏览器不缓存资源</h2><p>实际上, 工作中很多场景都需要避免浏览器缓存, 除了浏览器隐私模式, 请求时想要禁用缓存, 还可以设置请求头: Cache-Control: no-cache, no-store, must-revalidate。</p>\n<h1 id=\"DNS缓存\"><a href=\"#DNS缓存\" class=\"headerlink\" title=\"DNS缓存\"></a>DNS缓存</h1><p>按距离<br>浏览器缓存–&gt;系统缓存–&gt;路由器缓存–&gt;IPS服务器缓存–&gt;根域名服务器缓存–&gt;顶级域名服务器缓存–&gt;主域名服务器缓存</p>\n<h2 id=\"DNS负载均衡（DNS重定向）\"><a href=\"#DNS负载均衡（DNS重定向）\" class=\"headerlink\" title=\"DNS负载均衡（DNS重定向）\"></a>DNS负载均衡（DNS重定向）</h2><p>应用：CDN技术 </p>\n<p>DNS服务器会返回一个跟用户最接近的点的IP地址给用户，CDN节点的服务器负责响应用户的请求，提供所需的内容。</p>\n<h3 id=\"如何尽快的加载资源？\"><a href=\"#如何尽快的加载资源？\" class=\"headerlink\" title=\"如何尽快的加载资源？\"></a>如何尽快的加载资源？</h3><p>能不从网络中加载的资源就不从网络中加载，当我们合理使用缓存，将资源放在浏览器端，这是最快的方式。如果资源必须从网络中加载，则要考虑缩短连接时间，即DNS优化部分;减少响应内容大小，即对内容进行压缩。另一方面，如果加载的资源数比较少的话，也可以快速的响应用户。</p>\n<p>当资源到达浏览器之后，浏览器开始进行解析渲染，浏览器中最耗时的部分就是reflow，所以围绕这一部分就是考虑如何减少reflow的次数。</p>\n<p>1.CDN加速是对网站所在服务器加速，还是对其域名加速？</p>\n<p>CDN是只对网站的某一个具体的域名加速。如果同一个网站有多个域名，则访客访问加入CDN的域名获得加速效果，访问未加入CDN的域名，或者直接访问IP地址，则无法获得CDN效果。</p>\n"},{"title":"js设计模式与开发实践(一)","date":"2018-03-24T16:00:00.000Z","_content":"\n# 闭包和高阶函数\n\n## 闭包\n### 变量的作用域\n\n### 变量的生存周期\n\n一个内部变量在暴露给外部的空间使用，使得该变量还有存在的价值，就不会被销毁。\n### 闭包的更多作用\n\n1. 封装变量\n\n把一些不需要暴露在全局的变量封装成“私有变量”。\n\n2. 延续局部变量的寿命\n\n封装起来，返回能访问到的函数。\n## 高阶函数\n\n至少满足下列条件之一的函数:\n1. 函数可以作为参数传递\n2. 函数可以作为返回值输出\n\n\n### 函数作为参数传递\n\n可以抽离一部分容易变化的逻辑，把这部分逻辑放在函数参数中，可以分离业务代码种变化与不变的部分。 （**回调函数**）\n\najax异步请求 \n\n当一个函数适合执行一些请求时，可以把这些请求封装成一个函数，并把它作为参数传递给另外一个函数，委托给另外一个函数来执行。\n\n委托的方法来确定执行的时机\n\n逻辑关系不紧密的部分，抽离出来，不要耦合太高\n\n### 函数作为返回值输出\n\n让函数继续返回一个可执行的函数，意味着运算过程是可延续的\n\n1. 判断数据的类型\n\n\n2. 高阶函数实现AOP\nAOP 面向切面编程 主要作用是把一些跟核心业务逻辑模块无关的功能抽象出来，包括日志统计，安全控制，异常处理。\n\n\n装饰者模式\n\n#### 常见的高阶函数\n\n##### currying\n\n会首先接收一些参数，但不会求值，会返回一个函数，这个函数将这些参数用闭包封闭起来，待到需要求值的时候，所有参数会一次性求值。\n\n```javascript\n\n```\n##### uncurrying\n\n反科里化就是 ，扩大适用范围，创建一个应用范围更广的函数，把泛化this的过程提出来。\n\nthis.method  ===>  method(this,arg1,arg2....)\n实现this泛化\n\n```javascript\n\nFunction .prototype.uncurrying = function(){\n    var self = this;\n    return function(){\n        var obj = Array.prototype.shift.call(arguments);\n        return self.apply(obj,arguments);\n    }\n}\n\n\nvar push = Array.prototype.push.uncurrying();\n\n(function(){\n    push(arguments,4);\n    console.log(arguments) // 1,2,3,4\n})(1,2,3);\n\nvar arr = ['push','shift','forEach'];\nfor(var i=0;i<ary.length;i++){\n    var fn = arr[i];\n    Array[fn] = Array.prototype[fn].uncurrying();\n}\nvar obj = {\n    'length':3,\n    \"0\":1,\n    \"1\":2,\n    \"2\":3\n};\nArray.push(obj,4);\n\n\nFunction.prototype.uncurrying = function(){\n    var self = this;\n    return function(){\n        return Function.prototype.call.apply(self,arguments);\n    }\n}\n```\n\n##### 函数节流\n\n函数节流 主要解决 函数的触发不是由用户直接控制的，在某些场景下，函数有可能被非常频繁地调用，造成性能问题。\n\n主要出现在一下场景中：\n1. window.onresize\n2. mousemove 事件\n3. 上传进度\n\n>将即将被执行的函数用setTimeout延迟一段时间执行，如果该次延迟执行还没有完成，则忽略接下来调用该函数的请求。\n接收两个参数：函数、延迟时间\n\n```javascript\nvar throttle = function(fn,delay){\n    var timer;\n    var firsttime = true;  //是否是第一次调用\n    return function(){\n        var args = arguments;\n        var _this = this;\n        if(firsttime){\n            fn.apply(_this,args);\n        }else{\n            if(timer){\n                return false;\n            }\n            timer = setTimeout(function(){\n                clearTimeout(timer);\n                timer = null;\n                fn.apply(_this,args);\n            },delay);\n        };\n    };\n}\n\nvar throttle = function(fn,delay,interval){\n    var timer = null;\n    var pre = null;\n    return function(){\n        var now = +new Date();\n        var args = arguments;\n        if(!pre){\n            pre = now;\n        }\n        var remain = now - pre;\n        if(interval && remain >=interval){\n            fn.apply(null,args);\n            pre = now;\n        }else{\n            clearTimeout(timer);\n            timer = setTimeout(function(){\n                fn.apply(null,args);\n            },delay);\n        }\n    }\n}\n\n\nwindow.onscroll = throttle(fn,500,2000);\n\nvar time = +new Date();\n\nvar fn = function(){\n    console.log(\"函数调用\"+(+new Date()-time));\n}\n\n```\n\n##### 分时函数\n\n某些函数确实是用户主动调用的，但因为一些客观原因，这些函数会严重影响页面性能。\neg. 创建WebQQ的qq好友列表，如果一个好友用一个节点来表示，当在页面渲染这个列表的时候，可能要一次性往页面中创建成百上千个节点。\n\n解决方法    =====>    timeChunk函数 （分时函数）\ntimeChunk 可以让创建节点的工作**分批进行**，比如把1秒创建1000个节点，改为每隔200ms创建8个节点\n\n```javascript\nvar timeChunk  = function(arr,fn,cnt,interval){\n    var obj ,timer;\n    var len = arr.length;\n    var start = function(){\n        for(var i=0;i < Math.min(cnt || 1,arr.length);i++){\n            var obj = arr.shift();\n            fn(obj);\n        }\n    };\n    return function(){\n        timer = setInterval(function(){\n            if(arr.length == 0){\n                return clearInterval(timer);\n            }\n            start();\n        },interval);\n    }\n}\n```\n\n##### 惰性加载函数\n\n嗅探函数\n\n1. 将嗅探浏览器的操作提前到代码加载的时候，在代码加载的时候就立刻进行一次判断，以便让addEvent返回一个包裹了正确逻辑的函数。\n\n```javascript\nvar addEvent = (function(){\n    if(window.addEventListener){\n        return function(ele,type,handler){\n            ele.addEventListener(type,handler,false);\n        }\n    }\n    if(window.attachEvent){\n        return function(ele,type,handler){\n            ele.attachEvent('on'+type,handler);\n        }\n    }\n})()\n\n```\n\n但是如果没有使用过这个函数可能会导致多余的操作，也许会稍稍延长页面ready的时间，所以加入惰性载入方案。\n\n**在第一次进入条件分支之后，在函数  ‘内部重写’ 这个函数，重写之后函数就是我们期望的addEvent函数，在下次进入的时候，不再存在条件分支语句。**\n\n```javascript\nvar addEvent = function(ele,type,handler){\n    if(window.addEventListener){\n        addEvent = function(ele,type,handler){\n            ele.addEventListener(type,handler,false);\n        }\n    }else if(window.attachEvent){\n        addEvent = function(ele,type,handler){\n            ele.attachEvent('on'+type,handler);\n        }\n    }\n    addEvent(ele,type,handler);\n}\n```\n\n\n\n\n","source":"_posts/2018-03-25-js设计模式与开发实践（一）.md","raw":"---\ntitle: js设计模式与开发实践(一)\ndate: 2018-03-25\ncategories: \n- FE\ntags:\n- FE\n- 设计模式\n---\n\n# 闭包和高阶函数\n\n## 闭包\n### 变量的作用域\n\n### 变量的生存周期\n\n一个内部变量在暴露给外部的空间使用，使得该变量还有存在的价值，就不会被销毁。\n### 闭包的更多作用\n\n1. 封装变量\n\n把一些不需要暴露在全局的变量封装成“私有变量”。\n\n2. 延续局部变量的寿命\n\n封装起来，返回能访问到的函数。\n## 高阶函数\n\n至少满足下列条件之一的函数:\n1. 函数可以作为参数传递\n2. 函数可以作为返回值输出\n\n\n### 函数作为参数传递\n\n可以抽离一部分容易变化的逻辑，把这部分逻辑放在函数参数中，可以分离业务代码种变化与不变的部分。 （**回调函数**）\n\najax异步请求 \n\n当一个函数适合执行一些请求时，可以把这些请求封装成一个函数，并把它作为参数传递给另外一个函数，委托给另外一个函数来执行。\n\n委托的方法来确定执行的时机\n\n逻辑关系不紧密的部分，抽离出来，不要耦合太高\n\n### 函数作为返回值输出\n\n让函数继续返回一个可执行的函数，意味着运算过程是可延续的\n\n1. 判断数据的类型\n\n\n2. 高阶函数实现AOP\nAOP 面向切面编程 主要作用是把一些跟核心业务逻辑模块无关的功能抽象出来，包括日志统计，安全控制，异常处理。\n\n\n装饰者模式\n\n#### 常见的高阶函数\n\n##### currying\n\n会首先接收一些参数，但不会求值，会返回一个函数，这个函数将这些参数用闭包封闭起来，待到需要求值的时候，所有参数会一次性求值。\n\n```javascript\n\n```\n##### uncurrying\n\n反科里化就是 ，扩大适用范围，创建一个应用范围更广的函数，把泛化this的过程提出来。\n\nthis.method  ===>  method(this,arg1,arg2....)\n实现this泛化\n\n```javascript\n\nFunction .prototype.uncurrying = function(){\n    var self = this;\n    return function(){\n        var obj = Array.prototype.shift.call(arguments);\n        return self.apply(obj,arguments);\n    }\n}\n\n\nvar push = Array.prototype.push.uncurrying();\n\n(function(){\n    push(arguments,4);\n    console.log(arguments) // 1,2,3,4\n})(1,2,3);\n\nvar arr = ['push','shift','forEach'];\nfor(var i=0;i<ary.length;i++){\n    var fn = arr[i];\n    Array[fn] = Array.prototype[fn].uncurrying();\n}\nvar obj = {\n    'length':3,\n    \"0\":1,\n    \"1\":2,\n    \"2\":3\n};\nArray.push(obj,4);\n\n\nFunction.prototype.uncurrying = function(){\n    var self = this;\n    return function(){\n        return Function.prototype.call.apply(self,arguments);\n    }\n}\n```\n\n##### 函数节流\n\n函数节流 主要解决 函数的触发不是由用户直接控制的，在某些场景下，函数有可能被非常频繁地调用，造成性能问题。\n\n主要出现在一下场景中：\n1. window.onresize\n2. mousemove 事件\n3. 上传进度\n\n>将即将被执行的函数用setTimeout延迟一段时间执行，如果该次延迟执行还没有完成，则忽略接下来调用该函数的请求。\n接收两个参数：函数、延迟时间\n\n```javascript\nvar throttle = function(fn,delay){\n    var timer;\n    var firsttime = true;  //是否是第一次调用\n    return function(){\n        var args = arguments;\n        var _this = this;\n        if(firsttime){\n            fn.apply(_this,args);\n        }else{\n            if(timer){\n                return false;\n            }\n            timer = setTimeout(function(){\n                clearTimeout(timer);\n                timer = null;\n                fn.apply(_this,args);\n            },delay);\n        };\n    };\n}\n\nvar throttle = function(fn,delay,interval){\n    var timer = null;\n    var pre = null;\n    return function(){\n        var now = +new Date();\n        var args = arguments;\n        if(!pre){\n            pre = now;\n        }\n        var remain = now - pre;\n        if(interval && remain >=interval){\n            fn.apply(null,args);\n            pre = now;\n        }else{\n            clearTimeout(timer);\n            timer = setTimeout(function(){\n                fn.apply(null,args);\n            },delay);\n        }\n    }\n}\n\n\nwindow.onscroll = throttle(fn,500,2000);\n\nvar time = +new Date();\n\nvar fn = function(){\n    console.log(\"函数调用\"+(+new Date()-time));\n}\n\n```\n\n##### 分时函数\n\n某些函数确实是用户主动调用的，但因为一些客观原因，这些函数会严重影响页面性能。\neg. 创建WebQQ的qq好友列表，如果一个好友用一个节点来表示，当在页面渲染这个列表的时候，可能要一次性往页面中创建成百上千个节点。\n\n解决方法    =====>    timeChunk函数 （分时函数）\ntimeChunk 可以让创建节点的工作**分批进行**，比如把1秒创建1000个节点，改为每隔200ms创建8个节点\n\n```javascript\nvar timeChunk  = function(arr,fn,cnt,interval){\n    var obj ,timer;\n    var len = arr.length;\n    var start = function(){\n        for(var i=0;i < Math.min(cnt || 1,arr.length);i++){\n            var obj = arr.shift();\n            fn(obj);\n        }\n    };\n    return function(){\n        timer = setInterval(function(){\n            if(arr.length == 0){\n                return clearInterval(timer);\n            }\n            start();\n        },interval);\n    }\n}\n```\n\n##### 惰性加载函数\n\n嗅探函数\n\n1. 将嗅探浏览器的操作提前到代码加载的时候，在代码加载的时候就立刻进行一次判断，以便让addEvent返回一个包裹了正确逻辑的函数。\n\n```javascript\nvar addEvent = (function(){\n    if(window.addEventListener){\n        return function(ele,type,handler){\n            ele.addEventListener(type,handler,false);\n        }\n    }\n    if(window.attachEvent){\n        return function(ele,type,handler){\n            ele.attachEvent('on'+type,handler);\n        }\n    }\n})()\n\n```\n\n但是如果没有使用过这个函数可能会导致多余的操作，也许会稍稍延长页面ready的时间，所以加入惰性载入方案。\n\n**在第一次进入条件分支之后，在函数  ‘内部重写’ 这个函数，重写之后函数就是我们期望的addEvent函数，在下次进入的时候，不再存在条件分支语句。**\n\n```javascript\nvar addEvent = function(ele,type,handler){\n    if(window.addEventListener){\n        addEvent = function(ele,type,handler){\n            ele.addEventListener(type,handler,false);\n        }\n    }else if(window.attachEvent){\n        addEvent = function(ele,type,handler){\n            ele.attachEvent('on'+type,handler);\n        }\n    }\n    addEvent(ele,type,handler);\n}\n```\n\n\n\n\n","slug":"2018-03-25-js设计模式与开发实践（一）","published":1,"updated":"2020-03-01T12:09:37.521Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckreo13oj0016ytt5gbyla99t","content":"<h1 id=\"闭包和高阶函数\"><a href=\"#闭包和高阶函数\" class=\"headerlink\" title=\"闭包和高阶函数\"></a>闭包和高阶函数</h1><h2 id=\"闭包\"><a href=\"#闭包\" class=\"headerlink\" title=\"闭包\"></a>闭包</h2><h3 id=\"变量的作用域\"><a href=\"#变量的作用域\" class=\"headerlink\" title=\"变量的作用域\"></a>变量的作用域</h3><h3 id=\"变量的生存周期\"><a href=\"#变量的生存周期\" class=\"headerlink\" title=\"变量的生存周期\"></a>变量的生存周期</h3><p>一个内部变量在暴露给外部的空间使用，使得该变量还有存在的价值，就不会被销毁。</p>\n<h3 id=\"闭包的更多作用\"><a href=\"#闭包的更多作用\" class=\"headerlink\" title=\"闭包的更多作用\"></a>闭包的更多作用</h3><ol>\n<li>封装变量</li>\n</ol>\n<p>把一些不需要暴露在全局的变量封装成“私有变量”。</p>\n<ol start=\"2\">\n<li>延续局部变量的寿命</li>\n</ol>\n<p>封装起来，返回能访问到的函数。</p>\n<h2 id=\"高阶函数\"><a href=\"#高阶函数\" class=\"headerlink\" title=\"高阶函数\"></a>高阶函数</h2><p>至少满足下列条件之一的函数:</p>\n<ol>\n<li>函数可以作为参数传递</li>\n<li>函数可以作为返回值输出</li>\n</ol>\n<h3 id=\"函数作为参数传递\"><a href=\"#函数作为参数传递\" class=\"headerlink\" title=\"函数作为参数传递\"></a>函数作为参数传递</h3><p>可以抽离一部分容易变化的逻辑，把这部分逻辑放在函数参数中，可以分离业务代码种变化与不变的部分。 （<strong>回调函数</strong>）</p>\n<p>ajax异步请求 </p>\n<p>当一个函数适合执行一些请求时，可以把这些请求封装成一个函数，并把它作为参数传递给另外一个函数，委托给另外一个函数来执行。</p>\n<p>委托的方法来确定执行的时机</p>\n<p>逻辑关系不紧密的部分，抽离出来，不要耦合太高</p>\n<h3 id=\"函数作为返回值输出\"><a href=\"#函数作为返回值输出\" class=\"headerlink\" title=\"函数作为返回值输出\"></a>函数作为返回值输出</h3><p>让函数继续返回一个可执行的函数，意味着运算过程是可延续的</p>\n<ol>\n<li>判断数据的类型</li>\n</ol>\n<ol start=\"2\">\n<li>高阶函数实现AOP<br>AOP 面向切面编程 主要作用是把一些跟核心业务逻辑模块无关的功能抽象出来，包括日志统计，安全控制，异常处理。</li>\n</ol>\n<p>装饰者模式</p>\n<h4 id=\"常见的高阶函数\"><a href=\"#常见的高阶函数\" class=\"headerlink\" title=\"常见的高阶函数\"></a>常见的高阶函数</h4><h5 id=\"currying\"><a href=\"#currying\" class=\"headerlink\" title=\"currying\"></a>currying</h5><p>会首先接收一些参数，但不会求值，会返回一个函数，这个函数将这些参数用闭包封闭起来，待到需要求值的时候，所有参数会一次性求值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h5 id=\"uncurrying\"><a href=\"#uncurrying\" class=\"headerlink\" title=\"uncurrying\"></a>uncurrying</h5><p>反科里化就是 ，扩大适用范围，创建一个应用范围更广的函数，把泛化this的过程提出来。</p>\n<p>this.method  ===&gt;  method(this,arg1,arg2….)<br>实现this泛化</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Function</span> .prototype.uncurrying = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> obj = <span class=\"built_in\">Array</span>.prototype.shift.call(<span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.apply(obj,<span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> push = <span class=\"built_in\">Array</span>.prototype.push.uncurrying();</span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    push(<span class=\"built_in\">arguments</span>,<span class=\"number\">4</span>);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">arguments</span>) <span class=\"comment\">// 1,2,3,4</span></span><br><span class=\"line\">&#125;)(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">'push'</span>,<span class=\"string\">'shift'</span>,<span class=\"string\">'forEach'</span>];</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;ary.length;i++)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> fn = arr[i];</span><br><span class=\"line\">    <span class=\"built_in\">Array</span>[fn] = <span class=\"built_in\">Array</span>.prototype[fn].uncurrying();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">    <span class=\"string\">'length'</span>:<span class=\"number\">3</span>,</span><br><span class=\"line\">    <span class=\"string\">\"0\"</span>:<span class=\"number\">1</span>,</span><br><span class=\"line\">    <span class=\"string\">\"1\"</span>:<span class=\"number\">2</span>,</span><br><span class=\"line\">    <span class=\"string\">\"2\"</span>:<span class=\"number\">3</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">Array</span>.push(obj,<span class=\"number\">4</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Function</span>.prototype.uncurrying = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">Function</span>.prototype.call.apply(self,<span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"函数节流\"><a href=\"#函数节流\" class=\"headerlink\" title=\"函数节流\"></a>函数节流</h5><p>函数节流 主要解决 函数的触发不是由用户直接控制的，在某些场景下，函数有可能被非常频繁地调用，造成性能问题。</p>\n<p>主要出现在一下场景中：</p>\n<ol>\n<li>window.onresize</li>\n<li>mousemove 事件</li>\n<li>上传进度</li>\n</ol>\n<blockquote>\n<p>将即将被执行的函数用setTimeout延迟一段时间执行，如果该次延迟执行还没有完成，则忽略接下来调用该函数的请求。<br>接收两个参数：函数、延迟时间</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> throttle = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">fn,delay</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> timer;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> firsttime = <span class=\"literal\">true</span>;  <span class=\"comment\">//是否是第一次调用</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> args = <span class=\"built_in\">arguments</span>;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> _this = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(firsttime)&#123;</span><br><span class=\"line\">            fn.apply(_this,args);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(timer)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            timer = setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">                clearTimeout(timer);</span><br><span class=\"line\">                timer = <span class=\"literal\">null</span>;</span><br><span class=\"line\">                fn.apply(_this,args);</span><br><span class=\"line\">            &#125;,delay);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> throttle = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">fn,delay,interval</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> timer = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> pre = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> now = +<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</span><br><span class=\"line\">        <span class=\"keyword\">var</span> args = <span class=\"built_in\">arguments</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!pre)&#123;</span><br><span class=\"line\">            pre = now;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> remain = now - pre;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(interval &amp;&amp; remain &gt;=interval)&#123;</span><br><span class=\"line\">            fn.apply(<span class=\"literal\">null</span>,args);</span><br><span class=\"line\">            pre = now;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            clearTimeout(timer);</span><br><span class=\"line\">            timer = setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">                fn.apply(<span class=\"literal\">null</span>,args);</span><br><span class=\"line\">            &#125;,delay);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">window</span>.onscroll = throttle(fn,<span class=\"number\">500</span>,<span class=\"number\">2000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> time = +<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> fn = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"函数调用\"</span>+(+<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()-time));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"分时函数\"><a href=\"#分时函数\" class=\"headerlink\" title=\"分时函数\"></a>分时函数</h5><p>某些函数确实是用户主动调用的，但因为一些客观原因，这些函数会严重影响页面性能。<br>eg. 创建WebQQ的qq好友列表，如果一个好友用一个节点来表示，当在页面渲染这个列表的时候，可能要一次性往页面中创建成百上千个节点。</p>\n<p>解决方法    =====&gt;    timeChunk函数 （分时函数）<br>timeChunk 可以让创建节点的工作<strong>分批进行</strong>，比如把1秒创建1000个节点，改为每隔200ms创建8个节点</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> timeChunk  = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">arr,fn,cnt,interval</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> obj ,timer;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> len = arr.length;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> start = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i &lt; <span class=\"built_in\">Math</span>.min(cnt || <span class=\"number\">1</span>,arr.length);i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> obj = arr.shift();</span><br><span class=\"line\">            fn(obj);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        timer = setInterval(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(arr.length == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> clearInterval(timer);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            start();</span><br><span class=\"line\">        &#125;,interval);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"惰性加载函数\"><a href=\"#惰性加载函数\" class=\"headerlink\" title=\"惰性加载函数\"></a>惰性加载函数</h5><p>嗅探函数</p>\n<ol>\n<li>将嗅探浏览器的操作提前到代码加载的时候，在代码加载的时候就立刻进行一次判断，以便让addEvent返回一个包裹了正确逻辑的函数。</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> addEvent = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">window</span>.addEventListener)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ele,type,handler</span>)</span>&#123;</span><br><span class=\"line\">            ele.addEventListener(type,handler,<span class=\"literal\">false</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">window</span>.attachEvent)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ele,type,handler</span>)</span>&#123;</span><br><span class=\"line\">            ele.attachEvent(<span class=\"string\">'on'</span>+type,handler);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)()</span><br></pre></td></tr></table></figure>\n\n<p>但是如果没有使用过这个函数可能会导致多余的操作，也许会稍稍延长页面ready的时间，所以加入惰性载入方案。</p>\n<p><strong>在第一次进入条件分支之后，在函数  ‘内部重写’ 这个函数，重写之后函数就是我们期望的addEvent函数，在下次进入的时候，不再存在条件分支语句。</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> addEvent = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ele,type,handler</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">window</span>.addEventListener)&#123;</span><br><span class=\"line\">        addEvent = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ele,type,handler</span>)</span>&#123;</span><br><span class=\"line\">            ele.addEventListener(type,handler,<span class=\"literal\">false</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(<span class=\"built_in\">window</span>.attachEvent)&#123;</span><br><span class=\"line\">        addEvent = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ele,type,handler</span>)</span>&#123;</span><br><span class=\"line\">            ele.attachEvent(<span class=\"string\">'on'</span>+type,handler);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    addEvent(ele,type,handler);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"闭包和高阶函数\"><a href=\"#闭包和高阶函数\" class=\"headerlink\" title=\"闭包和高阶函数\"></a>闭包和高阶函数</h1><h2 id=\"闭包\"><a href=\"#闭包\" class=\"headerlink\" title=\"闭包\"></a>闭包</h2><h3 id=\"变量的作用域\"><a href=\"#变量的作用域\" class=\"headerlink\" title=\"变量的作用域\"></a>变量的作用域</h3><h3 id=\"变量的生存周期\"><a href=\"#变量的生存周期\" class=\"headerlink\" title=\"变量的生存周期\"></a>变量的生存周期</h3><p>一个内部变量在暴露给外部的空间使用，使得该变量还有存在的价值，就不会被销毁。</p>\n<h3 id=\"闭包的更多作用\"><a href=\"#闭包的更多作用\" class=\"headerlink\" title=\"闭包的更多作用\"></a>闭包的更多作用</h3><ol>\n<li>封装变量</li>\n</ol>\n<p>把一些不需要暴露在全局的变量封装成“私有变量”。</p>\n<ol start=\"2\">\n<li>延续局部变量的寿命</li>\n</ol>\n<p>封装起来，返回能访问到的函数。</p>\n<h2 id=\"高阶函数\"><a href=\"#高阶函数\" class=\"headerlink\" title=\"高阶函数\"></a>高阶函数</h2><p>至少满足下列条件之一的函数:</p>\n<ol>\n<li>函数可以作为参数传递</li>\n<li>函数可以作为返回值输出</li>\n</ol>\n<h3 id=\"函数作为参数传递\"><a href=\"#函数作为参数传递\" class=\"headerlink\" title=\"函数作为参数传递\"></a>函数作为参数传递</h3><p>可以抽离一部分容易变化的逻辑，把这部分逻辑放在函数参数中，可以分离业务代码种变化与不变的部分。 （<strong>回调函数</strong>）</p>\n<p>ajax异步请求 </p>\n<p>当一个函数适合执行一些请求时，可以把这些请求封装成一个函数，并把它作为参数传递给另外一个函数，委托给另外一个函数来执行。</p>\n<p>委托的方法来确定执行的时机</p>\n<p>逻辑关系不紧密的部分，抽离出来，不要耦合太高</p>\n<h3 id=\"函数作为返回值输出\"><a href=\"#函数作为返回值输出\" class=\"headerlink\" title=\"函数作为返回值输出\"></a>函数作为返回值输出</h3><p>让函数继续返回一个可执行的函数，意味着运算过程是可延续的</p>\n<ol>\n<li>判断数据的类型</li>\n</ol>\n<ol start=\"2\">\n<li>高阶函数实现AOP<br>AOP 面向切面编程 主要作用是把一些跟核心业务逻辑模块无关的功能抽象出来，包括日志统计，安全控制，异常处理。</li>\n</ol>\n<p>装饰者模式</p>\n<h4 id=\"常见的高阶函数\"><a href=\"#常见的高阶函数\" class=\"headerlink\" title=\"常见的高阶函数\"></a>常见的高阶函数</h4><h5 id=\"currying\"><a href=\"#currying\" class=\"headerlink\" title=\"currying\"></a>currying</h5><p>会首先接收一些参数，但不会求值，会返回一个函数，这个函数将这些参数用闭包封闭起来，待到需要求值的时候，所有参数会一次性求值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h5 id=\"uncurrying\"><a href=\"#uncurrying\" class=\"headerlink\" title=\"uncurrying\"></a>uncurrying</h5><p>反科里化就是 ，扩大适用范围，创建一个应用范围更广的函数，把泛化this的过程提出来。</p>\n<p>this.method  ===&gt;  method(this,arg1,arg2….)<br>实现this泛化</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Function</span> .prototype.uncurrying = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> obj = <span class=\"built_in\">Array</span>.prototype.shift.call(<span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.apply(obj,<span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> push = <span class=\"built_in\">Array</span>.prototype.push.uncurrying();</span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    push(<span class=\"built_in\">arguments</span>,<span class=\"number\">4</span>);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">arguments</span>) <span class=\"comment\">// 1,2,3,4</span></span><br><span class=\"line\">&#125;)(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">'push'</span>,<span class=\"string\">'shift'</span>,<span class=\"string\">'forEach'</span>];</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;ary.length;i++)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> fn = arr[i];</span><br><span class=\"line\">    <span class=\"built_in\">Array</span>[fn] = <span class=\"built_in\">Array</span>.prototype[fn].uncurrying();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">    <span class=\"string\">'length'</span>:<span class=\"number\">3</span>,</span><br><span class=\"line\">    <span class=\"string\">\"0\"</span>:<span class=\"number\">1</span>,</span><br><span class=\"line\">    <span class=\"string\">\"1\"</span>:<span class=\"number\">2</span>,</span><br><span class=\"line\">    <span class=\"string\">\"2\"</span>:<span class=\"number\">3</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">Array</span>.push(obj,<span class=\"number\">4</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Function</span>.prototype.uncurrying = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">Function</span>.prototype.call.apply(self,<span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"函数节流\"><a href=\"#函数节流\" class=\"headerlink\" title=\"函数节流\"></a>函数节流</h5><p>函数节流 主要解决 函数的触发不是由用户直接控制的，在某些场景下，函数有可能被非常频繁地调用，造成性能问题。</p>\n<p>主要出现在一下场景中：</p>\n<ol>\n<li>window.onresize</li>\n<li>mousemove 事件</li>\n<li>上传进度</li>\n</ol>\n<blockquote>\n<p>将即将被执行的函数用setTimeout延迟一段时间执行，如果该次延迟执行还没有完成，则忽略接下来调用该函数的请求。<br>接收两个参数：函数、延迟时间</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> throttle = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">fn,delay</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> timer;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> firsttime = <span class=\"literal\">true</span>;  <span class=\"comment\">//是否是第一次调用</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> args = <span class=\"built_in\">arguments</span>;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> _this = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(firsttime)&#123;</span><br><span class=\"line\">            fn.apply(_this,args);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(timer)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            timer = setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">                clearTimeout(timer);</span><br><span class=\"line\">                timer = <span class=\"literal\">null</span>;</span><br><span class=\"line\">                fn.apply(_this,args);</span><br><span class=\"line\">            &#125;,delay);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> throttle = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">fn,delay,interval</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> timer = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> pre = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> now = +<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</span><br><span class=\"line\">        <span class=\"keyword\">var</span> args = <span class=\"built_in\">arguments</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!pre)&#123;</span><br><span class=\"line\">            pre = now;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> remain = now - pre;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(interval &amp;&amp; remain &gt;=interval)&#123;</span><br><span class=\"line\">            fn.apply(<span class=\"literal\">null</span>,args);</span><br><span class=\"line\">            pre = now;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            clearTimeout(timer);</span><br><span class=\"line\">            timer = setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">                fn.apply(<span class=\"literal\">null</span>,args);</span><br><span class=\"line\">            &#125;,delay);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">window</span>.onscroll = throttle(fn,<span class=\"number\">500</span>,<span class=\"number\">2000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> time = +<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> fn = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"函数调用\"</span>+(+<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()-time));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"分时函数\"><a href=\"#分时函数\" class=\"headerlink\" title=\"分时函数\"></a>分时函数</h5><p>某些函数确实是用户主动调用的，但因为一些客观原因，这些函数会严重影响页面性能。<br>eg. 创建WebQQ的qq好友列表，如果一个好友用一个节点来表示，当在页面渲染这个列表的时候，可能要一次性往页面中创建成百上千个节点。</p>\n<p>解决方法    =====&gt;    timeChunk函数 （分时函数）<br>timeChunk 可以让创建节点的工作<strong>分批进行</strong>，比如把1秒创建1000个节点，改为每隔200ms创建8个节点</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> timeChunk  = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">arr,fn,cnt,interval</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> obj ,timer;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> len = arr.length;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> start = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i &lt; <span class=\"built_in\">Math</span>.min(cnt || <span class=\"number\">1</span>,arr.length);i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> obj = arr.shift();</span><br><span class=\"line\">            fn(obj);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        timer = setInterval(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(arr.length == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> clearInterval(timer);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            start();</span><br><span class=\"line\">        &#125;,interval);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"惰性加载函数\"><a href=\"#惰性加载函数\" class=\"headerlink\" title=\"惰性加载函数\"></a>惰性加载函数</h5><p>嗅探函数</p>\n<ol>\n<li>将嗅探浏览器的操作提前到代码加载的时候，在代码加载的时候就立刻进行一次判断，以便让addEvent返回一个包裹了正确逻辑的函数。</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> addEvent = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">window</span>.addEventListener)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ele,type,handler</span>)</span>&#123;</span><br><span class=\"line\">            ele.addEventListener(type,handler,<span class=\"literal\">false</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">window</span>.attachEvent)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ele,type,handler</span>)</span>&#123;</span><br><span class=\"line\">            ele.attachEvent(<span class=\"string\">'on'</span>+type,handler);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)()</span><br></pre></td></tr></table></figure>\n\n<p>但是如果没有使用过这个函数可能会导致多余的操作，也许会稍稍延长页面ready的时间，所以加入惰性载入方案。</p>\n<p><strong>在第一次进入条件分支之后，在函数  ‘内部重写’ 这个函数，重写之后函数就是我们期望的addEvent函数，在下次进入的时候，不再存在条件分支语句。</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> addEvent = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ele,type,handler</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">window</span>.addEventListener)&#123;</span><br><span class=\"line\">        addEvent = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ele,type,handler</span>)</span>&#123;</span><br><span class=\"line\">            ele.addEventListener(type,handler,<span class=\"literal\">false</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(<span class=\"built_in\">window</span>.attachEvent)&#123;</span><br><span class=\"line\">        addEvent = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ele,type,handler</span>)</span>&#123;</span><br><span class=\"line\">            ele.attachEvent(<span class=\"string\">'on'</span>+type,handler);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    addEvent(ele,type,handler);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n"},{"title":"React高阶组件","date":"2018-09-22T16:00:00.000Z","_content":"\n# 什么是高阶组件\n\n高阶组件只是**包装**了另外一个React组件的React组件\n\n高阶组件主要有两种方式来实现：\n\n1. 属性代理\n\n高阶组件操控传递给wrappedComponent的props\n\n2. 反向继承\n\n高阶组件继承 wrappedComponent\n<!-- more -->\n# 高阶组件用来做什么\n\n1. 代码复用，逻辑抽象，抽离底层\n2. 渲染劫持\n3. state 抽象和更改\n4. props更改\n\n# 高阶组件的实现方式\n\n## Props Proxy\n\n```javascript\nfunction ppHOC(wrappedComponent){\n    return class PP extends React.Component{\n        render(){\n            return <wrappedComponent {...this.props}/>\n        }\n    }\n}\n```\n\n可以看到，这里高阶组件的 render 方法返回了一个 type wrappedComponent 的 React Element（也就是被包装的那个组件），我们把高阶组件收到的 props 传递给它，因此得名 Props Proxy。\n\n### Props Proxy 可以做什么\n\n#### 更改 props\n\n```javascript\nfunction ppHOC(WrappedComponent) {\n  return class PP extends React.Component {\n    render() {\n      const newProps = {\n        user: currentLoggedInUser\n      }\n      return <WrappedComponent {...this.props} {...newProps}/>\n    }\n  }\n}\n```\n\n#### 通过 refs 获取组件实例\n\n你可以通过 ref 获取关键词 this（WrappedComponent 的实例），但是想要它生效，必须先经历一次正常的渲染过程来让 ref 得到计算，这意味着你需要在高阶组件的 render 方法中返回 WrappedComponent，让 React 进行 reconciliation 过程，这之后你就通过 ref 获取到这个 WrappedComponent 的实例了。\n\n```javascript\nfunction refsHOC(WrappedComponent) {\n  return class RefsHOC extends React.Component {\n    proc(wrappedComponentInstance) {\n      wrappedComponentInstance.method()\n    }\n    render() {\n      const props = Object.assign({}, this.props, {ref: this.proc.bind(this)})\n      return <WrappedComponent {...props}/>\n    }\n  }\n}\n```\n\n#### 抽象 state\n\n#### 把wrappedComponent与其他elements包装在一起\n\n## Inheritance Inversion\n\n```javascript\nfunction iiHOC(WrappedComponent) {\n  return class Enhancer extends WrappedComponent {\n    render() {\n      return super.render()\n    }\n  }\n}\n\n```\n返回的高阶组件类（Enhancer）继承了 WrappedComponent。这被叫做反向继承是因为 WrappedComponent 被动地被 Enhancer 继承，而不是 WrappedComponent 去继承 Enhancer。通过这种方式他们之间的关系倒转了。\n\n反向继承允许高阶组件通过 this 关键词获取 WrappedComponent，意味着它可以获取到 state，props，组件生命周期（component lifecycle）钩子，以及渲染方法（render）。\n\n我不会详细介绍你可以使用组件生命周期方法做什么，因为这是 React 的内容，而不是高阶组件的。但是请注意，你可以通过高阶组件来给 WrappedComponent 创建新的生命周期挂钩方法，别忘了调用 super.[lifecycleHook] 防止破坏 WrappedComponent。\n\n### Inheritance Inversion 可以做什么\n\n#### 渲染劫持\n\n叫做渲染劫持是因为高阶组件控制了 WrappedComponent 生成的渲染结果，并且可以做各种操作。\n通过渲染劫持你可以：\n\n『读取、添加、修改、删除』任何一个将被渲染的 React Element 的 props\n在渲染方法中读取或更改 React Elements tree，也就是 WrappedComponent 的 children\n根据条件不同，选择性的渲染子树\n给子树里的元素变更样式\n*渲染 指的是 WrappedComponent.render 方法\n\n#### 操作state\n","source":"_posts/2018-09-23-React高阶组件.md","raw":"---\ntitle: React高阶组件\ndate: 2018-09-23\ncategories: \n- FE\n- React\ntags:\n- React\n---\n\n# 什么是高阶组件\n\n高阶组件只是**包装**了另外一个React组件的React组件\n\n高阶组件主要有两种方式来实现：\n\n1. 属性代理\n\n高阶组件操控传递给wrappedComponent的props\n\n2. 反向继承\n\n高阶组件继承 wrappedComponent\n<!-- more -->\n# 高阶组件用来做什么\n\n1. 代码复用，逻辑抽象，抽离底层\n2. 渲染劫持\n3. state 抽象和更改\n4. props更改\n\n# 高阶组件的实现方式\n\n## Props Proxy\n\n```javascript\nfunction ppHOC(wrappedComponent){\n    return class PP extends React.Component{\n        render(){\n            return <wrappedComponent {...this.props}/>\n        }\n    }\n}\n```\n\n可以看到，这里高阶组件的 render 方法返回了一个 type wrappedComponent 的 React Element（也就是被包装的那个组件），我们把高阶组件收到的 props 传递给它，因此得名 Props Proxy。\n\n### Props Proxy 可以做什么\n\n#### 更改 props\n\n```javascript\nfunction ppHOC(WrappedComponent) {\n  return class PP extends React.Component {\n    render() {\n      const newProps = {\n        user: currentLoggedInUser\n      }\n      return <WrappedComponent {...this.props} {...newProps}/>\n    }\n  }\n}\n```\n\n#### 通过 refs 获取组件实例\n\n你可以通过 ref 获取关键词 this（WrappedComponent 的实例），但是想要它生效，必须先经历一次正常的渲染过程来让 ref 得到计算，这意味着你需要在高阶组件的 render 方法中返回 WrappedComponent，让 React 进行 reconciliation 过程，这之后你就通过 ref 获取到这个 WrappedComponent 的实例了。\n\n```javascript\nfunction refsHOC(WrappedComponent) {\n  return class RefsHOC extends React.Component {\n    proc(wrappedComponentInstance) {\n      wrappedComponentInstance.method()\n    }\n    render() {\n      const props = Object.assign({}, this.props, {ref: this.proc.bind(this)})\n      return <WrappedComponent {...props}/>\n    }\n  }\n}\n```\n\n#### 抽象 state\n\n#### 把wrappedComponent与其他elements包装在一起\n\n## Inheritance Inversion\n\n```javascript\nfunction iiHOC(WrappedComponent) {\n  return class Enhancer extends WrappedComponent {\n    render() {\n      return super.render()\n    }\n  }\n}\n\n```\n返回的高阶组件类（Enhancer）继承了 WrappedComponent。这被叫做反向继承是因为 WrappedComponent 被动地被 Enhancer 继承，而不是 WrappedComponent 去继承 Enhancer。通过这种方式他们之间的关系倒转了。\n\n反向继承允许高阶组件通过 this 关键词获取 WrappedComponent，意味着它可以获取到 state，props，组件生命周期（component lifecycle）钩子，以及渲染方法（render）。\n\n我不会详细介绍你可以使用组件生命周期方法做什么，因为这是 React 的内容，而不是高阶组件的。但是请注意，你可以通过高阶组件来给 WrappedComponent 创建新的生命周期挂钩方法，别忘了调用 super.[lifecycleHook] 防止破坏 WrappedComponent。\n\n### Inheritance Inversion 可以做什么\n\n#### 渲染劫持\n\n叫做渲染劫持是因为高阶组件控制了 WrappedComponent 生成的渲染结果，并且可以做各种操作。\n通过渲染劫持你可以：\n\n『读取、添加、修改、删除』任何一个将被渲染的 React Element 的 props\n在渲染方法中读取或更改 React Elements tree，也就是 WrappedComponent 的 children\n根据条件不同，选择性的渲染子树\n给子树里的元素变更样式\n*渲染 指的是 WrappedComponent.render 方法\n\n#### 操作state\n","slug":"2018-09-23-React高阶组件","published":1,"updated":"2020-03-01T12:31:54.934Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckreo13om001aytt543i35nmu","content":"<h1 id=\"什么是高阶组件\"><a href=\"#什么是高阶组件\" class=\"headerlink\" title=\"什么是高阶组件\"></a>什么是高阶组件</h1><p>高阶组件只是<strong>包装</strong>了另外一个React组件的React组件</p>\n<p>高阶组件主要有两种方式来实现：</p>\n<ol>\n<li>属性代理</li>\n</ol>\n<p>高阶组件操控传递给wrappedComponent的props</p>\n<ol start=\"2\">\n<li>反向继承</li>\n</ol>\n<p>高阶组件继承 wrappedComponent</p>\n<a id=\"more\"></a>\n<h1 id=\"高阶组件用来做什么\"><a href=\"#高阶组件用来做什么\" class=\"headerlink\" title=\"高阶组件用来做什么\"></a>高阶组件用来做什么</h1><ol>\n<li>代码复用，逻辑抽象，抽离底层</li>\n<li>渲染劫持</li>\n<li>state 抽象和更改</li>\n<li>props更改</li>\n</ol>\n<h1 id=\"高阶组件的实现方式\"><a href=\"#高阶组件的实现方式\" class=\"headerlink\" title=\"高阶组件的实现方式\"></a>高阶组件的实现方式</h1><h2 id=\"Props-Proxy\"><a href=\"#Props-Proxy\" class=\"headerlink\" title=\"Props Proxy\"></a>Props Proxy</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ppHOC</span>(<span class=\"params\">wrappedComponent</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PP</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span></span>&#123;</span><br><span class=\"line\">        render()&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">wrappedComponent</span> &#123;<span class=\"attr\">...this.props</span>&#125;/&gt;</span></span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以看到，这里高阶组件的 render 方法返回了一个 type wrappedComponent 的 React Element（也就是被包装的那个组件），我们把高阶组件收到的 props 传递给它，因此得名 Props Proxy。</p>\n<h3 id=\"Props-Proxy-可以做什么\"><a href=\"#Props-Proxy-可以做什么\" class=\"headerlink\" title=\"Props Proxy 可以做什么\"></a>Props Proxy 可以做什么</h3><h4 id=\"更改-props\"><a href=\"#更改-props\" class=\"headerlink\" title=\"更改 props\"></a>更改 props</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ppHOC</span>(<span class=\"params\">WrappedComponent</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PP</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">    render() &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> newProps = &#123;</span><br><span class=\"line\">        user: currentLoggedInUser</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">WrappedComponent</span> &#123;<span class=\"attr\">...this.props</span>&#125; &#123;<span class=\"attr\">...newProps</span>&#125;/&gt;</span></span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"通过-refs-获取组件实例\"><a href=\"#通过-refs-获取组件实例\" class=\"headerlink\" title=\"通过 refs 获取组件实例\"></a>通过 refs 获取组件实例</h4><p>你可以通过 ref 获取关键词 this（WrappedComponent 的实例），但是想要它生效，必须先经历一次正常的渲染过程来让 ref 得到计算，这意味着你需要在高阶组件的 render 方法中返回 WrappedComponent，让 React 进行 reconciliation 过程，这之后你就通过 ref 获取到这个 WrappedComponent 的实例了。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">refsHOC</span>(<span class=\"params\">WrappedComponent</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RefsHOC</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">    proc(wrappedComponentInstance) &#123;</span><br><span class=\"line\">      wrappedComponentInstance.method()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    render() &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> props = <span class=\"built_in\">Object</span>.assign(&#123;&#125;, <span class=\"keyword\">this</span>.props, &#123;<span class=\"attr\">ref</span>: <span class=\"keyword\">this</span>.proc.bind(<span class=\"keyword\">this</span>)&#125;)</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">WrappedComponent</span> &#123;<span class=\"attr\">...props</span>&#125;/&gt;</span></span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"抽象-state\"><a href=\"#抽象-state\" class=\"headerlink\" title=\"抽象 state\"></a>抽象 state</h4><h4 id=\"把wrappedComponent与其他elements包装在一起\"><a href=\"#把wrappedComponent与其他elements包装在一起\" class=\"headerlink\" title=\"把wrappedComponent与其他elements包装在一起\"></a>把wrappedComponent与其他elements包装在一起</h4><h2 id=\"Inheritance-Inversion\"><a href=\"#Inheritance-Inversion\" class=\"headerlink\" title=\"Inheritance Inversion\"></a>Inheritance Inversion</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">iiHOC</span>(<span class=\"params\">WrappedComponent</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Enhancer</span> <span class=\"keyword\">extends</span> <span class=\"title\">WrappedComponent</span> </span>&#123;</span><br><span class=\"line\">    render() &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.render()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>返回的高阶组件类（Enhancer）继承了 WrappedComponent。这被叫做反向继承是因为 WrappedComponent 被动地被 Enhancer 继承，而不是 WrappedComponent 去继承 Enhancer。通过这种方式他们之间的关系倒转了。</p>\n<p>反向继承允许高阶组件通过 this 关键词获取 WrappedComponent，意味着它可以获取到 state，props，组件生命周期（component lifecycle）钩子，以及渲染方法（render）。</p>\n<p>我不会详细介绍你可以使用组件生命周期方法做什么，因为这是 React 的内容，而不是高阶组件的。但是请注意，你可以通过高阶组件来给 WrappedComponent 创建新的生命周期挂钩方法，别忘了调用 super.[lifecycleHook] 防止破坏 WrappedComponent。</p>\n<h3 id=\"Inheritance-Inversion-可以做什么\"><a href=\"#Inheritance-Inversion-可以做什么\" class=\"headerlink\" title=\"Inheritance Inversion 可以做什么\"></a>Inheritance Inversion 可以做什么</h3><h4 id=\"渲染劫持\"><a href=\"#渲染劫持\" class=\"headerlink\" title=\"渲染劫持\"></a>渲染劫持</h4><p>叫做渲染劫持是因为高阶组件控制了 WrappedComponent 生成的渲染结果，并且可以做各种操作。<br>通过渲染劫持你可以：</p>\n<p>『读取、添加、修改、删除』任何一个将被渲染的 React Element 的 props<br>在渲染方法中读取或更改 React Elements tree，也就是 WrappedComponent 的 children<br>根据条件不同，选择性的渲染子树<br>给子树里的元素变更样式<br>*渲染 指的是 WrappedComponent.render 方法</p>\n<h4 id=\"操作state\"><a href=\"#操作state\" class=\"headerlink\" title=\"操作state\"></a>操作state</h4>","site":{"data":{}},"excerpt":"<h1 id=\"什么是高阶组件\"><a href=\"#什么是高阶组件\" class=\"headerlink\" title=\"什么是高阶组件\"></a>什么是高阶组件</h1><p>高阶组件只是<strong>包装</strong>了另外一个React组件的React组件</p>\n<p>高阶组件主要有两种方式来实现：</p>\n<ol>\n<li>属性代理</li>\n</ol>\n<p>高阶组件操控传递给wrappedComponent的props</p>\n<ol start=\"2\">\n<li>反向继承</li>\n</ol>\n<p>高阶组件继承 wrappedComponent</p>","more":"<h1 id=\"高阶组件用来做什么\"><a href=\"#高阶组件用来做什么\" class=\"headerlink\" title=\"高阶组件用来做什么\"></a>高阶组件用来做什么</h1><ol>\n<li>代码复用，逻辑抽象，抽离底层</li>\n<li>渲染劫持</li>\n<li>state 抽象和更改</li>\n<li>props更改</li>\n</ol>\n<h1 id=\"高阶组件的实现方式\"><a href=\"#高阶组件的实现方式\" class=\"headerlink\" title=\"高阶组件的实现方式\"></a>高阶组件的实现方式</h1><h2 id=\"Props-Proxy\"><a href=\"#Props-Proxy\" class=\"headerlink\" title=\"Props Proxy\"></a>Props Proxy</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ppHOC</span>(<span class=\"params\">wrappedComponent</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PP</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span></span>&#123;</span><br><span class=\"line\">        render()&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">wrappedComponent</span> &#123;<span class=\"attr\">...this.props</span>&#125;/&gt;</span></span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以看到，这里高阶组件的 render 方法返回了一个 type wrappedComponent 的 React Element（也就是被包装的那个组件），我们把高阶组件收到的 props 传递给它，因此得名 Props Proxy。</p>\n<h3 id=\"Props-Proxy-可以做什么\"><a href=\"#Props-Proxy-可以做什么\" class=\"headerlink\" title=\"Props Proxy 可以做什么\"></a>Props Proxy 可以做什么</h3><h4 id=\"更改-props\"><a href=\"#更改-props\" class=\"headerlink\" title=\"更改 props\"></a>更改 props</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ppHOC</span>(<span class=\"params\">WrappedComponent</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PP</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">    render() &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> newProps = &#123;</span><br><span class=\"line\">        user: currentLoggedInUser</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">WrappedComponent</span> &#123;<span class=\"attr\">...this.props</span>&#125; &#123;<span class=\"attr\">...newProps</span>&#125;/&gt;</span></span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"通过-refs-获取组件实例\"><a href=\"#通过-refs-获取组件实例\" class=\"headerlink\" title=\"通过 refs 获取组件实例\"></a>通过 refs 获取组件实例</h4><p>你可以通过 ref 获取关键词 this（WrappedComponent 的实例），但是想要它生效，必须先经历一次正常的渲染过程来让 ref 得到计算，这意味着你需要在高阶组件的 render 方法中返回 WrappedComponent，让 React 进行 reconciliation 过程，这之后你就通过 ref 获取到这个 WrappedComponent 的实例了。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">refsHOC</span>(<span class=\"params\">WrappedComponent</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RefsHOC</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">    proc(wrappedComponentInstance) &#123;</span><br><span class=\"line\">      wrappedComponentInstance.method()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    render() &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> props = <span class=\"built_in\">Object</span>.assign(&#123;&#125;, <span class=\"keyword\">this</span>.props, &#123;<span class=\"attr\">ref</span>: <span class=\"keyword\">this</span>.proc.bind(<span class=\"keyword\">this</span>)&#125;)</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">WrappedComponent</span> &#123;<span class=\"attr\">...props</span>&#125;/&gt;</span></span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"抽象-state\"><a href=\"#抽象-state\" class=\"headerlink\" title=\"抽象 state\"></a>抽象 state</h4><h4 id=\"把wrappedComponent与其他elements包装在一起\"><a href=\"#把wrappedComponent与其他elements包装在一起\" class=\"headerlink\" title=\"把wrappedComponent与其他elements包装在一起\"></a>把wrappedComponent与其他elements包装在一起</h4><h2 id=\"Inheritance-Inversion\"><a href=\"#Inheritance-Inversion\" class=\"headerlink\" title=\"Inheritance Inversion\"></a>Inheritance Inversion</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">iiHOC</span>(<span class=\"params\">WrappedComponent</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Enhancer</span> <span class=\"keyword\">extends</span> <span class=\"title\">WrappedComponent</span> </span>&#123;</span><br><span class=\"line\">    render() &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.render()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>返回的高阶组件类（Enhancer）继承了 WrappedComponent。这被叫做反向继承是因为 WrappedComponent 被动地被 Enhancer 继承，而不是 WrappedComponent 去继承 Enhancer。通过这种方式他们之间的关系倒转了。</p>\n<p>反向继承允许高阶组件通过 this 关键词获取 WrappedComponent，意味着它可以获取到 state，props，组件生命周期（component lifecycle）钩子，以及渲染方法（render）。</p>\n<p>我不会详细介绍你可以使用组件生命周期方法做什么，因为这是 React 的内容，而不是高阶组件的。但是请注意，你可以通过高阶组件来给 WrappedComponent 创建新的生命周期挂钩方法，别忘了调用 super.[lifecycleHook] 防止破坏 WrappedComponent。</p>\n<h3 id=\"Inheritance-Inversion-可以做什么\"><a href=\"#Inheritance-Inversion-可以做什么\" class=\"headerlink\" title=\"Inheritance Inversion 可以做什么\"></a>Inheritance Inversion 可以做什么</h3><h4 id=\"渲染劫持\"><a href=\"#渲染劫持\" class=\"headerlink\" title=\"渲染劫持\"></a>渲染劫持</h4><p>叫做渲染劫持是因为高阶组件控制了 WrappedComponent 生成的渲染结果，并且可以做各种操作。<br>通过渲染劫持你可以：</p>\n<p>『读取、添加、修改、删除』任何一个将被渲染的 React Element 的 props<br>在渲染方法中读取或更改 React Elements tree，也就是 WrappedComponent 的 children<br>根据条件不同，选择性的渲染子树<br>给子树里的元素变更样式<br>*渲染 指的是 WrappedComponent.render 方法</p>\n<h4 id=\"操作state\"><a href=\"#操作state\" class=\"headerlink\" title=\"操作state\"></a>操作state</h4>"},{"title":"XSS vs CSRF","date":"2018-09-19T16:00:00.000Z","_content":"\n最近面试被问了好多次 XSS和CSRF的问题，，因此来总结一下以增强记忆\n\n# XSS vs CSRF\n\n## XSS\n\nCross-Site Scripting\n\nXSS： 通过客户端脚本语言（最常见如：JavaScript）\n在一个论坛发帖中发布一段恶意的JavaScript代码就是脚本注入，如果这个代码内容有请求外部服务器，那么就叫做XSS！\n\n## CSRF\n\nCSRF：又称XSRF，冒充用户发起请求（在用户不知情的情况下）,完成一些违背用户意愿的请求（如恶意发帖，删帖，改密码，发邮件等）。\n\n## PK Round1\n通常来说CSRF是由XSS实现的，所以CSRF时常也被称为XSRF[用XSS的方式实现伪造请求]（但实现的方式绝不止一种，还可以直接通过命令行模式（命令行敲命令来发起请求）直接伪造请求[只要通过合法验证即可]）。\nXSS更偏向于代码实现（即写一段拥有跨站请求功能的JavaScript脚本注入到一条帖子里，然后有用户访问了这个帖子，这就算是中了XSS攻击了），CSRF更偏向于一个攻击结果，只要发起了冒牌请求那么就算是CSRF了。\n\n## PK Round2\n\n就我的理解来看， XSS就是通过向网站恶意代码的注入，，劫持用户信息或者其他用户浏览网站时的操作，进行一些恶意攻击\nCSRF就是在已经获取到用户信息的条件下，伪造用户的请求\n\n### defend\n\n！！不信任任何外来输入\n\n敏感字符过滤 （明文 和 密文）转义\n\n","source":"_posts/2018-09-20-XSS和CSRF认知.md","raw":"---\ntitle: XSS vs CSRF\ndate: 2018-09-20\ncategories: \n- FE\n- Network security\ntags:\n- security\n---\n\n最近面试被问了好多次 XSS和CSRF的问题，，因此来总结一下以增强记忆\n\n# XSS vs CSRF\n\n## XSS\n\nCross-Site Scripting\n\nXSS： 通过客户端脚本语言（最常见如：JavaScript）\n在一个论坛发帖中发布一段恶意的JavaScript代码就是脚本注入，如果这个代码内容有请求外部服务器，那么就叫做XSS！\n\n## CSRF\n\nCSRF：又称XSRF，冒充用户发起请求（在用户不知情的情况下）,完成一些违背用户意愿的请求（如恶意发帖，删帖，改密码，发邮件等）。\n\n## PK Round1\n通常来说CSRF是由XSS实现的，所以CSRF时常也被称为XSRF[用XSS的方式实现伪造请求]（但实现的方式绝不止一种，还可以直接通过命令行模式（命令行敲命令来发起请求）直接伪造请求[只要通过合法验证即可]）。\nXSS更偏向于代码实现（即写一段拥有跨站请求功能的JavaScript脚本注入到一条帖子里，然后有用户访问了这个帖子，这就算是中了XSS攻击了），CSRF更偏向于一个攻击结果，只要发起了冒牌请求那么就算是CSRF了。\n\n## PK Round2\n\n就我的理解来看， XSS就是通过向网站恶意代码的注入，，劫持用户信息或者其他用户浏览网站时的操作，进行一些恶意攻击\nCSRF就是在已经获取到用户信息的条件下，伪造用户的请求\n\n### defend\n\n！！不信任任何外来输入\n\n敏感字符过滤 （明文 和 密文）转义\n\n","slug":"2018-09-20-XSS和CSRF认知","published":1,"updated":"2020-03-01T12:09:37.523Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckreo13on001eytt57hby5f4e","content":"<p>最近面试被问了好多次 XSS和CSRF的问题，，因此来总结一下以增强记忆</p>\n<h1 id=\"XSS-vs-CSRF\"><a href=\"#XSS-vs-CSRF\" class=\"headerlink\" title=\"XSS vs CSRF\"></a>XSS vs CSRF</h1><h2 id=\"XSS\"><a href=\"#XSS\" class=\"headerlink\" title=\"XSS\"></a>XSS</h2><p>Cross-Site Scripting</p>\n<p>XSS： 通过客户端脚本语言（最常见如：JavaScript）<br>在一个论坛发帖中发布一段恶意的JavaScript代码就是脚本注入，如果这个代码内容有请求外部服务器，那么就叫做XSS！</p>\n<h2 id=\"CSRF\"><a href=\"#CSRF\" class=\"headerlink\" title=\"CSRF\"></a>CSRF</h2><p>CSRF：又称XSRF，冒充用户发起请求（在用户不知情的情况下）,完成一些违背用户意愿的请求（如恶意发帖，删帖，改密码，发邮件等）。</p>\n<h2 id=\"PK-Round1\"><a href=\"#PK-Round1\" class=\"headerlink\" title=\"PK Round1\"></a>PK Round1</h2><p>通常来说CSRF是由XSS实现的，所以CSRF时常也被称为XSRF[用XSS的方式实现伪造请求]（但实现的方式绝不止一种，还可以直接通过命令行模式（命令行敲命令来发起请求）直接伪造请求[只要通过合法验证即可]）。<br>XSS更偏向于代码实现（即写一段拥有跨站请求功能的JavaScript脚本注入到一条帖子里，然后有用户访问了这个帖子，这就算是中了XSS攻击了），CSRF更偏向于一个攻击结果，只要发起了冒牌请求那么就算是CSRF了。</p>\n<h2 id=\"PK-Round2\"><a href=\"#PK-Round2\" class=\"headerlink\" title=\"PK Round2\"></a>PK Round2</h2><p>就我的理解来看， XSS就是通过向网站恶意代码的注入，，劫持用户信息或者其他用户浏览网站时的操作，进行一些恶意攻击<br>CSRF就是在已经获取到用户信息的条件下，伪造用户的请求</p>\n<h3 id=\"defend\"><a href=\"#defend\" class=\"headerlink\" title=\"defend\"></a>defend</h3><p>！！不信任任何外来输入</p>\n<p>敏感字符过滤 （明文 和 密文）转义</p>\n","site":{"data":{}},"excerpt":"","more":"<p>最近面试被问了好多次 XSS和CSRF的问题，，因此来总结一下以增强记忆</p>\n<h1 id=\"XSS-vs-CSRF\"><a href=\"#XSS-vs-CSRF\" class=\"headerlink\" title=\"XSS vs CSRF\"></a>XSS vs CSRF</h1><h2 id=\"XSS\"><a href=\"#XSS\" class=\"headerlink\" title=\"XSS\"></a>XSS</h2><p>Cross-Site Scripting</p>\n<p>XSS： 通过客户端脚本语言（最常见如：JavaScript）<br>在一个论坛发帖中发布一段恶意的JavaScript代码就是脚本注入，如果这个代码内容有请求外部服务器，那么就叫做XSS！</p>\n<h2 id=\"CSRF\"><a href=\"#CSRF\" class=\"headerlink\" title=\"CSRF\"></a>CSRF</h2><p>CSRF：又称XSRF，冒充用户发起请求（在用户不知情的情况下）,完成一些违背用户意愿的请求（如恶意发帖，删帖，改密码，发邮件等）。</p>\n<h2 id=\"PK-Round1\"><a href=\"#PK-Round1\" class=\"headerlink\" title=\"PK Round1\"></a>PK Round1</h2><p>通常来说CSRF是由XSS实现的，所以CSRF时常也被称为XSRF[用XSS的方式实现伪造请求]（但实现的方式绝不止一种，还可以直接通过命令行模式（命令行敲命令来发起请求）直接伪造请求[只要通过合法验证即可]）。<br>XSS更偏向于代码实现（即写一段拥有跨站请求功能的JavaScript脚本注入到一条帖子里，然后有用户访问了这个帖子，这就算是中了XSS攻击了），CSRF更偏向于一个攻击结果，只要发起了冒牌请求那么就算是CSRF了。</p>\n<h2 id=\"PK-Round2\"><a href=\"#PK-Round2\" class=\"headerlink\" title=\"PK Round2\"></a>PK Round2</h2><p>就我的理解来看， XSS就是通过向网站恶意代码的注入，，劫持用户信息或者其他用户浏览网站时的操作，进行一些恶意攻击<br>CSRF就是在已经获取到用户信息的条件下，伪造用户的请求</p>\n<h3 id=\"defend\"><a href=\"#defend\" class=\"headerlink\" title=\"defend\"></a>defend</h3><p>！！不信任任何外来输入</p>\n<p>敏感字符过滤 （明文 和 密文）转义</p>\n"},{"title":"Promise总结","date":"2018-03-26T16:00:00.000Z","_content":"\n\n前几天去头条面试，用promise封装fetch加入超时处理的问题上没答出来，es6了解一些但是用的不多，所以很多细节都没仔细考虑，因此这篇就总结一下promise吧~~~~\n\n# Promise\n\n异步编程的解决方案，简单说就是一个容器，里面保存着某个未来才会结束的事件（通常是一个异步操作）的结果\n\npromise 对象代表一个异步操作。\n\n## 状态\n\npromise 有三种状态：\n\n1. pending\n2. resolved\n3. rejected\n\n\n## 特点\n1. 对象的\b状态不受外部影响  只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。resolve == pending ->resolved/reject == pending->rejected\n\n2. 一旦状态改变，就不会再变，任何时候都可以得到这个结果\n\n\n## 用法\n\nPromise 构造函数 接受一个函数作为参数，该函数的；两个参数分别是resolve 和reject\n\nPromise实例生成以后，可以用then方法分别指定Resolved状态和Reject状态的回调函数。\n\n### then方法可以接受两个回调函数作为参数。\n\n第一个回调函数是Promise对象的状态变为Resolved时调用，\n\n第二个回调函数是Promise对象的状态变为Reject时调用。\n\n其中，第二个函数是可选的，不一定要提供。这两个函数都接受Promise对象传出的值作为参数。\n\n```javascript\n\nfunction timeout = (ms)=>{\n    return new Promise((resolve,reject) => {\n        setTimeout(resolve,ms);\n    })\n}\ntimeout(3000).then((value)=>{\n    console.log(value);\n})\n \n\n//用promise封装一个ajax函数\n\nvar _ajax = (url) =>{\n    var promise = new Promise((resolve,reject) =>{\n        var request = new XMLHttpRequest();\n        request.open('GET',url);\n        request.onreadystatechange = ()=>{\n            if(this.readystate != 4){\n                return;\n            }else{\n                if(this.status == 200){\n                    resolve(this.response);\n                }else{\n                    reject(new Error(this.statustext));\n                }\n            }\n        }\n        client.responseType = 'json';\n        client.setRequestHeader('Accept','application/json');\n        client.send();\n    })\n    return promise;\n}\n```\n\n## Promise.prototype.then()\n\n### 作用\n\n为promise实例添加状态改变时的回调函数\n\n### 返回\nthen方法返回的是一个新的promise实例\n\n第一个回调函数完成以后，会将返回结果作为参数，传入第二个回调函数。\n\n## Promise.all()\n\n### 作用\n\nPromise.all方法用于将多个Promise实例，包装成一个新的Promise实例。\n\n### 使用\n\nPromise.all方法接受一个数组作为参数，p1、p2、p3都是Promise对象的实例，如果不是，就会先调用下面讲到的Promise.resolve方法，将参数转为Promise实例，再进一步处理。（Promise.all方法的参数可以不是数组，但必须具有Iterator接口，且返回的每个成员都是Promise实例。）\n\np的状态由p1、p2、p3决定，分成两种情况。\n\n（1）只有p1、p2、p3的状态都变成fulfilled，p的状态才会变成fulfilled，此时p1、p2、p3的返回值组成一个数组，传递给p的回调函数。\n\n（2）只要p1、p2、p3之中有一个被rejected，p的状态就变成rejected，此时第一个被reject的实例的返回值，会传递给p的回调函数。\n\n\n## Promise.race()\n\n### \b使用\n\n只要p1、p2、p3之中有一个实例率先改变状态，p的状态就跟着改变。那个率先改变的Promise实例的返回值，就传递给p的回调函数。\n\nPromise.race方法的参数与Promise.all方法一样，如果不是Promise实例，就会先调用下面讲到的Promise.resolve方法，将参数转为Promise实例，再进一步处理。\n\n下面是一个例子，如果指定时间内没有获得结果，就将Promise的状态变为reject，否则变为resolve。\n\nfetch加入超时处理\n\n```javascript\nvar p = Promise.race([fetch(url),new Promise((resolve,reject) =>{\n    setTimeout(()=>{\n        reject(new Error('超时'));\n    },3000);\n})]);\np.then(response => console.log(response));\np.catch(error => console.log(error));\n```\n\n","source":"_posts/2018-03-27-Promise总结.md","raw":"---\ntitle: Promise总结\ndate: 2018-03-27\ncategories: \n- FE\n- es6\ntags:\n- es6\n- Promise\n---\n\n\n前几天去头条面试，用promise封装fetch加入超时处理的问题上没答出来，es6了解一些但是用的不多，所以很多细节都没仔细考虑，因此这篇就总结一下promise吧~~~~\n\n# Promise\n\n异步编程的解决方案，简单说就是一个容器，里面保存着某个未来才会结束的事件（通常是一个异步操作）的结果\n\npromise 对象代表一个异步操作。\n\n## 状态\n\npromise 有三种状态：\n\n1. pending\n2. resolved\n3. rejected\n\n\n## 特点\n1. 对象的\b状态不受外部影响  只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。resolve == pending ->resolved/reject == pending->rejected\n\n2. 一旦状态改变，就不会再变，任何时候都可以得到这个结果\n\n\n## 用法\n\nPromise 构造函数 接受一个函数作为参数，该函数的；两个参数分别是resolve 和reject\n\nPromise实例生成以后，可以用then方法分别指定Resolved状态和Reject状态的回调函数。\n\n### then方法可以接受两个回调函数作为参数。\n\n第一个回调函数是Promise对象的状态变为Resolved时调用，\n\n第二个回调函数是Promise对象的状态变为Reject时调用。\n\n其中，第二个函数是可选的，不一定要提供。这两个函数都接受Promise对象传出的值作为参数。\n\n```javascript\n\nfunction timeout = (ms)=>{\n    return new Promise((resolve,reject) => {\n        setTimeout(resolve,ms);\n    })\n}\ntimeout(3000).then((value)=>{\n    console.log(value);\n})\n \n\n//用promise封装一个ajax函数\n\nvar _ajax = (url) =>{\n    var promise = new Promise((resolve,reject) =>{\n        var request = new XMLHttpRequest();\n        request.open('GET',url);\n        request.onreadystatechange = ()=>{\n            if(this.readystate != 4){\n                return;\n            }else{\n                if(this.status == 200){\n                    resolve(this.response);\n                }else{\n                    reject(new Error(this.statustext));\n                }\n            }\n        }\n        client.responseType = 'json';\n        client.setRequestHeader('Accept','application/json');\n        client.send();\n    })\n    return promise;\n}\n```\n\n## Promise.prototype.then()\n\n### 作用\n\n为promise实例添加状态改变时的回调函数\n\n### 返回\nthen方法返回的是一个新的promise实例\n\n第一个回调函数完成以后，会将返回结果作为参数，传入第二个回调函数。\n\n## Promise.all()\n\n### 作用\n\nPromise.all方法用于将多个Promise实例，包装成一个新的Promise实例。\n\n### 使用\n\nPromise.all方法接受一个数组作为参数，p1、p2、p3都是Promise对象的实例，如果不是，就会先调用下面讲到的Promise.resolve方法，将参数转为Promise实例，再进一步处理。（Promise.all方法的参数可以不是数组，但必须具有Iterator接口，且返回的每个成员都是Promise实例。）\n\np的状态由p1、p2、p3决定，分成两种情况。\n\n（1）只有p1、p2、p3的状态都变成fulfilled，p的状态才会变成fulfilled，此时p1、p2、p3的返回值组成一个数组，传递给p的回调函数。\n\n（2）只要p1、p2、p3之中有一个被rejected，p的状态就变成rejected，此时第一个被reject的实例的返回值，会传递给p的回调函数。\n\n\n## Promise.race()\n\n### \b使用\n\n只要p1、p2、p3之中有一个实例率先改变状态，p的状态就跟着改变。那个率先改变的Promise实例的返回值，就传递给p的回调函数。\n\nPromise.race方法的参数与Promise.all方法一样，如果不是Promise实例，就会先调用下面讲到的Promise.resolve方法，将参数转为Promise实例，再进一步处理。\n\n下面是一个例子，如果指定时间内没有获得结果，就将Promise的状态变为reject，否则变为resolve。\n\nfetch加入超时处理\n\n```javascript\nvar p = Promise.race([fetch(url),new Promise((resolve,reject) =>{\n    setTimeout(()=>{\n        reject(new Error('超时'));\n    },3000);\n})]);\np.then(response => console.log(response));\np.catch(error => console.log(error));\n```\n\n","slug":"2018-03-27-Promise总结","published":1,"updated":"2020-03-01T12:09:37.522Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckreo13oo001hytt5dokwcvrr","content":"<p>前几天去头条面试，用promise封装fetch加入超时处理的问题上没答出来，es6了解一些但是用的不多，所以很多细节都没仔细考虑，因此这篇就总结一下promise吧<del>~</del></p>\n<h1 id=\"Promise\"><a href=\"#Promise\" class=\"headerlink\" title=\"Promise\"></a>Promise</h1><p>异步编程的解决方案，简单说就是一个容器，里面保存着某个未来才会结束的事件（通常是一个异步操作）的结果</p>\n<p>promise 对象代表一个异步操作。</p>\n<h2 id=\"状态\"><a href=\"#状态\" class=\"headerlink\" title=\"状态\"></a>状态</h2><p>promise 有三种状态：</p>\n<ol>\n<li>pending</li>\n<li>resolved</li>\n<li>rejected</li>\n</ol>\n<h2 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h2><ol>\n<li><p>对象的\b状态不受外部影响  只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。resolve == pending -&gt;resolved/reject == pending-&gt;rejected</p>\n</li>\n<li><p>一旦状态改变，就不会再变，任何时候都可以得到这个结果</p>\n</li>\n</ol>\n<h2 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a>用法</h2><p>Promise 构造函数 接受一个函数作为参数，该函数的；两个参数分别是resolve 和reject</p>\n<p>Promise实例生成以后，可以用then方法分别指定Resolved状态和Reject状态的回调函数。</p>\n<h3 id=\"then方法可以接受两个回调函数作为参数。\"><a href=\"#then方法可以接受两个回调函数作为参数。\" class=\"headerlink\" title=\"then方法可以接受两个回调函数作为参数。\"></a>then方法可以接受两个回调函数作为参数。</h3><p>第一个回调函数是Promise对象的状态变为Resolved时调用，</p>\n<p>第二个回调函数是Promise对象的状态变为Reject时调用。</p>\n<p>其中，第二个函数是可选的，不一定要提供。这两个函数都接受Promise对象传出的值作为参数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">timeout</span> = (<span class=\"params\">ms</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve,reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        setTimeout(resolve,ms);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">timeout(<span class=\"number\">3000</span>).then(<span class=\"function\">(<span class=\"params\">value</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(value);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//用promise封装一个ajax函数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> _ajax = <span class=\"function\">(<span class=\"params\">url</span>) =&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve,reject</span>) =&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> request = <span class=\"keyword\">new</span> XMLHttpRequest();</span><br><span class=\"line\">        request.open(<span class=\"string\">'GET'</span>,url);</span><br><span class=\"line\">        request.onreadystatechange = <span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.readystate != <span class=\"number\">4</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.status == <span class=\"number\">200</span>)&#123;</span><br><span class=\"line\">                    resolve(<span class=\"keyword\">this</span>.response);</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    reject(<span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"keyword\">this</span>.statustext));</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        client.responseType = <span class=\"string\">'json'</span>;</span><br><span class=\"line\">        client.setRequestHeader(<span class=\"string\">'Accept'</span>,<span class=\"string\">'application/json'</span>);</span><br><span class=\"line\">        client.send();</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> promise;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Promise-prototype-then\"><a href=\"#Promise-prototype-then\" class=\"headerlink\" title=\"Promise.prototype.then()\"></a>Promise.prototype.then()</h2><h3 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h3><p>为promise实例添加状态改变时的回调函数</p>\n<h3 id=\"返回\"><a href=\"#返回\" class=\"headerlink\" title=\"返回\"></a>返回</h3><p>then方法返回的是一个新的promise实例</p>\n<p>第一个回调函数完成以后，会将返回结果作为参数，传入第二个回调函数。</p>\n<h2 id=\"Promise-all\"><a href=\"#Promise-all\" class=\"headerlink\" title=\"Promise.all()\"></a>Promise.all()</h2><h3 id=\"作用-1\"><a href=\"#作用-1\" class=\"headerlink\" title=\"作用\"></a>作用</h3><p>Promise.all方法用于将多个Promise实例，包装成一个新的Promise实例。</p>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><p>Promise.all方法接受一个数组作为参数，p1、p2、p3都是Promise对象的实例，如果不是，就会先调用下面讲到的Promise.resolve方法，将参数转为Promise实例，再进一步处理。（Promise.all方法的参数可以不是数组，但必须具有Iterator接口，且返回的每个成员都是Promise实例。）</p>\n<p>p的状态由p1、p2、p3决定，分成两种情况。</p>\n<p>（1）只有p1、p2、p3的状态都变成fulfilled，p的状态才会变成fulfilled，此时p1、p2、p3的返回值组成一个数组，传递给p的回调函数。</p>\n<p>（2）只要p1、p2、p3之中有一个被rejected，p的状态就变成rejected，此时第一个被reject的实例的返回值，会传递给p的回调函数。</p>\n<h2 id=\"Promise-race\"><a href=\"#Promise-race\" class=\"headerlink\" title=\"Promise.race()\"></a>Promise.race()</h2><h3 id=\"使用-1\"><a href=\"#使用-1\" class=\"headerlink\" title=\"\b使用\"></a>\b使用</h3><p>只要p1、p2、p3之中有一个实例率先改变状态，p的状态就跟着改变。那个率先改变的Promise实例的返回值，就传递给p的回调函数。</p>\n<p>Promise.race方法的参数与Promise.all方法一样，如果不是Promise实例，就会先调用下面讲到的Promise.resolve方法，将参数转为Promise实例，再进一步处理。</p>\n<p>下面是一个例子，如果指定时间内没有获得结果，就将Promise的状态变为reject，否则变为resolve。</p>\n<p>fetch加入超时处理</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"built_in\">Promise</span>.race([fetch(url),<span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve,reject</span>) =&gt;</span>&#123;</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span><br><span class=\"line\">        reject(<span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'超时'</span>));</span><br><span class=\"line\">    &#125;,<span class=\"number\">3000</span>);</span><br><span class=\"line\">&#125;)]);</span><br><span class=\"line\">p.then(<span class=\"function\"><span class=\"params\">response</span> =&gt;</span> <span class=\"built_in\">console</span>.log(response));</span><br><span class=\"line\">p.catch(<span class=\"function\"><span class=\"params\">error</span> =&gt;</span> <span class=\"built_in\">console</span>.log(error));</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<p>前几天去头条面试，用promise封装fetch加入超时处理的问题上没答出来，es6了解一些但是用的不多，所以很多细节都没仔细考虑，因此这篇就总结一下promise吧<del>~</del></p>\n<h1 id=\"Promise\"><a href=\"#Promise\" class=\"headerlink\" title=\"Promise\"></a>Promise</h1><p>异步编程的解决方案，简单说就是一个容器，里面保存着某个未来才会结束的事件（通常是一个异步操作）的结果</p>\n<p>promise 对象代表一个异步操作。</p>\n<h2 id=\"状态\"><a href=\"#状态\" class=\"headerlink\" title=\"状态\"></a>状态</h2><p>promise 有三种状态：</p>\n<ol>\n<li>pending</li>\n<li>resolved</li>\n<li>rejected</li>\n</ol>\n<h2 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h2><ol>\n<li><p>对象的\b状态不受外部影响  只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。resolve == pending -&gt;resolved/reject == pending-&gt;rejected</p>\n</li>\n<li><p>一旦状态改变，就不会再变，任何时候都可以得到这个结果</p>\n</li>\n</ol>\n<h2 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a>用法</h2><p>Promise 构造函数 接受一个函数作为参数，该函数的；两个参数分别是resolve 和reject</p>\n<p>Promise实例生成以后，可以用then方法分别指定Resolved状态和Reject状态的回调函数。</p>\n<h3 id=\"then方法可以接受两个回调函数作为参数。\"><a href=\"#then方法可以接受两个回调函数作为参数。\" class=\"headerlink\" title=\"then方法可以接受两个回调函数作为参数。\"></a>then方法可以接受两个回调函数作为参数。</h3><p>第一个回调函数是Promise对象的状态变为Resolved时调用，</p>\n<p>第二个回调函数是Promise对象的状态变为Reject时调用。</p>\n<p>其中，第二个函数是可选的，不一定要提供。这两个函数都接受Promise对象传出的值作为参数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">timeout</span> = (<span class=\"params\">ms</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve,reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        setTimeout(resolve,ms);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">timeout(<span class=\"number\">3000</span>).then(<span class=\"function\">(<span class=\"params\">value</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(value);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//用promise封装一个ajax函数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> _ajax = <span class=\"function\">(<span class=\"params\">url</span>) =&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve,reject</span>) =&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> request = <span class=\"keyword\">new</span> XMLHttpRequest();</span><br><span class=\"line\">        request.open(<span class=\"string\">'GET'</span>,url);</span><br><span class=\"line\">        request.onreadystatechange = <span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.readystate != <span class=\"number\">4</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.status == <span class=\"number\">200</span>)&#123;</span><br><span class=\"line\">                    resolve(<span class=\"keyword\">this</span>.response);</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    reject(<span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"keyword\">this</span>.statustext));</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        client.responseType = <span class=\"string\">'json'</span>;</span><br><span class=\"line\">        client.setRequestHeader(<span class=\"string\">'Accept'</span>,<span class=\"string\">'application/json'</span>);</span><br><span class=\"line\">        client.send();</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> promise;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Promise-prototype-then\"><a href=\"#Promise-prototype-then\" class=\"headerlink\" title=\"Promise.prototype.then()\"></a>Promise.prototype.then()</h2><h3 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h3><p>为promise实例添加状态改变时的回调函数</p>\n<h3 id=\"返回\"><a href=\"#返回\" class=\"headerlink\" title=\"返回\"></a>返回</h3><p>then方法返回的是一个新的promise实例</p>\n<p>第一个回调函数完成以后，会将返回结果作为参数，传入第二个回调函数。</p>\n<h2 id=\"Promise-all\"><a href=\"#Promise-all\" class=\"headerlink\" title=\"Promise.all()\"></a>Promise.all()</h2><h3 id=\"作用-1\"><a href=\"#作用-1\" class=\"headerlink\" title=\"作用\"></a>作用</h3><p>Promise.all方法用于将多个Promise实例，包装成一个新的Promise实例。</p>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><p>Promise.all方法接受一个数组作为参数，p1、p2、p3都是Promise对象的实例，如果不是，就会先调用下面讲到的Promise.resolve方法，将参数转为Promise实例，再进一步处理。（Promise.all方法的参数可以不是数组，但必须具有Iterator接口，且返回的每个成员都是Promise实例。）</p>\n<p>p的状态由p1、p2、p3决定，分成两种情况。</p>\n<p>（1）只有p1、p2、p3的状态都变成fulfilled，p的状态才会变成fulfilled，此时p1、p2、p3的返回值组成一个数组，传递给p的回调函数。</p>\n<p>（2）只要p1、p2、p3之中有一个被rejected，p的状态就变成rejected，此时第一个被reject的实例的返回值，会传递给p的回调函数。</p>\n<h2 id=\"Promise-race\"><a href=\"#Promise-race\" class=\"headerlink\" title=\"Promise.race()\"></a>Promise.race()</h2><h3 id=\"使用-1\"><a href=\"#使用-1\" class=\"headerlink\" title=\"\b使用\"></a>\b使用</h3><p>只要p1、p2、p3之中有一个实例率先改变状态，p的状态就跟着改变。那个率先改变的Promise实例的返回值，就传递给p的回调函数。</p>\n<p>Promise.race方法的参数与Promise.all方法一样，如果不是Promise实例，就会先调用下面讲到的Promise.resolve方法，将参数转为Promise实例，再进一步处理。</p>\n<p>下面是一个例子，如果指定时间内没有获得结果，就将Promise的状态变为reject，否则变为resolve。</p>\n<p>fetch加入超时处理</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"built_in\">Promise</span>.race([fetch(url),<span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve,reject</span>) =&gt;</span>&#123;</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span><br><span class=\"line\">        reject(<span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'超时'</span>));</span><br><span class=\"line\">    &#125;,<span class=\"number\">3000</span>);</span><br><span class=\"line\">&#125;)]);</span><br><span class=\"line\">p.then(<span class=\"function\"><span class=\"params\">response</span> =&gt;</span> <span class=\"built_in\">console</span>.log(response));</span><br><span class=\"line\">p.catch(<span class=\"function\"><span class=\"params\">error</span> =&gt;</span> <span class=\"built_in\">console</span>.log(error));</span><br></pre></td></tr></table></figure>\n\n"},{"title":"react + redux","date":"2017-03-27T16:00:00.000Z","_content":"\n# redux底层架构实现\nRedux是一种架构模式\n\nReact-redux 就是把 Redux 这种架构模式和 React.js 结合起来的一个库\n\ndispatch 专门负责数据修改,接受一个参数action.\n\naction是一个普通的js对象，里面必须包含一个type字段来声明用来做什么操作。\n\n原来模块（组件）修改共享数据是直接改的,这样无法把控。\n\n通过dispatch，所有数据修改必须通过它，并且必须用action来声明你的操作，只有它允许才能修改.\n\n有了如下这种集合：\n\n```javascript\nlet appState = {\n  title: {\n    text: 'React.js 小书',\n    color: 'red',\n  },\n  content: {\n    text: 'React.js 小书内容',\n    color: 'blue'\n  }\n}\n\nfunction dispatch (action) {\n  switch (action.type) {\n    case 'UPDATE_TITLE_TEXT':\n      appState.title.text = action.text\n      break\n    case 'UPDATE_TITLE_COLOR':\n      appState.title.color = action.color\n      break\n    default:\n      break\n  }\n}\n```\n\n\n把它们集中到一个地方，给这个地方起个名字叫做store，然后构建一个函数createStore，用来专门生产这种这种state和dispatch的集合，这样其他App也可以用这种模式了。\n\n\n```javascript\nfunction createStore(state,stateChanger){\nconst getState =()=>state;\nconst dispatch =(action)=>stateChanger(state,action);\nreturn {getState,dispatch}\n```\n\n\n`createStore`接受两个参数，一个表示应用程序状态，另一个用来描述应用程序会根据`action`发生什么变化，相当于`dispatch`函数里面的内容。\n`createStore`会返回一个对象，这个对象里面包含两个方法`getState`和`dispatch`。\n\n```javascript\nlet appState = {\n  title: {\n    text: 'React.js 小书',\n    color: 'red',\n  },\n  content: {\n    text: 'React.js 小书内容',\n    color: 'blue'\n  }\n}\n\nfunction stateChanger (state, action) {\n  switch (action.type) {\n    case 'UPDATE_TITLE_TEXT':\n      state.title.text = action.text\n      break\n    case 'UPDATE_TITLE_COLOR':\n      state.title.color = action.color\n      break\n    default:\n      break\n  }\n}\n\nconst store = createStore(appState, stateChanger)\n\nrenderApp(store.getState()) // 首次渲染页面\nstore.dispatch({ type: 'UPDATE_TITLE_TEXT', text: '《React.js 小书》' }) // 修改标题文本\nstore.dispatch({ type: 'UPDATE_TITLE_COLOR', color: 'blue' }) // 修改标题颜色\nrenderApp(store.getState()) // 把新的数据渲染到页面上\n```\n\n\n针对每个不同的App，我们可以给`createStore`传入初始数据`appState` ，和一个描述数据变化的函数`stateChanger`，然后生成一个`store`，需要修改数据的时候通过`store.dispatch`,需要获取数据的时候通过`store.getState`\n\n## 监控数据变化\n\n如上代码，我们每次通过` dispatch` 修改数据的时候，其实只是数据发生了变化，如果我们不手动调用 `renderApp`，页面上的内容是不会发生变化的。但是我们总不能每次 `dispatch `的时候都手动调用一下 `renderApp`，我们肯定希望数据变化的时候程序能够智能一点地自动重新渲染数据，而不是手动调用。\n\n你说这好办，往 `dispatch`里面加` renderApp `就好了，但是这样` createStore` 就不够通用了。我们希望用一种通用的方式“监听”数据变化，然后重新渲染页面，这里要用到***订阅者模式***。修改 createStore：\n\n\n```javascript\nfunction createStore (state, stateChanger) {\n  const listeners = []\n  const subscribe = (listener) => listeners.push(listener)\n  const getState = () => state\n  const dispatch = (action) => {\n    stateChanger(state, action)\n    listeners.forEach((listener) => listener())\n  }\n  return { getState, dispatch, subscribe }\n}\n```\n\n\n我们在 `createStore` 里面定义了一个数组 `listeners`，还有一个新的方法 `subscribe`，可以通过 `store.subscribe(listener)` 的方式给 `subscribe` 传入一个监听函数，这个函数会被 push 到数组当中。\n\n我们修改了 `dispatch`，每次当它被调用的时候，除了会调用` stateChanger` 进行数据的修改，还会遍历 `listeners` 数组里面的函数，然后一个个地去调用。相当于我们可以通过 `subscribe` 传入数据变化的监听函数，每当 dispatch 的时候，监听函数就会被调用，这样我们就可以在每当数据变化时候进行重新渲染：\n\n\n\n```javascript\nconst store = createStore(appState, stateChanger)\nstore.subscribe(() => renderApp(store.getState()))\n\nrenderApp(store.getState()) // 首次渲染页面\nstore.dispatch({ type: 'UPDATE_TITLE_TEXT', text: '《React.js 小书》' }) // 修改标题文本\nstore.dispatch({ type: 'UPDATE_TITLE_COLOR', color: 'blue' }) // 修改标题颜色\n// ...后面不管如何 store.dispatch，都不需要重新调用 renderApp\n```\n\n\n现在我们有了一个比较通用的 `createStore`，它可以产生一种我们新定义的数据类型 `store`，通过 `store.getState` 我们获取共享状态，而且我们约定只能通过 `store.dispatch` 修改共享状态。`store` 也允许我们通过 `store.subscribe `监听数据数据状态被修改了，并且进行后续的例如重新渲染页面的操作。\n我们接下来会继续优化我们的 `createStore `的模式，让它使我们的应用程序获得更好的性能。\n\n## 共享结构的对象\n\nES6中有这样的语法；\n\n\n```javascript\nconst obj ={a:1,b:2}\nconst obj2 = {...obj} //=>{a:1,b:2}\n```\n\n\n`const obj2 = { ...obj } `其实就是新建一个对象 `obj2`，然后把` obj `所有的属性都复制到 `obj2` 里面，相当于对象的浅复制。上面的 `obj` 里面的内容和 `obj2 `是完全一样的，但是却是两个**不同的**对象。除了浅复制对象，还可以覆盖、拓展对象属性：\n\n\n```javascript\nconst obj = { a: 1, b: 2}\nconst obj2 = { ...obj, b: 3, c: 4} // => { a: 1, b: 3, c: 4 }，覆盖了 b，新增了 c\n```\n\n\n我们可以把这种特性应用在` state` 的更新上，我们禁止直接修改原来的对象，一旦你要修改某些东西，你就得把修改路径上的所有对象复制一遍，例如，我们不写下面的修改代码：\n`appState.title.text = 'react'`\n而是新建一个`appState`，新建`appState.title`，新建`appState.title.text`：\n\n```javascript\nlet newAppState ={//新建一个newAppState\n...appState,//复制appState里面的内容\ntitle:{ // 用一个新的对象覆盖原来的 title 属性\n  ...appState.title,// 复制原来 title 对象里面的内容\n  text:'react'// 覆盖 text 属性\n  }\n}\n```\n\n\n`appState` 和 `newAppState` 其实是两个不同的对象，因为对象浅复制的缘故，其实它们里面的属性 `content `指向的是同一个对象；但是因为 `title `被一个新的对象覆盖了，所以它们的 `title `属性是不同的。\n我们每次修改某些数据的时候，都不会碰原来的数据，而是把需要修改数据路径上的对象都 copy 一个出来。这样有什么好处？看看我们的目的达到了：\n\n\n```javascript\nappState !== newAppState // true，数据变化了，重新渲染\nappState.title !== newAppState.title // true，数据变化了，重新渲染\nappState.content !== appState.content // false，数据没有变化，不需要重新渲染\n```\n\n## 优化性能\n修改`stateChanger`，让它修改数据的时候，并不会直接修改原来的数据 `state`，而是产生上述的共享结构的对象：\n\n```javascript\nfunction stateChanger (state, action) {\n  switch (action.type) {\n    case 'UPDATE_TITLE_TEXT':\n      return { // 构建新的对象并且返回\n        ...state,\n        title: {\n          ...state.title,\n          text: action.text\n        }\n      }\n    case 'UPDATE_TITLE_COLOR':\n      return { // 构建新的对象并且返回\n        ...state,\n        title: {\n          ...state.title,\n          color: action.color\n        }\n      }\n    default:\n      return state // 没有修改，返回原来的对象\n  }\n}\n```\n\n每次需要修改的时候都会产生新的对象，并且返回。而如果没有修改（在 default 语句中）则返回原来的 state 对象。\n\n因为` stateChanger` 不会修改原来对象了，而是返回对象，所以我们需要修改一下 `createStore`。让它用每次 `stateChanger(state, action) `的调用结果覆盖原来的 state：\n\n```javascript\nfunction createStore (state, stateChanger) {\n  const listeners = []\n  const subscribe = (listener) => listeners.push(listener)\n  const getState = () => state\n  const dispatch = (action) => {\n    state = stateChanger(state, action) // 覆盖原对象\n    listeners.forEach((listener) => listener())\n  }\n  return { getState, dispatch, subscribe }\n}\n```\n\n再优化一下，其实` appState `和 `stateChanger` 可以合并到一起去：\n\n\n```javascript\nfunction stateChanger (state, action) {\n  if (!state) {\n    return {\n      title: {\n        text: 'React.js 小书',\n        color: 'red',\n      },\n      content: {\n        text: 'React.js 小书内容',\n        color: 'blue'\n      }\n    }\n  }\n  switch (action.type) {\n    case 'UPDATE_TITLE_TEXT':\n      return {\n        ...state,\n        title: {\n          ...state.title,\n          text: action.text\n        }\n      }\n    case 'UPDATE_TITLE_COLOR':\n      return {\n        ...state,\n        title: {\n          ...state.title,\n          color: action.color\n        }\n      }\n    default:\n      return state\n  }\n}\n```\n\n`stateChanger` 现在既充当了获取初始化数据的功能，也充当了生成更新数据的功能。如果有传入 `state` 就生成更新数据，否则就是初始化数据。这样我们可以优化 `createStore `成一个参数，因为 `state` 和` stateChanger` 合并到一起了：\n\n```javascript\nfunction createStore (stateChanger) {\n  let state = null\n  const listeners = []\n  const subscribe = (listener) => listeners.push(listener)\n  const getState = () => state\n  const dispatch = (action) => {\n    state = stateChanger(state, action)\n    listeners.forEach((listener) => listener())\n  }\n  dispatch({}) // 初始化 state\n  return { getState, dispatch, subscribe }\n}\n```\n\n\n我们给 stateChanger 这个玩意起一个通用的名字：`reducer`\n\n\n## reducer\n`createStore `接受一个叫 `reducer` 的函数作为参数，这个函数规定是一个纯函数，它接受两个参数，一个是 `state`，一个是 `action`。\n\n如果没有传入` state `或者 `state `是 null，那么它就会返回一个初始化的数据。如果有传入 `state` 的话，就会根据 `action` 来“修改“数据，但其实它没有、也规定不能修改 state，而是要通过上节所说的把修改路径的对象都复制一遍，然后产生一个新的对象返回。如果它不能识别你的 `action`，它就不会产生新的数据，而是（在 default 内部）把 `state` 原封不动地返回。\n\n`reducer` 是不允许有副作用的。你不能在里面操作 DOM，也不能发 Ajax 请求，更不能直接修改` state`，它要做的仅仅是 —— **初始化和计算新的` state`**。\n\n\n## 总结\n`createStore `现在可以直接拿来用了，套路就是：\n\n```javascript\n// 定一个 reducer\nfunction reducer (state, action) {\n  /* 初始化 state 和 switch case */\n}\n\n// 生成 store\nconst store = createStore(reducer)\n\n// 监听数据变化重新渲染页面\nstore.subscribe(() => renderApp(store.getState()))\n\n// 首次渲染页面\nrenderApp(store.getState()) \n\n// 后面可以随意 dispatch 了，页面自动更新\nstore.dispatch(...)\n```\n\n\n\n现在的代码跟 React.js 一点关系都没有，接下来我们要把 React.js 和 Redux 结合起来，用 Redux 模式帮助管理 React.js 的应用状态。\n## react-redux\n前端中应用的状态存在的问题：一个状态可能被多个组件依赖或者影响，而 React.js 并没有提供好的解决方案，我们只能把状态提升到依赖或者影响这个状态的所有组件的公共父组件上，我们把这种行为叫做状态提升。但是需求不停变化，共享状态没完没了地提升也不是办法。\n后来我们在 React.js 的 context 中提出，我们可用把共享状态放到父组件的 context 上，这个父组件下所有的组件都可以从 context 中直接获取到状态而不需要一层层地进行传递了。但是直接从 context 里面存放、获取数据增强了组件的耦合性；并且所有组件都可以修改 context 里面的状态就像谁都可以修改共享状态一样，导致程序运行的不可预料。\n\n既然这样，为什么不把 context 和 store 结合起来？毕竟 store 的数据不是谁都能修改，而是约定只能通过 dispatch 来进行修改，这样的话每个组件既可以去 context 里面获取 store 从而获取状态，又不用担心它们乱改数据了。\n\n","source":"_posts/2017-03-28-redux.md","raw":"---\ntitle: react + redux\ndate: 2017-03-28\ncategories: \n- FE\n- React\ntags:\n- FE\n- React\n- redux\n---\n\n# redux底层架构实现\nRedux是一种架构模式\n\nReact-redux 就是把 Redux 这种架构模式和 React.js 结合起来的一个库\n\ndispatch 专门负责数据修改,接受一个参数action.\n\naction是一个普通的js对象，里面必须包含一个type字段来声明用来做什么操作。\n\n原来模块（组件）修改共享数据是直接改的,这样无法把控。\n\n通过dispatch，所有数据修改必须通过它，并且必须用action来声明你的操作，只有它允许才能修改.\n\n有了如下这种集合：\n\n```javascript\nlet appState = {\n  title: {\n    text: 'React.js 小书',\n    color: 'red',\n  },\n  content: {\n    text: 'React.js 小书内容',\n    color: 'blue'\n  }\n}\n\nfunction dispatch (action) {\n  switch (action.type) {\n    case 'UPDATE_TITLE_TEXT':\n      appState.title.text = action.text\n      break\n    case 'UPDATE_TITLE_COLOR':\n      appState.title.color = action.color\n      break\n    default:\n      break\n  }\n}\n```\n\n\n把它们集中到一个地方，给这个地方起个名字叫做store，然后构建一个函数createStore，用来专门生产这种这种state和dispatch的集合，这样其他App也可以用这种模式了。\n\n\n```javascript\nfunction createStore(state,stateChanger){\nconst getState =()=>state;\nconst dispatch =(action)=>stateChanger(state,action);\nreturn {getState,dispatch}\n```\n\n\n`createStore`接受两个参数，一个表示应用程序状态，另一个用来描述应用程序会根据`action`发生什么变化，相当于`dispatch`函数里面的内容。\n`createStore`会返回一个对象，这个对象里面包含两个方法`getState`和`dispatch`。\n\n```javascript\nlet appState = {\n  title: {\n    text: 'React.js 小书',\n    color: 'red',\n  },\n  content: {\n    text: 'React.js 小书内容',\n    color: 'blue'\n  }\n}\n\nfunction stateChanger (state, action) {\n  switch (action.type) {\n    case 'UPDATE_TITLE_TEXT':\n      state.title.text = action.text\n      break\n    case 'UPDATE_TITLE_COLOR':\n      state.title.color = action.color\n      break\n    default:\n      break\n  }\n}\n\nconst store = createStore(appState, stateChanger)\n\nrenderApp(store.getState()) // 首次渲染页面\nstore.dispatch({ type: 'UPDATE_TITLE_TEXT', text: '《React.js 小书》' }) // 修改标题文本\nstore.dispatch({ type: 'UPDATE_TITLE_COLOR', color: 'blue' }) // 修改标题颜色\nrenderApp(store.getState()) // 把新的数据渲染到页面上\n```\n\n\n针对每个不同的App，我们可以给`createStore`传入初始数据`appState` ，和一个描述数据变化的函数`stateChanger`，然后生成一个`store`，需要修改数据的时候通过`store.dispatch`,需要获取数据的时候通过`store.getState`\n\n## 监控数据变化\n\n如上代码，我们每次通过` dispatch` 修改数据的时候，其实只是数据发生了变化，如果我们不手动调用 `renderApp`，页面上的内容是不会发生变化的。但是我们总不能每次 `dispatch `的时候都手动调用一下 `renderApp`，我们肯定希望数据变化的时候程序能够智能一点地自动重新渲染数据，而不是手动调用。\n\n你说这好办，往 `dispatch`里面加` renderApp `就好了，但是这样` createStore` 就不够通用了。我们希望用一种通用的方式“监听”数据变化，然后重新渲染页面，这里要用到***订阅者模式***。修改 createStore：\n\n\n```javascript\nfunction createStore (state, stateChanger) {\n  const listeners = []\n  const subscribe = (listener) => listeners.push(listener)\n  const getState = () => state\n  const dispatch = (action) => {\n    stateChanger(state, action)\n    listeners.forEach((listener) => listener())\n  }\n  return { getState, dispatch, subscribe }\n}\n```\n\n\n我们在 `createStore` 里面定义了一个数组 `listeners`，还有一个新的方法 `subscribe`，可以通过 `store.subscribe(listener)` 的方式给 `subscribe` 传入一个监听函数，这个函数会被 push 到数组当中。\n\n我们修改了 `dispatch`，每次当它被调用的时候，除了会调用` stateChanger` 进行数据的修改，还会遍历 `listeners` 数组里面的函数，然后一个个地去调用。相当于我们可以通过 `subscribe` 传入数据变化的监听函数，每当 dispatch 的时候，监听函数就会被调用，这样我们就可以在每当数据变化时候进行重新渲染：\n\n\n\n```javascript\nconst store = createStore(appState, stateChanger)\nstore.subscribe(() => renderApp(store.getState()))\n\nrenderApp(store.getState()) // 首次渲染页面\nstore.dispatch({ type: 'UPDATE_TITLE_TEXT', text: '《React.js 小书》' }) // 修改标题文本\nstore.dispatch({ type: 'UPDATE_TITLE_COLOR', color: 'blue' }) // 修改标题颜色\n// ...后面不管如何 store.dispatch，都不需要重新调用 renderApp\n```\n\n\n现在我们有了一个比较通用的 `createStore`，它可以产生一种我们新定义的数据类型 `store`，通过 `store.getState` 我们获取共享状态，而且我们约定只能通过 `store.dispatch` 修改共享状态。`store` 也允许我们通过 `store.subscribe `监听数据数据状态被修改了，并且进行后续的例如重新渲染页面的操作。\n我们接下来会继续优化我们的 `createStore `的模式，让它使我们的应用程序获得更好的性能。\n\n## 共享结构的对象\n\nES6中有这样的语法；\n\n\n```javascript\nconst obj ={a:1,b:2}\nconst obj2 = {...obj} //=>{a:1,b:2}\n```\n\n\n`const obj2 = { ...obj } `其实就是新建一个对象 `obj2`，然后把` obj `所有的属性都复制到 `obj2` 里面，相当于对象的浅复制。上面的 `obj` 里面的内容和 `obj2 `是完全一样的，但是却是两个**不同的**对象。除了浅复制对象，还可以覆盖、拓展对象属性：\n\n\n```javascript\nconst obj = { a: 1, b: 2}\nconst obj2 = { ...obj, b: 3, c: 4} // => { a: 1, b: 3, c: 4 }，覆盖了 b，新增了 c\n```\n\n\n我们可以把这种特性应用在` state` 的更新上，我们禁止直接修改原来的对象，一旦你要修改某些东西，你就得把修改路径上的所有对象复制一遍，例如，我们不写下面的修改代码：\n`appState.title.text = 'react'`\n而是新建一个`appState`，新建`appState.title`，新建`appState.title.text`：\n\n```javascript\nlet newAppState ={//新建一个newAppState\n...appState,//复制appState里面的内容\ntitle:{ // 用一个新的对象覆盖原来的 title 属性\n  ...appState.title,// 复制原来 title 对象里面的内容\n  text:'react'// 覆盖 text 属性\n  }\n}\n```\n\n\n`appState` 和 `newAppState` 其实是两个不同的对象，因为对象浅复制的缘故，其实它们里面的属性 `content `指向的是同一个对象；但是因为 `title `被一个新的对象覆盖了，所以它们的 `title `属性是不同的。\n我们每次修改某些数据的时候，都不会碰原来的数据，而是把需要修改数据路径上的对象都 copy 一个出来。这样有什么好处？看看我们的目的达到了：\n\n\n```javascript\nappState !== newAppState // true，数据变化了，重新渲染\nappState.title !== newAppState.title // true，数据变化了，重新渲染\nappState.content !== appState.content // false，数据没有变化，不需要重新渲染\n```\n\n## 优化性能\n修改`stateChanger`，让它修改数据的时候，并不会直接修改原来的数据 `state`，而是产生上述的共享结构的对象：\n\n```javascript\nfunction stateChanger (state, action) {\n  switch (action.type) {\n    case 'UPDATE_TITLE_TEXT':\n      return { // 构建新的对象并且返回\n        ...state,\n        title: {\n          ...state.title,\n          text: action.text\n        }\n      }\n    case 'UPDATE_TITLE_COLOR':\n      return { // 构建新的对象并且返回\n        ...state,\n        title: {\n          ...state.title,\n          color: action.color\n        }\n      }\n    default:\n      return state // 没有修改，返回原来的对象\n  }\n}\n```\n\n每次需要修改的时候都会产生新的对象，并且返回。而如果没有修改（在 default 语句中）则返回原来的 state 对象。\n\n因为` stateChanger` 不会修改原来对象了，而是返回对象，所以我们需要修改一下 `createStore`。让它用每次 `stateChanger(state, action) `的调用结果覆盖原来的 state：\n\n```javascript\nfunction createStore (state, stateChanger) {\n  const listeners = []\n  const subscribe = (listener) => listeners.push(listener)\n  const getState = () => state\n  const dispatch = (action) => {\n    state = stateChanger(state, action) // 覆盖原对象\n    listeners.forEach((listener) => listener())\n  }\n  return { getState, dispatch, subscribe }\n}\n```\n\n再优化一下，其实` appState `和 `stateChanger` 可以合并到一起去：\n\n\n```javascript\nfunction stateChanger (state, action) {\n  if (!state) {\n    return {\n      title: {\n        text: 'React.js 小书',\n        color: 'red',\n      },\n      content: {\n        text: 'React.js 小书内容',\n        color: 'blue'\n      }\n    }\n  }\n  switch (action.type) {\n    case 'UPDATE_TITLE_TEXT':\n      return {\n        ...state,\n        title: {\n          ...state.title,\n          text: action.text\n        }\n      }\n    case 'UPDATE_TITLE_COLOR':\n      return {\n        ...state,\n        title: {\n          ...state.title,\n          color: action.color\n        }\n      }\n    default:\n      return state\n  }\n}\n```\n\n`stateChanger` 现在既充当了获取初始化数据的功能，也充当了生成更新数据的功能。如果有传入 `state` 就生成更新数据，否则就是初始化数据。这样我们可以优化 `createStore `成一个参数，因为 `state` 和` stateChanger` 合并到一起了：\n\n```javascript\nfunction createStore (stateChanger) {\n  let state = null\n  const listeners = []\n  const subscribe = (listener) => listeners.push(listener)\n  const getState = () => state\n  const dispatch = (action) => {\n    state = stateChanger(state, action)\n    listeners.forEach((listener) => listener())\n  }\n  dispatch({}) // 初始化 state\n  return { getState, dispatch, subscribe }\n}\n```\n\n\n我们给 stateChanger 这个玩意起一个通用的名字：`reducer`\n\n\n## reducer\n`createStore `接受一个叫 `reducer` 的函数作为参数，这个函数规定是一个纯函数，它接受两个参数，一个是 `state`，一个是 `action`。\n\n如果没有传入` state `或者 `state `是 null，那么它就会返回一个初始化的数据。如果有传入 `state` 的话，就会根据 `action` 来“修改“数据，但其实它没有、也规定不能修改 state，而是要通过上节所说的把修改路径的对象都复制一遍，然后产生一个新的对象返回。如果它不能识别你的 `action`，它就不会产生新的数据，而是（在 default 内部）把 `state` 原封不动地返回。\n\n`reducer` 是不允许有副作用的。你不能在里面操作 DOM，也不能发 Ajax 请求，更不能直接修改` state`，它要做的仅仅是 —— **初始化和计算新的` state`**。\n\n\n## 总结\n`createStore `现在可以直接拿来用了，套路就是：\n\n```javascript\n// 定一个 reducer\nfunction reducer (state, action) {\n  /* 初始化 state 和 switch case */\n}\n\n// 生成 store\nconst store = createStore(reducer)\n\n// 监听数据变化重新渲染页面\nstore.subscribe(() => renderApp(store.getState()))\n\n// 首次渲染页面\nrenderApp(store.getState()) \n\n// 后面可以随意 dispatch 了，页面自动更新\nstore.dispatch(...)\n```\n\n\n\n现在的代码跟 React.js 一点关系都没有，接下来我们要把 React.js 和 Redux 结合起来，用 Redux 模式帮助管理 React.js 的应用状态。\n## react-redux\n前端中应用的状态存在的问题：一个状态可能被多个组件依赖或者影响，而 React.js 并没有提供好的解决方案，我们只能把状态提升到依赖或者影响这个状态的所有组件的公共父组件上，我们把这种行为叫做状态提升。但是需求不停变化，共享状态没完没了地提升也不是办法。\n后来我们在 React.js 的 context 中提出，我们可用把共享状态放到父组件的 context 上，这个父组件下所有的组件都可以从 context 中直接获取到状态而不需要一层层地进行传递了。但是直接从 context 里面存放、获取数据增强了组件的耦合性；并且所有组件都可以修改 context 里面的状态就像谁都可以修改共享状态一样，导致程序运行的不可预料。\n\n既然这样，为什么不把 context 和 store 结合起来？毕竟 store 的数据不是谁都能修改，而是约定只能通过 dispatch 来进行修改，这样的话每个组件既可以去 context 里面获取 store 从而获取状态，又不用担心它们乱改数据了。\n\n","slug":"2017-03-28-redux","published":1,"updated":"2020-03-01T12:09:37.509Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckreo13po0037ytt513304t96","content":"<h1 id=\"redux底层架构实现\"><a href=\"#redux底层架构实现\" class=\"headerlink\" title=\"redux底层架构实现\"></a>redux底层架构实现</h1><p>Redux是一种架构模式</p>\n<p>React-redux 就是把 Redux 这种架构模式和 React.js 结合起来的一个库</p>\n<p>dispatch 专门负责数据修改,接受一个参数action.</p>\n<p>action是一个普通的js对象，里面必须包含一个type字段来声明用来做什么操作。</p>\n<p>原来模块（组件）修改共享数据是直接改的,这样无法把控。</p>\n<p>通过dispatch，所有数据修改必须通过它，并且必须用action来声明你的操作，只有它允许才能修改.</p>\n<p>有了如下这种集合：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> appState = &#123;</span><br><span class=\"line\">  title: &#123;</span><br><span class=\"line\">    text: <span class=\"string\">'React.js 小书'</span>,</span><br><span class=\"line\">    color: <span class=\"string\">'red'</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  content: &#123;</span><br><span class=\"line\">    text: <span class=\"string\">'React.js 小书内容'</span>,</span><br><span class=\"line\">    color: <span class=\"string\">'blue'</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dispatch</span> (<span class=\"params\">action</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">switch</span> (action.type) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'UPDATE_TITLE_TEXT'</span>:</span><br><span class=\"line\">      appState.title.text = action.text</span><br><span class=\"line\">      <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'UPDATE_TITLE_COLOR'</span>:</span><br><span class=\"line\">      appState.title.color = action.color</span><br><span class=\"line\">      <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"keyword\">default</span>:</span><br><span class=\"line\">      <span class=\"keyword\">break</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p>把它们集中到一个地方，给这个地方起个名字叫做store，然后构建一个函数createStore，用来专门生产这种这种state和dispatch的集合，这样其他App也可以用这种模式了。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createStore</span>(<span class=\"params\">state,stateChanger</span>)</span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">const</span> getState =<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>state;</span><br><span class=\"line\"><span class=\"keyword\">const</span> dispatch =<span class=\"function\">(<span class=\"params\">action</span>)=&gt;</span>stateChanger(state,action);</span><br><span class=\"line\"><span class=\"keyword\">return</span> &#123;getState,dispatch&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p><code>createStore</code>接受两个参数，一个表示应用程序状态，另一个用来描述应用程序会根据<code>action</code>发生什么变化，相当于<code>dispatch</code>函数里面的内容。<br><code>createStore</code>会返回一个对象，这个对象里面包含两个方法<code>getState</code>和<code>dispatch</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> appState = &#123;</span><br><span class=\"line\">  title: &#123;</span><br><span class=\"line\">    text: <span class=\"string\">'React.js 小书'</span>,</span><br><span class=\"line\">    color: <span class=\"string\">'red'</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  content: &#123;</span><br><span class=\"line\">    text: <span class=\"string\">'React.js 小书内容'</span>,</span><br><span class=\"line\">    color: <span class=\"string\">'blue'</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">stateChanger</span> (<span class=\"params\">state, action</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">switch</span> (action.type) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'UPDATE_TITLE_TEXT'</span>:</span><br><span class=\"line\">      state.title.text = action.text</span><br><span class=\"line\">      <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'UPDATE_TITLE_COLOR'</span>:</span><br><span class=\"line\">      state.title.color = action.color</span><br><span class=\"line\">      <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"keyword\">default</span>:</span><br><span class=\"line\">      <span class=\"keyword\">break</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> store = createStore(appState, stateChanger)</span><br><span class=\"line\"></span><br><span class=\"line\">renderApp(store.getState()) <span class=\"comment\">// 首次渲染页面</span></span><br><span class=\"line\">store.dispatch(&#123; <span class=\"attr\">type</span>: <span class=\"string\">'UPDATE_TITLE_TEXT'</span>, <span class=\"attr\">text</span>: <span class=\"string\">'《React.js 小书》'</span> &#125;) <span class=\"comment\">// 修改标题文本</span></span><br><span class=\"line\">store.dispatch(&#123; <span class=\"attr\">type</span>: <span class=\"string\">'UPDATE_TITLE_COLOR'</span>, <span class=\"attr\">color</span>: <span class=\"string\">'blue'</span> &#125;) <span class=\"comment\">// 修改标题颜色</span></span><br><span class=\"line\">renderApp(store.getState()) <span class=\"comment\">// 把新的数据渲染到页面上</span></span><br></pre></td></tr></table></figure>\n\n\n<p>针对每个不同的App，我们可以给<code>createStore</code>传入初始数据<code>appState</code> ，和一个描述数据变化的函数<code>stateChanger</code>，然后生成一个<code>store</code>，需要修改数据的时候通过<code>store.dispatch</code>,需要获取数据的时候通过<code>store.getState</code></p>\n<h2 id=\"监控数据变化\"><a href=\"#监控数据变化\" class=\"headerlink\" title=\"监控数据变化\"></a>监控数据变化</h2><p>如上代码，我们每次通过<code>dispatch</code> 修改数据的时候，其实只是数据发生了变化，如果我们不手动调用 <code>renderApp</code>，页面上的内容是不会发生变化的。但是我们总不能每次 <code>dispatch</code>的时候都手动调用一下 <code>renderApp</code>，我们肯定希望数据变化的时候程序能够智能一点地自动重新渲染数据，而不是手动调用。</p>\n<p>你说这好办，往 <code>dispatch</code>里面加<code>renderApp</code>就好了，但是这样<code>createStore</code> 就不够通用了。我们希望用一种通用的方式“监听”数据变化，然后重新渲染页面，这里要用到<strong><em>订阅者模式</em></strong>。修改 createStore：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createStore</span> (<span class=\"params\">state, stateChanger</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> listeners = []</span><br><span class=\"line\">  <span class=\"keyword\">const</span> subscribe = <span class=\"function\">(<span class=\"params\">listener</span>) =&gt;</span> listeners.push(listener)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> getState = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> state</span><br><span class=\"line\">  <span class=\"keyword\">const</span> dispatch = <span class=\"function\">(<span class=\"params\">action</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    stateChanger(state, action)</span><br><span class=\"line\">    listeners.forEach(<span class=\"function\">(<span class=\"params\">listener</span>) =&gt;</span> listener())</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123; getState, dispatch, subscribe &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p>我们在 <code>createStore</code> 里面定义了一个数组 <code>listeners</code>，还有一个新的方法 <code>subscribe</code>，可以通过 <code>store.subscribe(listener)</code> 的方式给 <code>subscribe</code> 传入一个监听函数，这个函数会被 push 到数组当中。</p>\n<p>我们修改了 <code>dispatch</code>，每次当它被调用的时候，除了会调用<code>stateChanger</code> 进行数据的修改，还会遍历 <code>listeners</code> 数组里面的函数，然后一个个地去调用。相当于我们可以通过 <code>subscribe</code> 传入数据变化的监听函数，每当 dispatch 的时候，监听函数就会被调用，这样我们就可以在每当数据变化时候进行重新渲染：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> store = createStore(appState, stateChanger)</span><br><span class=\"line\">store.subscribe(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> renderApp(store.getState()))</span><br><span class=\"line\"></span><br><span class=\"line\">renderApp(store.getState()) <span class=\"comment\">// 首次渲染页面</span></span><br><span class=\"line\">store.dispatch(&#123; <span class=\"attr\">type</span>: <span class=\"string\">'UPDATE_TITLE_TEXT'</span>, <span class=\"attr\">text</span>: <span class=\"string\">'《React.js 小书》'</span> &#125;) <span class=\"comment\">// 修改标题文本</span></span><br><span class=\"line\">store.dispatch(&#123; <span class=\"attr\">type</span>: <span class=\"string\">'UPDATE_TITLE_COLOR'</span>, <span class=\"attr\">color</span>: <span class=\"string\">'blue'</span> &#125;) <span class=\"comment\">// 修改标题颜色</span></span><br><span class=\"line\"><span class=\"comment\">// ...后面不管如何 store.dispatch，都不需要重新调用 renderApp</span></span><br></pre></td></tr></table></figure>\n\n\n<p>现在我们有了一个比较通用的 <code>createStore</code>，它可以产生一种我们新定义的数据类型 <code>store</code>，通过 <code>store.getState</code> 我们获取共享状态，而且我们约定只能通过 <code>store.dispatch</code> 修改共享状态。<code>store</code> 也允许我们通过 <code>store.subscribe</code>监听数据数据状态被修改了，并且进行后续的例如重新渲染页面的操作。<br>我们接下来会继续优化我们的 <code>createStore</code>的模式，让它使我们的应用程序获得更好的性能。</p>\n<h2 id=\"共享结构的对象\"><a href=\"#共享结构的对象\" class=\"headerlink\" title=\"共享结构的对象\"></a>共享结构的对象</h2><p>ES6中有这样的语法；</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj =&#123;<span class=\"attr\">a</span>:<span class=\"number\">1</span>,<span class=\"attr\">b</span>:<span class=\"number\">2</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> obj2 = &#123;...obj&#125; <span class=\"comment\">//=&gt;&#123;a:1,b:2&#125;</span></span><br></pre></td></tr></table></figure>\n\n\n<p><code>const obj2 = { ...obj }</code>其实就是新建一个对象 <code>obj2</code>，然后把<code>obj</code>所有的属性都复制到 <code>obj2</code> 里面，相当于对象的浅复制。上面的 <code>obj</code> 里面的内容和 <code>obj2</code>是完全一样的，但是却是两个<strong>不同的</strong>对象。除了浅复制对象，还可以覆盖、拓展对象属性：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span>, <span class=\"attr\">b</span>: <span class=\"number\">2</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> obj2 = &#123; ...obj, <span class=\"attr\">b</span>: <span class=\"number\">3</span>, <span class=\"attr\">c</span>: <span class=\"number\">4</span>&#125; <span class=\"comment\">// =&gt; &#123; a: 1, b: 3, c: 4 &#125;，覆盖了 b，新增了 c</span></span><br></pre></td></tr></table></figure>\n\n\n<p>我们可以把这种特性应用在<code>state</code> 的更新上，我们禁止直接修改原来的对象，一旦你要修改某些东西，你就得把修改路径上的所有对象复制一遍，例如，我们不写下面的修改代码：<br><code>appState.title.text = &#39;react&#39;</code><br>而是新建一个<code>appState</code>，新建<code>appState.title</code>，新建<code>appState.title.text</code>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> newAppState =&#123;<span class=\"comment\">//新建一个newAppState</span></span><br><span class=\"line\">...appState,<span class=\"comment\">//复制appState里面的内容</span></span><br><span class=\"line\">title:&#123; <span class=\"comment\">// 用一个新的对象覆盖原来的 title 属性</span></span><br><span class=\"line\">  ...appState.title,<span class=\"comment\">// 复制原来 title 对象里面的内容</span></span><br><span class=\"line\">  text:<span class=\"string\">'react'</span><span class=\"comment\">// 覆盖 text 属性</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p><code>appState</code> 和 <code>newAppState</code> 其实是两个不同的对象，因为对象浅复制的缘故，其实它们里面的属性 <code>content</code>指向的是同一个对象；但是因为 <code>title</code>被一个新的对象覆盖了，所以它们的 <code>title</code>属性是不同的。<br>我们每次修改某些数据的时候，都不会碰原来的数据，而是把需要修改数据路径上的对象都 copy 一个出来。这样有什么好处？看看我们的目的达到了：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">appState !== newAppState <span class=\"comment\">// true，数据变化了，重新渲染</span></span><br><span class=\"line\">appState.title !== newAppState.title <span class=\"comment\">// true，数据变化了，重新渲染</span></span><br><span class=\"line\">appState.content !== appState.content <span class=\"comment\">// false，数据没有变化，不需要重新渲染</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"优化性能\"><a href=\"#优化性能\" class=\"headerlink\" title=\"优化性能\"></a>优化性能</h2><p>修改<code>stateChanger</code>，让它修改数据的时候，并不会直接修改原来的数据 <code>state</code>，而是产生上述的共享结构的对象：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">stateChanger</span> (<span class=\"params\">state, action</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">switch</span> (action.type) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'UPDATE_TITLE_TEXT'</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123; <span class=\"comment\">// 构建新的对象并且返回</span></span><br><span class=\"line\">        ...state,</span><br><span class=\"line\">        title: &#123;</span><br><span class=\"line\">          ...state.title,</span><br><span class=\"line\">          text: action.text</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'UPDATE_TITLE_COLOR'</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123; <span class=\"comment\">// 构建新的对象并且返回</span></span><br><span class=\"line\">        ...state,</span><br><span class=\"line\">        title: &#123;</span><br><span class=\"line\">          ...state.title,</span><br><span class=\"line\">          color: action.color</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    <span class=\"keyword\">default</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> state <span class=\"comment\">// 没有修改，返回原来的对象</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>每次需要修改的时候都会产生新的对象，并且返回。而如果没有修改（在 default 语句中）则返回原来的 state 对象。</p>\n<p>因为<code>stateChanger</code> 不会修改原来对象了，而是返回对象，所以我们需要修改一下 <code>createStore</code>。让它用每次 <code>stateChanger(state, action)</code>的调用结果覆盖原来的 state：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createStore</span> (<span class=\"params\">state, stateChanger</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> listeners = []</span><br><span class=\"line\">  <span class=\"keyword\">const</span> subscribe = <span class=\"function\">(<span class=\"params\">listener</span>) =&gt;</span> listeners.push(listener)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> getState = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> state</span><br><span class=\"line\">  <span class=\"keyword\">const</span> dispatch = <span class=\"function\">(<span class=\"params\">action</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    state = stateChanger(state, action) <span class=\"comment\">// 覆盖原对象</span></span><br><span class=\"line\">    listeners.forEach(<span class=\"function\">(<span class=\"params\">listener</span>) =&gt;</span> listener())</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123; getState, dispatch, subscribe &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>再优化一下，其实<code>appState</code>和 <code>stateChanger</code> 可以合并到一起去：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">stateChanger</span> (<span class=\"params\">state, action</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!state) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      title: &#123;</span><br><span class=\"line\">        text: <span class=\"string\">'React.js 小书'</span>,</span><br><span class=\"line\">        color: <span class=\"string\">'red'</span>,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      content: &#123;</span><br><span class=\"line\">        text: <span class=\"string\">'React.js 小书内容'</span>,</span><br><span class=\"line\">        color: <span class=\"string\">'blue'</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">switch</span> (action.type) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'UPDATE_TITLE_TEXT'</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        ...state,</span><br><span class=\"line\">        title: &#123;</span><br><span class=\"line\">          ...state.title,</span><br><span class=\"line\">          text: action.text</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'UPDATE_TITLE_COLOR'</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        ...state,</span><br><span class=\"line\">        title: &#123;</span><br><span class=\"line\">          ...state.title,</span><br><span class=\"line\">          color: action.color</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    <span class=\"keyword\">default</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> state</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>stateChanger</code> 现在既充当了获取初始化数据的功能，也充当了生成更新数据的功能。如果有传入 <code>state</code> 就生成更新数据，否则就是初始化数据。这样我们可以优化 <code>createStore</code>成一个参数，因为 <code>state</code> 和<code>stateChanger</code> 合并到一起了：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createStore</span> (<span class=\"params\">stateChanger</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> state = <span class=\"literal\">null</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> listeners = []</span><br><span class=\"line\">  <span class=\"keyword\">const</span> subscribe = <span class=\"function\">(<span class=\"params\">listener</span>) =&gt;</span> listeners.push(listener)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> getState = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> state</span><br><span class=\"line\">  <span class=\"keyword\">const</span> dispatch = <span class=\"function\">(<span class=\"params\">action</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    state = stateChanger(state, action)</span><br><span class=\"line\">    listeners.forEach(<span class=\"function\">(<span class=\"params\">listener</span>) =&gt;</span> listener())</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  dispatch(&#123;&#125;) <span class=\"comment\">// 初始化 state</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123; getState, dispatch, subscribe &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p>我们给 stateChanger 这个玩意起一个通用的名字：<code>reducer</code></p>\n<h2 id=\"reducer\"><a href=\"#reducer\" class=\"headerlink\" title=\"reducer\"></a>reducer</h2><p><code>createStore</code>接受一个叫 <code>reducer</code> 的函数作为参数，这个函数规定是一个纯函数，它接受两个参数，一个是 <code>state</code>，一个是 <code>action</code>。</p>\n<p>如果没有传入<code>state</code>或者 <code>state</code>是 null，那么它就会返回一个初始化的数据。如果有传入 <code>state</code> 的话，就会根据 <code>action</code> 来“修改“数据，但其实它没有、也规定不能修改 state，而是要通过上节所说的把修改路径的对象都复制一遍，然后产生一个新的对象返回。如果它不能识别你的 <code>action</code>，它就不会产生新的数据，而是（在 default 内部）把 <code>state</code> 原封不动地返回。</p>\n<p><code>reducer</code> 是不允许有副作用的。你不能在里面操作 DOM，也不能发 Ajax 请求，更不能直接修改<code>state</code>，它要做的仅仅是 —— <strong>初始化和计算新的<code>state</code></strong>。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p><code>createStore</code>现在可以直接拿来用了，套路就是：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定一个 reducer</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">reducer</span> (<span class=\"params\">state, action</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">/* 初始化 state 和 switch case */</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 生成 store</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> store = createStore(reducer)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 监听数据变化重新渲染页面</span></span><br><span class=\"line\">store.subscribe(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> renderApp(store.getState()))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 首次渲染页面</span></span><br><span class=\"line\">renderApp(store.getState()) </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 后面可以随意 dispatch 了，页面自动更新</span></span><br><span class=\"line\">store.dispatch(...)</span><br></pre></td></tr></table></figure>\n\n\n\n<p>现在的代码跟 React.js 一点关系都没有，接下来我们要把 React.js 和 Redux 结合起来，用 Redux 模式帮助管理 React.js 的应用状态。</p>\n<h2 id=\"react-redux\"><a href=\"#react-redux\" class=\"headerlink\" title=\"react-redux\"></a>react-redux</h2><p>前端中应用的状态存在的问题：一个状态可能被多个组件依赖或者影响，而 React.js 并没有提供好的解决方案，我们只能把状态提升到依赖或者影响这个状态的所有组件的公共父组件上，我们把这种行为叫做状态提升。但是需求不停变化，共享状态没完没了地提升也不是办法。<br>后来我们在 React.js 的 context 中提出，我们可用把共享状态放到父组件的 context 上，这个父组件下所有的组件都可以从 context 中直接获取到状态而不需要一层层地进行传递了。但是直接从 context 里面存放、获取数据增强了组件的耦合性；并且所有组件都可以修改 context 里面的状态就像谁都可以修改共享状态一样，导致程序运行的不可预料。</p>\n<p>既然这样，为什么不把 context 和 store 结合起来？毕竟 store 的数据不是谁都能修改，而是约定只能通过 dispatch 来进行修改，这样的话每个组件既可以去 context 里面获取 store 从而获取状态，又不用担心它们乱改数据了。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"redux底层架构实现\"><a href=\"#redux底层架构实现\" class=\"headerlink\" title=\"redux底层架构实现\"></a>redux底层架构实现</h1><p>Redux是一种架构模式</p>\n<p>React-redux 就是把 Redux 这种架构模式和 React.js 结合起来的一个库</p>\n<p>dispatch 专门负责数据修改,接受一个参数action.</p>\n<p>action是一个普通的js对象，里面必须包含一个type字段来声明用来做什么操作。</p>\n<p>原来模块（组件）修改共享数据是直接改的,这样无法把控。</p>\n<p>通过dispatch，所有数据修改必须通过它，并且必须用action来声明你的操作，只有它允许才能修改.</p>\n<p>有了如下这种集合：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> appState = &#123;</span><br><span class=\"line\">  title: &#123;</span><br><span class=\"line\">    text: <span class=\"string\">'React.js 小书'</span>,</span><br><span class=\"line\">    color: <span class=\"string\">'red'</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  content: &#123;</span><br><span class=\"line\">    text: <span class=\"string\">'React.js 小书内容'</span>,</span><br><span class=\"line\">    color: <span class=\"string\">'blue'</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dispatch</span> (<span class=\"params\">action</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">switch</span> (action.type) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'UPDATE_TITLE_TEXT'</span>:</span><br><span class=\"line\">      appState.title.text = action.text</span><br><span class=\"line\">      <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'UPDATE_TITLE_COLOR'</span>:</span><br><span class=\"line\">      appState.title.color = action.color</span><br><span class=\"line\">      <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"keyword\">default</span>:</span><br><span class=\"line\">      <span class=\"keyword\">break</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p>把它们集中到一个地方，给这个地方起个名字叫做store，然后构建一个函数createStore，用来专门生产这种这种state和dispatch的集合，这样其他App也可以用这种模式了。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createStore</span>(<span class=\"params\">state,stateChanger</span>)</span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">const</span> getState =<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>state;</span><br><span class=\"line\"><span class=\"keyword\">const</span> dispatch =<span class=\"function\">(<span class=\"params\">action</span>)=&gt;</span>stateChanger(state,action);</span><br><span class=\"line\"><span class=\"keyword\">return</span> &#123;getState,dispatch&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p><code>createStore</code>接受两个参数，一个表示应用程序状态，另一个用来描述应用程序会根据<code>action</code>发生什么变化，相当于<code>dispatch</code>函数里面的内容。<br><code>createStore</code>会返回一个对象，这个对象里面包含两个方法<code>getState</code>和<code>dispatch</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> appState = &#123;</span><br><span class=\"line\">  title: &#123;</span><br><span class=\"line\">    text: <span class=\"string\">'React.js 小书'</span>,</span><br><span class=\"line\">    color: <span class=\"string\">'red'</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  content: &#123;</span><br><span class=\"line\">    text: <span class=\"string\">'React.js 小书内容'</span>,</span><br><span class=\"line\">    color: <span class=\"string\">'blue'</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">stateChanger</span> (<span class=\"params\">state, action</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">switch</span> (action.type) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'UPDATE_TITLE_TEXT'</span>:</span><br><span class=\"line\">      state.title.text = action.text</span><br><span class=\"line\">      <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'UPDATE_TITLE_COLOR'</span>:</span><br><span class=\"line\">      state.title.color = action.color</span><br><span class=\"line\">      <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"keyword\">default</span>:</span><br><span class=\"line\">      <span class=\"keyword\">break</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> store = createStore(appState, stateChanger)</span><br><span class=\"line\"></span><br><span class=\"line\">renderApp(store.getState()) <span class=\"comment\">// 首次渲染页面</span></span><br><span class=\"line\">store.dispatch(&#123; <span class=\"attr\">type</span>: <span class=\"string\">'UPDATE_TITLE_TEXT'</span>, <span class=\"attr\">text</span>: <span class=\"string\">'《React.js 小书》'</span> &#125;) <span class=\"comment\">// 修改标题文本</span></span><br><span class=\"line\">store.dispatch(&#123; <span class=\"attr\">type</span>: <span class=\"string\">'UPDATE_TITLE_COLOR'</span>, <span class=\"attr\">color</span>: <span class=\"string\">'blue'</span> &#125;) <span class=\"comment\">// 修改标题颜色</span></span><br><span class=\"line\">renderApp(store.getState()) <span class=\"comment\">// 把新的数据渲染到页面上</span></span><br></pre></td></tr></table></figure>\n\n\n<p>针对每个不同的App，我们可以给<code>createStore</code>传入初始数据<code>appState</code> ，和一个描述数据变化的函数<code>stateChanger</code>，然后生成一个<code>store</code>，需要修改数据的时候通过<code>store.dispatch</code>,需要获取数据的时候通过<code>store.getState</code></p>\n<h2 id=\"监控数据变化\"><a href=\"#监控数据变化\" class=\"headerlink\" title=\"监控数据变化\"></a>监控数据变化</h2><p>如上代码，我们每次通过<code>dispatch</code> 修改数据的时候，其实只是数据发生了变化，如果我们不手动调用 <code>renderApp</code>，页面上的内容是不会发生变化的。但是我们总不能每次 <code>dispatch</code>的时候都手动调用一下 <code>renderApp</code>，我们肯定希望数据变化的时候程序能够智能一点地自动重新渲染数据，而不是手动调用。</p>\n<p>你说这好办，往 <code>dispatch</code>里面加<code>renderApp</code>就好了，但是这样<code>createStore</code> 就不够通用了。我们希望用一种通用的方式“监听”数据变化，然后重新渲染页面，这里要用到<strong><em>订阅者模式</em></strong>。修改 createStore：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createStore</span> (<span class=\"params\">state, stateChanger</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> listeners = []</span><br><span class=\"line\">  <span class=\"keyword\">const</span> subscribe = <span class=\"function\">(<span class=\"params\">listener</span>) =&gt;</span> listeners.push(listener)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> getState = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> state</span><br><span class=\"line\">  <span class=\"keyword\">const</span> dispatch = <span class=\"function\">(<span class=\"params\">action</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    stateChanger(state, action)</span><br><span class=\"line\">    listeners.forEach(<span class=\"function\">(<span class=\"params\">listener</span>) =&gt;</span> listener())</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123; getState, dispatch, subscribe &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p>我们在 <code>createStore</code> 里面定义了一个数组 <code>listeners</code>，还有一个新的方法 <code>subscribe</code>，可以通过 <code>store.subscribe(listener)</code> 的方式给 <code>subscribe</code> 传入一个监听函数，这个函数会被 push 到数组当中。</p>\n<p>我们修改了 <code>dispatch</code>，每次当它被调用的时候，除了会调用<code>stateChanger</code> 进行数据的修改，还会遍历 <code>listeners</code> 数组里面的函数，然后一个个地去调用。相当于我们可以通过 <code>subscribe</code> 传入数据变化的监听函数，每当 dispatch 的时候，监听函数就会被调用，这样我们就可以在每当数据变化时候进行重新渲染：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> store = createStore(appState, stateChanger)</span><br><span class=\"line\">store.subscribe(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> renderApp(store.getState()))</span><br><span class=\"line\"></span><br><span class=\"line\">renderApp(store.getState()) <span class=\"comment\">// 首次渲染页面</span></span><br><span class=\"line\">store.dispatch(&#123; <span class=\"attr\">type</span>: <span class=\"string\">'UPDATE_TITLE_TEXT'</span>, <span class=\"attr\">text</span>: <span class=\"string\">'《React.js 小书》'</span> &#125;) <span class=\"comment\">// 修改标题文本</span></span><br><span class=\"line\">store.dispatch(&#123; <span class=\"attr\">type</span>: <span class=\"string\">'UPDATE_TITLE_COLOR'</span>, <span class=\"attr\">color</span>: <span class=\"string\">'blue'</span> &#125;) <span class=\"comment\">// 修改标题颜色</span></span><br><span class=\"line\"><span class=\"comment\">// ...后面不管如何 store.dispatch，都不需要重新调用 renderApp</span></span><br></pre></td></tr></table></figure>\n\n\n<p>现在我们有了一个比较通用的 <code>createStore</code>，它可以产生一种我们新定义的数据类型 <code>store</code>，通过 <code>store.getState</code> 我们获取共享状态，而且我们约定只能通过 <code>store.dispatch</code> 修改共享状态。<code>store</code> 也允许我们通过 <code>store.subscribe</code>监听数据数据状态被修改了，并且进行后续的例如重新渲染页面的操作。<br>我们接下来会继续优化我们的 <code>createStore</code>的模式，让它使我们的应用程序获得更好的性能。</p>\n<h2 id=\"共享结构的对象\"><a href=\"#共享结构的对象\" class=\"headerlink\" title=\"共享结构的对象\"></a>共享结构的对象</h2><p>ES6中有这样的语法；</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj =&#123;<span class=\"attr\">a</span>:<span class=\"number\">1</span>,<span class=\"attr\">b</span>:<span class=\"number\">2</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> obj2 = &#123;...obj&#125; <span class=\"comment\">//=&gt;&#123;a:1,b:2&#125;</span></span><br></pre></td></tr></table></figure>\n\n\n<p><code>const obj2 = { ...obj }</code>其实就是新建一个对象 <code>obj2</code>，然后把<code>obj</code>所有的属性都复制到 <code>obj2</code> 里面，相当于对象的浅复制。上面的 <code>obj</code> 里面的内容和 <code>obj2</code>是完全一样的，但是却是两个<strong>不同的</strong>对象。除了浅复制对象，还可以覆盖、拓展对象属性：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span>, <span class=\"attr\">b</span>: <span class=\"number\">2</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> obj2 = &#123; ...obj, <span class=\"attr\">b</span>: <span class=\"number\">3</span>, <span class=\"attr\">c</span>: <span class=\"number\">4</span>&#125; <span class=\"comment\">// =&gt; &#123; a: 1, b: 3, c: 4 &#125;，覆盖了 b，新增了 c</span></span><br></pre></td></tr></table></figure>\n\n\n<p>我们可以把这种特性应用在<code>state</code> 的更新上，我们禁止直接修改原来的对象，一旦你要修改某些东西，你就得把修改路径上的所有对象复制一遍，例如，我们不写下面的修改代码：<br><code>appState.title.text = &#39;react&#39;</code><br>而是新建一个<code>appState</code>，新建<code>appState.title</code>，新建<code>appState.title.text</code>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> newAppState =&#123;<span class=\"comment\">//新建一个newAppState</span></span><br><span class=\"line\">...appState,<span class=\"comment\">//复制appState里面的内容</span></span><br><span class=\"line\">title:&#123; <span class=\"comment\">// 用一个新的对象覆盖原来的 title 属性</span></span><br><span class=\"line\">  ...appState.title,<span class=\"comment\">// 复制原来 title 对象里面的内容</span></span><br><span class=\"line\">  text:<span class=\"string\">'react'</span><span class=\"comment\">// 覆盖 text 属性</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p><code>appState</code> 和 <code>newAppState</code> 其实是两个不同的对象，因为对象浅复制的缘故，其实它们里面的属性 <code>content</code>指向的是同一个对象；但是因为 <code>title</code>被一个新的对象覆盖了，所以它们的 <code>title</code>属性是不同的。<br>我们每次修改某些数据的时候，都不会碰原来的数据，而是把需要修改数据路径上的对象都 copy 一个出来。这样有什么好处？看看我们的目的达到了：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">appState !== newAppState <span class=\"comment\">// true，数据变化了，重新渲染</span></span><br><span class=\"line\">appState.title !== newAppState.title <span class=\"comment\">// true，数据变化了，重新渲染</span></span><br><span class=\"line\">appState.content !== appState.content <span class=\"comment\">// false，数据没有变化，不需要重新渲染</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"优化性能\"><a href=\"#优化性能\" class=\"headerlink\" title=\"优化性能\"></a>优化性能</h2><p>修改<code>stateChanger</code>，让它修改数据的时候，并不会直接修改原来的数据 <code>state</code>，而是产生上述的共享结构的对象：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">stateChanger</span> (<span class=\"params\">state, action</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">switch</span> (action.type) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'UPDATE_TITLE_TEXT'</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123; <span class=\"comment\">// 构建新的对象并且返回</span></span><br><span class=\"line\">        ...state,</span><br><span class=\"line\">        title: &#123;</span><br><span class=\"line\">          ...state.title,</span><br><span class=\"line\">          text: action.text</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'UPDATE_TITLE_COLOR'</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123; <span class=\"comment\">// 构建新的对象并且返回</span></span><br><span class=\"line\">        ...state,</span><br><span class=\"line\">        title: &#123;</span><br><span class=\"line\">          ...state.title,</span><br><span class=\"line\">          color: action.color</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    <span class=\"keyword\">default</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> state <span class=\"comment\">// 没有修改，返回原来的对象</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>每次需要修改的时候都会产生新的对象，并且返回。而如果没有修改（在 default 语句中）则返回原来的 state 对象。</p>\n<p>因为<code>stateChanger</code> 不会修改原来对象了，而是返回对象，所以我们需要修改一下 <code>createStore</code>。让它用每次 <code>stateChanger(state, action)</code>的调用结果覆盖原来的 state：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createStore</span> (<span class=\"params\">state, stateChanger</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> listeners = []</span><br><span class=\"line\">  <span class=\"keyword\">const</span> subscribe = <span class=\"function\">(<span class=\"params\">listener</span>) =&gt;</span> listeners.push(listener)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> getState = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> state</span><br><span class=\"line\">  <span class=\"keyword\">const</span> dispatch = <span class=\"function\">(<span class=\"params\">action</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    state = stateChanger(state, action) <span class=\"comment\">// 覆盖原对象</span></span><br><span class=\"line\">    listeners.forEach(<span class=\"function\">(<span class=\"params\">listener</span>) =&gt;</span> listener())</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123; getState, dispatch, subscribe &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>再优化一下，其实<code>appState</code>和 <code>stateChanger</code> 可以合并到一起去：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">stateChanger</span> (<span class=\"params\">state, action</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!state) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      title: &#123;</span><br><span class=\"line\">        text: <span class=\"string\">'React.js 小书'</span>,</span><br><span class=\"line\">        color: <span class=\"string\">'red'</span>,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      content: &#123;</span><br><span class=\"line\">        text: <span class=\"string\">'React.js 小书内容'</span>,</span><br><span class=\"line\">        color: <span class=\"string\">'blue'</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">switch</span> (action.type) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'UPDATE_TITLE_TEXT'</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        ...state,</span><br><span class=\"line\">        title: &#123;</span><br><span class=\"line\">          ...state.title,</span><br><span class=\"line\">          text: action.text</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'UPDATE_TITLE_COLOR'</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        ...state,</span><br><span class=\"line\">        title: &#123;</span><br><span class=\"line\">          ...state.title,</span><br><span class=\"line\">          color: action.color</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    <span class=\"keyword\">default</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> state</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>stateChanger</code> 现在既充当了获取初始化数据的功能，也充当了生成更新数据的功能。如果有传入 <code>state</code> 就生成更新数据，否则就是初始化数据。这样我们可以优化 <code>createStore</code>成一个参数，因为 <code>state</code> 和<code>stateChanger</code> 合并到一起了：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createStore</span> (<span class=\"params\">stateChanger</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> state = <span class=\"literal\">null</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> listeners = []</span><br><span class=\"line\">  <span class=\"keyword\">const</span> subscribe = <span class=\"function\">(<span class=\"params\">listener</span>) =&gt;</span> listeners.push(listener)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> getState = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> state</span><br><span class=\"line\">  <span class=\"keyword\">const</span> dispatch = <span class=\"function\">(<span class=\"params\">action</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    state = stateChanger(state, action)</span><br><span class=\"line\">    listeners.forEach(<span class=\"function\">(<span class=\"params\">listener</span>) =&gt;</span> listener())</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  dispatch(&#123;&#125;) <span class=\"comment\">// 初始化 state</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123; getState, dispatch, subscribe &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p>我们给 stateChanger 这个玩意起一个通用的名字：<code>reducer</code></p>\n<h2 id=\"reducer\"><a href=\"#reducer\" class=\"headerlink\" title=\"reducer\"></a>reducer</h2><p><code>createStore</code>接受一个叫 <code>reducer</code> 的函数作为参数，这个函数规定是一个纯函数，它接受两个参数，一个是 <code>state</code>，一个是 <code>action</code>。</p>\n<p>如果没有传入<code>state</code>或者 <code>state</code>是 null，那么它就会返回一个初始化的数据。如果有传入 <code>state</code> 的话，就会根据 <code>action</code> 来“修改“数据，但其实它没有、也规定不能修改 state，而是要通过上节所说的把修改路径的对象都复制一遍，然后产生一个新的对象返回。如果它不能识别你的 <code>action</code>，它就不会产生新的数据，而是（在 default 内部）把 <code>state</code> 原封不动地返回。</p>\n<p><code>reducer</code> 是不允许有副作用的。你不能在里面操作 DOM，也不能发 Ajax 请求，更不能直接修改<code>state</code>，它要做的仅仅是 —— <strong>初始化和计算新的<code>state</code></strong>。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p><code>createStore</code>现在可以直接拿来用了，套路就是：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定一个 reducer</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">reducer</span> (<span class=\"params\">state, action</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">/* 初始化 state 和 switch case */</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 生成 store</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> store = createStore(reducer)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 监听数据变化重新渲染页面</span></span><br><span class=\"line\">store.subscribe(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> renderApp(store.getState()))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 首次渲染页面</span></span><br><span class=\"line\">renderApp(store.getState()) </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 后面可以随意 dispatch 了，页面自动更新</span></span><br><span class=\"line\">store.dispatch(...)</span><br></pre></td></tr></table></figure>\n\n\n\n<p>现在的代码跟 React.js 一点关系都没有，接下来我们要把 React.js 和 Redux 结合起来，用 Redux 模式帮助管理 React.js 的应用状态。</p>\n<h2 id=\"react-redux\"><a href=\"#react-redux\" class=\"headerlink\" title=\"react-redux\"></a>react-redux</h2><p>前端中应用的状态存在的问题：一个状态可能被多个组件依赖或者影响，而 React.js 并没有提供好的解决方案，我们只能把状态提升到依赖或者影响这个状态的所有组件的公共父组件上，我们把这种行为叫做状态提升。但是需求不停变化，共享状态没完没了地提升也不是办法。<br>后来我们在 React.js 的 context 中提出，我们可用把共享状态放到父组件的 context 上，这个父组件下所有的组件都可以从 context 中直接获取到状态而不需要一层层地进行传递了。但是直接从 context 里面存放、获取数据增强了组件的耦合性；并且所有组件都可以修改 context 里面的状态就像谁都可以修改共享状态一样，导致程序运行的不可预料。</p>\n<p>既然这样，为什么不把 context 和 store 结合起来？毕竟 store 的数据不是谁都能修改，而是约定只能通过 dispatch 来进行修改，这样的话每个组件既可以去 context 里面获取 store 从而获取状态，又不用担心它们乱改数据了。</p>\n"},{"title":"单页面应用","date":"2017-09-11T16:00:00.000Z","_content":"# 单页面应用\n所谓单页应用，指的是在一个页面上集成多种功能，甚至整个系统就只有一个页面，所有的业务功能都是它的子模块，通过特定的方式挂接到主界面上。它是AJAX技术的进一步升华，把AJAX的无刷新机制发挥到极致，因此能造就与桌面程序媲美的流畅用户体验。\n\n其实单页应用我们并不陌生，很多人写过ExtJS的项目，用它实现的系统，很天然的就已经是单页的了，也有人用jQuery或者其他框架实现过类似的东西。用各种JS框架，甚至不用框架，都是可以实现单页应用的，它只是一种理念。有些框架适用于开发这种系统，如果使用它们，可以得到很多便利。\n\n## 开发框架\n\nExtJS可以称为第一代单页应用框架的典型，它封装了各种UI组件，用户主要使用JavaScript来完成整个前端部分，甚至包括布局。随着功能逐渐增加，ExtJS的体积也逐渐增大，即使用于内部系统的开发，有时候也显得笨重了，更不用说开发以上这类运行在互联网上的系统。\n\njQuery由于偏重DOM操作，它的插件体系又比较松散，所以比ExtJS这个体系更适合开发在公网运行的单页系统，整个解决方案会相对比较轻量、灵活。\n\n但由于jQuery主要面向上层操作，它对代码的组织是缺乏约束的。如何在代码急剧膨胀的情况下控制每个模块的内聚性，并且适当在模块之间产生数据传递与共享，就成为了一种有挑战的事情。\n\n为了解决单页应用规模增大时候的代码逻辑问题，出现了不少MV*框架，他们的基本思路都是在JS层创建模块分层和通信机制。有的是MVC，有的是MVP，有的是MVVM，而且，它们几乎都在这些模式上产生了变异，以适应前端开发的特点。\n\n这类框架包括Backbone，Knockout，AngularJS，Avalon等。\n\n## 组件化\n这些在前端做分层的框架推动了代码的组件化，所谓组件化，在传统的Web产品中，更多的指UI组件，但其实组件是一个广泛概念，传统Web产品中UI组件占比高的原因是它的厚度不足，随着客户端代码比例的增加，相当一部分的业务逻辑也前端化，由此催生了很多非界面型组件的出现。\n\n分层带来的一个优势是，每层的职责更专一了，由此，可以对其作单元测试的覆盖，以保证其质量。传统UI层测试最头疼的问题是UI层和逻辑混杂在一起，比如往往会在远程请求的回调中更改DOM，当引入分层之后，这些东西都可以分别被测试，然后再通过场景测试来保证整体流程。\n\n## 代码隔离\n\n与开发传统页面型网站相比，实现单页应用的过程中，有一些比较值得特别关注的点。\n\n从单页应用的特点来看，它比页面型网站更加依赖于JavaScript，而由于页面的单页化，各种子功能的JavaScript代码聚集到了同一个作用域，所以代码的隔离、模块化变得很重要。\n\n在单页应用中，页面模板的使用是很普遍的。很多框架内置了特定的模板，也有的框架需要引入第三方的模板。这种模板是界面片段，我们可以把它们类比成JavaScript模块，它们是另一种类型的组件。\n\n模板也一样有隔离的需要。不隔离模板，会造成什么问题呢？模板间的冲突主要存在于id属性上，如果一个模板中包含固定的id，当它被批量渲染的时候，会造成同一个页面的作用域中出现多个相同id的元素，产生不可预测的后果。因此，我们需要在模板中避免使用id，如果有对DOM的访问需求，应当通过其他选择器来完成。如果一个单页应用的组件化程度非常高，很可能整个应用中都没有元素id的使用。\n\n## 代码合并与加载策略\n\n人们对于单页系统的加载时间容忍度与Web页面不同，如果说他们愿意为购物页面的加载等待3秒，有可能会愿意为单页应用的首次加载等待5-10秒，但在此之后，各种功能的使用应当都比较流畅，所有子功能页面尽量要在1-2秒时间内切换成功，否则他们就会感觉这个系统很慢。\n\n从这些特点来看，我们可以把更多的公共功能放到首次加载，以减小每次加载的载入量，有一些站点甚至把所有的界面和逻辑全部放到首页加载，每次业务界面切换的时候，只产生数据请求，因此它的响应是非常迅速的，比如青云的控制台就是这么做的。\n\n通常在单页应用中，无需像网站型产品一样，为了防止文件加载阻塞渲染，把js放到html后面加载，因为它的界面基本都是动态生成的。\n\n当切换功能的时候，除了产生数据请求，还需要渲染界面，这个新渲染的界面部件一般是界面模板，它从哪里来呢？来源无非是两种，一种是即时请求，像请求数据那样通过AJAX获取过来，另一种是内置于主界面的某些位置，比如script标签或者不可见的textarea中，后者在切换功能的时候速度有优势，但是加重了主页面的负担。\n\n在传统的页面型网站中，页面之间是互相隔离的，因此，如果在页面间存在可复用的代码，一般是提取成单独的文件，并且可能会需要按照每个页面的需求去进行合并。单页应用中，如果总的代码量不大，可以整体打包一次在首页载入，如果大到一定规模，再作运行时加载，加载的粒度可以搞得比较大，不同的块之间没有重复部分。\n\n## 路由与状态的管理\n\n管理路由的目的是什么呢？是为了能减少用户的导航成本。比如说我们有一个功能，经历过多次导航菜单的点击，才呈现出来。如果用户想要把这个功能地址分享给别人，他怎么才能做到呢？\n\n传统的页面型产品是不存在这个问题的，因为它就是以页面为单位的，也有的时候，服务端路由处理了这一切。但是在单页应用中，这成为了问题，因为我们只有一个页面，界面上的各种功能区块是动态生成的。所以我们要通过对路由的管理，来实现这样的功能。\n\n具体的做法就是把产品功能划分为若干状态，每个状态映射到相应的路由，然后通过pushState这样的机制，动态解析路由，使之与功能界面匹配。\n\n有了路由之后，我们的单页面产品就可以前进后退，就像是在不同页面之间一样。\n\n其实在Web产品之外，早就有了管理路由的技术方案，Adobe Flex中，就会把比如TabNavigator，甚至下拉框的选中状态对应到url上，因为它也是单“页面”的产品模式，需要面对同样的问题。\n\n当产品状态复杂到一定程度的时候，路由又变得很难应用了，因为状态的管理极其麻烦，比如开始的时候我们演示的c9.io在线IDE，它就没法把状态对应到url上。\n\n## 缓存与本地存储\n\n在单页应用的运作机制中，缓存是一个很重要的环节。\n\n由于这类系统的前端部分几乎全是静态文件，所以它能够有机会利用浏览器的缓存机制，而比如动态加载的界面模板，也完全可以做一些自定义的缓存机制，在非首次的请求中直接取缓存的版本，以加快加载速度。\n\n甚至，也出现了一些方案，在动态加载JavaScript代码的同时，把它们也缓存起来。比如Addy Osmani的这个basket.js，就利用了HTML5 localStorage作了js和css文件的缓存。\n\n在单页产品中，业务代码也常常会需要跟本地存储打交道，存储一些临时数据，可以使用localStorage或者localStorageDB来简化自己的业务代码。\n\n\n## 服务端通信\n\n传统的Web产品通常使用JSONP或者AJAX这样的方式与服务端通信，但在单页Web应用中，有很大一部分采用WebSocket这样的实时通讯方式。\n\nWebSocket与传统基于HTTP的通信机制相比，有很大的优势。它可以让服务端很便利地使用反向推送，前端只响应确实产生业务数据的事件，减少一遍又一遍无意义的AJAX轮询。\n\n由于WebSocket只在比较先进的浏览器上被支持，有一些库提供了在不同浏览器中的兼容方案，比如socket.io，它在不支持WebSocket的浏览器上会降级成使用AJAX或JSONP等方式，对业务代码完全透明、兼容。\n\n## 内存管理\n\n传统的Web页面一般是不需要考虑内存的管理的，因为用户的停留时间相对少，即使出现内存泄漏，可能很快就被刷新页面之类的操作冲掉了，但单页应用是不同的，它的用户很可能会把它开一整天，因此，我们需要对其中的DOM操作、网络连接等部分格外小心。\n\n\n## 样式规划\n\n在单页应用中，因为页面的集成度高，所有页面聚集到同一作用域，样式的规划也变得重要了。\n样式规划主要是几个方面：\n\n### 基准样式的分离\n\n这里面主要包括浏览器样式的重设、全局字体的设置、布局的基本约定和响应式支持。\n\n### 组件样式的划分\n\n这里面是两个层面的规划，首先是各种界面组件及其子元素的样式，其次是一些修饰样式。组件样式应当尽量减少互相依赖，各组件的样式允许冗余。\n\n### 堆叠次序的管理\n\n传统Web页面的特点是元素多，但是层次少，单页应用会有些不同。\n\n在单页应用中，需要提前为各种UI组件规划堆叠次序，也就是z-index，比如说，我们可能会有各种弹出对话框，浮动层，它们可能组合成各种堆叠状态。新的对话框的z-index需要比旧的高，才能确保盖在它上面。诸如此类，都需要我们对这些可能的遮盖作规划，那么，怎样去规划呢？\n\n了解通信知识的人，应当会知道，不同的频率段被划分给不同的通信方式使用，在一些国家，领空的使用也是有划分的，我们也可以用同样的方式来预先分段，不同类型的组件的z-index落到各自的区间，以避免它们的冲突。\n\n## 单页应用的产品形态\n\n我们在开始的时候提到，存在着很多新型Web产品，使用单页应用的方式构建，但实际上，这类产品不仅仅存在于Web上。点开Chrome商店，我们会发现很多离线应用，这些产品都可以算是单页应用的体现。\n\n除了各种浏览器插件，借助node-webkit这样的外壳平台，我们可以使用Web技术来构建本地应用，产品的主要部分仍然是我们熟悉的单页应用。\n\n单页应用的流行程度正在逐渐增加，大家如果关注了一些初创型互联网企业，会发现其中很大一部分的产品模式是单页化的。这种模式能带给用户流畅的体验，在开发阶段，对JavaScript技能水平要求较高。\n\n单页应用开发过程中，前后端是天然分离的，双方以API为分界。前端作为服务的消费者，后端作为服务的提供者。在此模式下，前端将会推动后端的服务化。当后端不再承担模板渲染、输出页面这样工作的情况下，它可以更专注于所提供的API的实现，而在这样的情况下，Web前端与各种移动终端的地位对等，也逐渐使得后端API不必再为每个端作差异化设计了。\n\n## 部署模式的改变\n\n在现在这个时代，我们已经可以看到一种产品的出现了，那就是“无后端”的Web应用。这是一种什么东西呢？基于这种理念，你的产品很可能只需要自己编写静态Web页面，在某种BaaS（Backend as a Service）云平台上定制服务端API和云存储，集成这个平台提供的SDK，通过AJAX等方式与之打交道，实现注册认证、社交、消息推送、实时通信、云存储等功能。\n\n我们观察一下这种模式，会发现前后端的部署已经完全分离了，前端代码完全静态化，这意味着可以把它们放置到CDN上，访问将大大地加速，而服务端托管在BaaS云上，开发者也不必去关注一些部署方面的繁琐细节。\n\n## 缺陷\n\n不利于SEO\nSEO：Search Engine Optimization 搜索引擎优化\nSEO是指通过站内优化比如网站结构调整、网站内容建设、网站代码优化等以及站外优化，比如网站站外推广、网站品牌建设等，使网站满足搜索引擎收录排名需求，在搜索引擎中提高关键词排名，从而吸引精准用户进入网站，获得免费流量，产生直接销售或品牌推广。\n\n\n\n\n","source":"_posts/2017-09-12-单页面应用.md","raw":"---\ntitle: 单页面应用\ndate: 2017-09-12\ncategories: \n- FE\ntags:\n- FE\n---\n# 单页面应用\n所谓单页应用，指的是在一个页面上集成多种功能，甚至整个系统就只有一个页面，所有的业务功能都是它的子模块，通过特定的方式挂接到主界面上。它是AJAX技术的进一步升华，把AJAX的无刷新机制发挥到极致，因此能造就与桌面程序媲美的流畅用户体验。\n\n其实单页应用我们并不陌生，很多人写过ExtJS的项目，用它实现的系统，很天然的就已经是单页的了，也有人用jQuery或者其他框架实现过类似的东西。用各种JS框架，甚至不用框架，都是可以实现单页应用的，它只是一种理念。有些框架适用于开发这种系统，如果使用它们，可以得到很多便利。\n\n## 开发框架\n\nExtJS可以称为第一代单页应用框架的典型，它封装了各种UI组件，用户主要使用JavaScript来完成整个前端部分，甚至包括布局。随着功能逐渐增加，ExtJS的体积也逐渐增大，即使用于内部系统的开发，有时候也显得笨重了，更不用说开发以上这类运行在互联网上的系统。\n\njQuery由于偏重DOM操作，它的插件体系又比较松散，所以比ExtJS这个体系更适合开发在公网运行的单页系统，整个解决方案会相对比较轻量、灵活。\n\n但由于jQuery主要面向上层操作，它对代码的组织是缺乏约束的。如何在代码急剧膨胀的情况下控制每个模块的内聚性，并且适当在模块之间产生数据传递与共享，就成为了一种有挑战的事情。\n\n为了解决单页应用规模增大时候的代码逻辑问题，出现了不少MV*框架，他们的基本思路都是在JS层创建模块分层和通信机制。有的是MVC，有的是MVP，有的是MVVM，而且，它们几乎都在这些模式上产生了变异，以适应前端开发的特点。\n\n这类框架包括Backbone，Knockout，AngularJS，Avalon等。\n\n## 组件化\n这些在前端做分层的框架推动了代码的组件化，所谓组件化，在传统的Web产品中，更多的指UI组件，但其实组件是一个广泛概念，传统Web产品中UI组件占比高的原因是它的厚度不足，随着客户端代码比例的增加，相当一部分的业务逻辑也前端化，由此催生了很多非界面型组件的出现。\n\n分层带来的一个优势是，每层的职责更专一了，由此，可以对其作单元测试的覆盖，以保证其质量。传统UI层测试最头疼的问题是UI层和逻辑混杂在一起，比如往往会在远程请求的回调中更改DOM，当引入分层之后，这些东西都可以分别被测试，然后再通过场景测试来保证整体流程。\n\n## 代码隔离\n\n与开发传统页面型网站相比，实现单页应用的过程中，有一些比较值得特别关注的点。\n\n从单页应用的特点来看，它比页面型网站更加依赖于JavaScript，而由于页面的单页化，各种子功能的JavaScript代码聚集到了同一个作用域，所以代码的隔离、模块化变得很重要。\n\n在单页应用中，页面模板的使用是很普遍的。很多框架内置了特定的模板，也有的框架需要引入第三方的模板。这种模板是界面片段，我们可以把它们类比成JavaScript模块，它们是另一种类型的组件。\n\n模板也一样有隔离的需要。不隔离模板，会造成什么问题呢？模板间的冲突主要存在于id属性上，如果一个模板中包含固定的id，当它被批量渲染的时候，会造成同一个页面的作用域中出现多个相同id的元素，产生不可预测的后果。因此，我们需要在模板中避免使用id，如果有对DOM的访问需求，应当通过其他选择器来完成。如果一个单页应用的组件化程度非常高，很可能整个应用中都没有元素id的使用。\n\n## 代码合并与加载策略\n\n人们对于单页系统的加载时间容忍度与Web页面不同，如果说他们愿意为购物页面的加载等待3秒，有可能会愿意为单页应用的首次加载等待5-10秒，但在此之后，各种功能的使用应当都比较流畅，所有子功能页面尽量要在1-2秒时间内切换成功，否则他们就会感觉这个系统很慢。\n\n从这些特点来看，我们可以把更多的公共功能放到首次加载，以减小每次加载的载入量，有一些站点甚至把所有的界面和逻辑全部放到首页加载，每次业务界面切换的时候，只产生数据请求，因此它的响应是非常迅速的，比如青云的控制台就是这么做的。\n\n通常在单页应用中，无需像网站型产品一样，为了防止文件加载阻塞渲染，把js放到html后面加载，因为它的界面基本都是动态生成的。\n\n当切换功能的时候，除了产生数据请求，还需要渲染界面，这个新渲染的界面部件一般是界面模板，它从哪里来呢？来源无非是两种，一种是即时请求，像请求数据那样通过AJAX获取过来，另一种是内置于主界面的某些位置，比如script标签或者不可见的textarea中，后者在切换功能的时候速度有优势，但是加重了主页面的负担。\n\n在传统的页面型网站中，页面之间是互相隔离的，因此，如果在页面间存在可复用的代码，一般是提取成单独的文件，并且可能会需要按照每个页面的需求去进行合并。单页应用中，如果总的代码量不大，可以整体打包一次在首页载入，如果大到一定规模，再作运行时加载，加载的粒度可以搞得比较大，不同的块之间没有重复部分。\n\n## 路由与状态的管理\n\n管理路由的目的是什么呢？是为了能减少用户的导航成本。比如说我们有一个功能，经历过多次导航菜单的点击，才呈现出来。如果用户想要把这个功能地址分享给别人，他怎么才能做到呢？\n\n传统的页面型产品是不存在这个问题的，因为它就是以页面为单位的，也有的时候，服务端路由处理了这一切。但是在单页应用中，这成为了问题，因为我们只有一个页面，界面上的各种功能区块是动态生成的。所以我们要通过对路由的管理，来实现这样的功能。\n\n具体的做法就是把产品功能划分为若干状态，每个状态映射到相应的路由，然后通过pushState这样的机制，动态解析路由，使之与功能界面匹配。\n\n有了路由之后，我们的单页面产品就可以前进后退，就像是在不同页面之间一样。\n\n其实在Web产品之外，早就有了管理路由的技术方案，Adobe Flex中，就会把比如TabNavigator，甚至下拉框的选中状态对应到url上，因为它也是单“页面”的产品模式，需要面对同样的问题。\n\n当产品状态复杂到一定程度的时候，路由又变得很难应用了，因为状态的管理极其麻烦，比如开始的时候我们演示的c9.io在线IDE，它就没法把状态对应到url上。\n\n## 缓存与本地存储\n\n在单页应用的运作机制中，缓存是一个很重要的环节。\n\n由于这类系统的前端部分几乎全是静态文件，所以它能够有机会利用浏览器的缓存机制，而比如动态加载的界面模板，也完全可以做一些自定义的缓存机制，在非首次的请求中直接取缓存的版本，以加快加载速度。\n\n甚至，也出现了一些方案，在动态加载JavaScript代码的同时，把它们也缓存起来。比如Addy Osmani的这个basket.js，就利用了HTML5 localStorage作了js和css文件的缓存。\n\n在单页产品中，业务代码也常常会需要跟本地存储打交道，存储一些临时数据，可以使用localStorage或者localStorageDB来简化自己的业务代码。\n\n\n## 服务端通信\n\n传统的Web产品通常使用JSONP或者AJAX这样的方式与服务端通信，但在单页Web应用中，有很大一部分采用WebSocket这样的实时通讯方式。\n\nWebSocket与传统基于HTTP的通信机制相比，有很大的优势。它可以让服务端很便利地使用反向推送，前端只响应确实产生业务数据的事件，减少一遍又一遍无意义的AJAX轮询。\n\n由于WebSocket只在比较先进的浏览器上被支持，有一些库提供了在不同浏览器中的兼容方案，比如socket.io，它在不支持WebSocket的浏览器上会降级成使用AJAX或JSONP等方式，对业务代码完全透明、兼容。\n\n## 内存管理\n\n传统的Web页面一般是不需要考虑内存的管理的，因为用户的停留时间相对少，即使出现内存泄漏，可能很快就被刷新页面之类的操作冲掉了，但单页应用是不同的，它的用户很可能会把它开一整天，因此，我们需要对其中的DOM操作、网络连接等部分格外小心。\n\n\n## 样式规划\n\n在单页应用中，因为页面的集成度高，所有页面聚集到同一作用域，样式的规划也变得重要了。\n样式规划主要是几个方面：\n\n### 基准样式的分离\n\n这里面主要包括浏览器样式的重设、全局字体的设置、布局的基本约定和响应式支持。\n\n### 组件样式的划分\n\n这里面是两个层面的规划，首先是各种界面组件及其子元素的样式，其次是一些修饰样式。组件样式应当尽量减少互相依赖，各组件的样式允许冗余。\n\n### 堆叠次序的管理\n\n传统Web页面的特点是元素多，但是层次少，单页应用会有些不同。\n\n在单页应用中，需要提前为各种UI组件规划堆叠次序，也就是z-index，比如说，我们可能会有各种弹出对话框，浮动层，它们可能组合成各种堆叠状态。新的对话框的z-index需要比旧的高，才能确保盖在它上面。诸如此类，都需要我们对这些可能的遮盖作规划，那么，怎样去规划呢？\n\n了解通信知识的人，应当会知道，不同的频率段被划分给不同的通信方式使用，在一些国家，领空的使用也是有划分的，我们也可以用同样的方式来预先分段，不同类型的组件的z-index落到各自的区间，以避免它们的冲突。\n\n## 单页应用的产品形态\n\n我们在开始的时候提到，存在着很多新型Web产品，使用单页应用的方式构建，但实际上，这类产品不仅仅存在于Web上。点开Chrome商店，我们会发现很多离线应用，这些产品都可以算是单页应用的体现。\n\n除了各种浏览器插件，借助node-webkit这样的外壳平台，我们可以使用Web技术来构建本地应用，产品的主要部分仍然是我们熟悉的单页应用。\n\n单页应用的流行程度正在逐渐增加，大家如果关注了一些初创型互联网企业，会发现其中很大一部分的产品模式是单页化的。这种模式能带给用户流畅的体验，在开发阶段，对JavaScript技能水平要求较高。\n\n单页应用开发过程中，前后端是天然分离的，双方以API为分界。前端作为服务的消费者，后端作为服务的提供者。在此模式下，前端将会推动后端的服务化。当后端不再承担模板渲染、输出页面这样工作的情况下，它可以更专注于所提供的API的实现，而在这样的情况下，Web前端与各种移动终端的地位对等，也逐渐使得后端API不必再为每个端作差异化设计了。\n\n## 部署模式的改变\n\n在现在这个时代，我们已经可以看到一种产品的出现了，那就是“无后端”的Web应用。这是一种什么东西呢？基于这种理念，你的产品很可能只需要自己编写静态Web页面，在某种BaaS（Backend as a Service）云平台上定制服务端API和云存储，集成这个平台提供的SDK，通过AJAX等方式与之打交道，实现注册认证、社交、消息推送、实时通信、云存储等功能。\n\n我们观察一下这种模式，会发现前后端的部署已经完全分离了，前端代码完全静态化，这意味着可以把它们放置到CDN上，访问将大大地加速，而服务端托管在BaaS云上，开发者也不必去关注一些部署方面的繁琐细节。\n\n## 缺陷\n\n不利于SEO\nSEO：Search Engine Optimization 搜索引擎优化\nSEO是指通过站内优化比如网站结构调整、网站内容建设、网站代码优化等以及站外优化，比如网站站外推广、网站品牌建设等，使网站满足搜索引擎收录排名需求，在搜索引擎中提高关键词排名，从而吸引精准用户进入网站，获得免费流量，产生直接销售或品牌推广。\n\n\n\n\n","slug":"2017-09-12-单页面应用","published":1,"updated":"2020-03-01T12:09:37.514Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckreo13pp0038ytt55war515z","content":"<h1 id=\"单页面应用\"><a href=\"#单页面应用\" class=\"headerlink\" title=\"单页面应用\"></a>单页面应用</h1><p>所谓单页应用，指的是在一个页面上集成多种功能，甚至整个系统就只有一个页面，所有的业务功能都是它的子模块，通过特定的方式挂接到主界面上。它是AJAX技术的进一步升华，把AJAX的无刷新机制发挥到极致，因此能造就与桌面程序媲美的流畅用户体验。</p>\n<p>其实单页应用我们并不陌生，很多人写过ExtJS的项目，用它实现的系统，很天然的就已经是单页的了，也有人用jQuery或者其他框架实现过类似的东西。用各种JS框架，甚至不用框架，都是可以实现单页应用的，它只是一种理念。有些框架适用于开发这种系统，如果使用它们，可以得到很多便利。</p>\n<h2 id=\"开发框架\"><a href=\"#开发框架\" class=\"headerlink\" title=\"开发框架\"></a>开发框架</h2><p>ExtJS可以称为第一代单页应用框架的典型，它封装了各种UI组件，用户主要使用JavaScript来完成整个前端部分，甚至包括布局。随着功能逐渐增加，ExtJS的体积也逐渐增大，即使用于内部系统的开发，有时候也显得笨重了，更不用说开发以上这类运行在互联网上的系统。</p>\n<p>jQuery由于偏重DOM操作，它的插件体系又比较松散，所以比ExtJS这个体系更适合开发在公网运行的单页系统，整个解决方案会相对比较轻量、灵活。</p>\n<p>但由于jQuery主要面向上层操作，它对代码的组织是缺乏约束的。如何在代码急剧膨胀的情况下控制每个模块的内聚性，并且适当在模块之间产生数据传递与共享，就成为了一种有挑战的事情。</p>\n<p>为了解决单页应用规模增大时候的代码逻辑问题，出现了不少MV*框架，他们的基本思路都是在JS层创建模块分层和通信机制。有的是MVC，有的是MVP，有的是MVVM，而且，它们几乎都在这些模式上产生了变异，以适应前端开发的特点。</p>\n<p>这类框架包括Backbone，Knockout，AngularJS，Avalon等。</p>\n<h2 id=\"组件化\"><a href=\"#组件化\" class=\"headerlink\" title=\"组件化\"></a>组件化</h2><p>这些在前端做分层的框架推动了代码的组件化，所谓组件化，在传统的Web产品中，更多的指UI组件，但其实组件是一个广泛概念，传统Web产品中UI组件占比高的原因是它的厚度不足，随着客户端代码比例的增加，相当一部分的业务逻辑也前端化，由此催生了很多非界面型组件的出现。</p>\n<p>分层带来的一个优势是，每层的职责更专一了，由此，可以对其作单元测试的覆盖，以保证其质量。传统UI层测试最头疼的问题是UI层和逻辑混杂在一起，比如往往会在远程请求的回调中更改DOM，当引入分层之后，这些东西都可以分别被测试，然后再通过场景测试来保证整体流程。</p>\n<h2 id=\"代码隔离\"><a href=\"#代码隔离\" class=\"headerlink\" title=\"代码隔离\"></a>代码隔离</h2><p>与开发传统页面型网站相比，实现单页应用的过程中，有一些比较值得特别关注的点。</p>\n<p>从单页应用的特点来看，它比页面型网站更加依赖于JavaScript，而由于页面的单页化，各种子功能的JavaScript代码聚集到了同一个作用域，所以代码的隔离、模块化变得很重要。</p>\n<p>在单页应用中，页面模板的使用是很普遍的。很多框架内置了特定的模板，也有的框架需要引入第三方的模板。这种模板是界面片段，我们可以把它们类比成JavaScript模块，它们是另一种类型的组件。</p>\n<p>模板也一样有隔离的需要。不隔离模板，会造成什么问题呢？模板间的冲突主要存在于id属性上，如果一个模板中包含固定的id，当它被批量渲染的时候，会造成同一个页面的作用域中出现多个相同id的元素，产生不可预测的后果。因此，我们需要在模板中避免使用id，如果有对DOM的访问需求，应当通过其他选择器来完成。如果一个单页应用的组件化程度非常高，很可能整个应用中都没有元素id的使用。</p>\n<h2 id=\"代码合并与加载策略\"><a href=\"#代码合并与加载策略\" class=\"headerlink\" title=\"代码合并与加载策略\"></a>代码合并与加载策略</h2><p>人们对于单页系统的加载时间容忍度与Web页面不同，如果说他们愿意为购物页面的加载等待3秒，有可能会愿意为单页应用的首次加载等待5-10秒，但在此之后，各种功能的使用应当都比较流畅，所有子功能页面尽量要在1-2秒时间内切换成功，否则他们就会感觉这个系统很慢。</p>\n<p>从这些特点来看，我们可以把更多的公共功能放到首次加载，以减小每次加载的载入量，有一些站点甚至把所有的界面和逻辑全部放到首页加载，每次业务界面切换的时候，只产生数据请求，因此它的响应是非常迅速的，比如青云的控制台就是这么做的。</p>\n<p>通常在单页应用中，无需像网站型产品一样，为了防止文件加载阻塞渲染，把js放到html后面加载，因为它的界面基本都是动态生成的。</p>\n<p>当切换功能的时候，除了产生数据请求，还需要渲染界面，这个新渲染的界面部件一般是界面模板，它从哪里来呢？来源无非是两种，一种是即时请求，像请求数据那样通过AJAX获取过来，另一种是内置于主界面的某些位置，比如script标签或者不可见的textarea中，后者在切换功能的时候速度有优势，但是加重了主页面的负担。</p>\n<p>在传统的页面型网站中，页面之间是互相隔离的，因此，如果在页面间存在可复用的代码，一般是提取成单独的文件，并且可能会需要按照每个页面的需求去进行合并。单页应用中，如果总的代码量不大，可以整体打包一次在首页载入，如果大到一定规模，再作运行时加载，加载的粒度可以搞得比较大，不同的块之间没有重复部分。</p>\n<h2 id=\"路由与状态的管理\"><a href=\"#路由与状态的管理\" class=\"headerlink\" title=\"路由与状态的管理\"></a>路由与状态的管理</h2><p>管理路由的目的是什么呢？是为了能减少用户的导航成本。比如说我们有一个功能，经历过多次导航菜单的点击，才呈现出来。如果用户想要把这个功能地址分享给别人，他怎么才能做到呢？</p>\n<p>传统的页面型产品是不存在这个问题的，因为它就是以页面为单位的，也有的时候，服务端路由处理了这一切。但是在单页应用中，这成为了问题，因为我们只有一个页面，界面上的各种功能区块是动态生成的。所以我们要通过对路由的管理，来实现这样的功能。</p>\n<p>具体的做法就是把产品功能划分为若干状态，每个状态映射到相应的路由，然后通过pushState这样的机制，动态解析路由，使之与功能界面匹配。</p>\n<p>有了路由之后，我们的单页面产品就可以前进后退，就像是在不同页面之间一样。</p>\n<p>其实在Web产品之外，早就有了管理路由的技术方案，Adobe Flex中，就会把比如TabNavigator，甚至下拉框的选中状态对应到url上，因为它也是单“页面”的产品模式，需要面对同样的问题。</p>\n<p>当产品状态复杂到一定程度的时候，路由又变得很难应用了，因为状态的管理极其麻烦，比如开始的时候我们演示的c9.io在线IDE，它就没法把状态对应到url上。</p>\n<h2 id=\"缓存与本地存储\"><a href=\"#缓存与本地存储\" class=\"headerlink\" title=\"缓存与本地存储\"></a>缓存与本地存储</h2><p>在单页应用的运作机制中，缓存是一个很重要的环节。</p>\n<p>由于这类系统的前端部分几乎全是静态文件，所以它能够有机会利用浏览器的缓存机制，而比如动态加载的界面模板，也完全可以做一些自定义的缓存机制，在非首次的请求中直接取缓存的版本，以加快加载速度。</p>\n<p>甚至，也出现了一些方案，在动态加载JavaScript代码的同时，把它们也缓存起来。比如Addy Osmani的这个basket.js，就利用了HTML5 localStorage作了js和css文件的缓存。</p>\n<p>在单页产品中，业务代码也常常会需要跟本地存储打交道，存储一些临时数据，可以使用localStorage或者localStorageDB来简化自己的业务代码。</p>\n<h2 id=\"服务端通信\"><a href=\"#服务端通信\" class=\"headerlink\" title=\"服务端通信\"></a>服务端通信</h2><p>传统的Web产品通常使用JSONP或者AJAX这样的方式与服务端通信，但在单页Web应用中，有很大一部分采用WebSocket这样的实时通讯方式。</p>\n<p>WebSocket与传统基于HTTP的通信机制相比，有很大的优势。它可以让服务端很便利地使用反向推送，前端只响应确实产生业务数据的事件，减少一遍又一遍无意义的AJAX轮询。</p>\n<p>由于WebSocket只在比较先进的浏览器上被支持，有一些库提供了在不同浏览器中的兼容方案，比如socket.io，它在不支持WebSocket的浏览器上会降级成使用AJAX或JSONP等方式，对业务代码完全透明、兼容。</p>\n<h2 id=\"内存管理\"><a href=\"#内存管理\" class=\"headerlink\" title=\"内存管理\"></a>内存管理</h2><p>传统的Web页面一般是不需要考虑内存的管理的，因为用户的停留时间相对少，即使出现内存泄漏，可能很快就被刷新页面之类的操作冲掉了，但单页应用是不同的，它的用户很可能会把它开一整天，因此，我们需要对其中的DOM操作、网络连接等部分格外小心。</p>\n<h2 id=\"样式规划\"><a href=\"#样式规划\" class=\"headerlink\" title=\"样式规划\"></a>样式规划</h2><p>在单页应用中，因为页面的集成度高，所有页面聚集到同一作用域，样式的规划也变得重要了。<br>样式规划主要是几个方面：</p>\n<h3 id=\"基准样式的分离\"><a href=\"#基准样式的分离\" class=\"headerlink\" title=\"基准样式的分离\"></a>基准样式的分离</h3><p>这里面主要包括浏览器样式的重设、全局字体的设置、布局的基本约定和响应式支持。</p>\n<h3 id=\"组件样式的划分\"><a href=\"#组件样式的划分\" class=\"headerlink\" title=\"组件样式的划分\"></a>组件样式的划分</h3><p>这里面是两个层面的规划，首先是各种界面组件及其子元素的样式，其次是一些修饰样式。组件样式应当尽量减少互相依赖，各组件的样式允许冗余。</p>\n<h3 id=\"堆叠次序的管理\"><a href=\"#堆叠次序的管理\" class=\"headerlink\" title=\"堆叠次序的管理\"></a>堆叠次序的管理</h3><p>传统Web页面的特点是元素多，但是层次少，单页应用会有些不同。</p>\n<p>在单页应用中，需要提前为各种UI组件规划堆叠次序，也就是z-index，比如说，我们可能会有各种弹出对话框，浮动层，它们可能组合成各种堆叠状态。新的对话框的z-index需要比旧的高，才能确保盖在它上面。诸如此类，都需要我们对这些可能的遮盖作规划，那么，怎样去规划呢？</p>\n<p>了解通信知识的人，应当会知道，不同的频率段被划分给不同的通信方式使用，在一些国家，领空的使用也是有划分的，我们也可以用同样的方式来预先分段，不同类型的组件的z-index落到各自的区间，以避免它们的冲突。</p>\n<h2 id=\"单页应用的产品形态\"><a href=\"#单页应用的产品形态\" class=\"headerlink\" title=\"单页应用的产品形态\"></a>单页应用的产品形态</h2><p>我们在开始的时候提到，存在着很多新型Web产品，使用单页应用的方式构建，但实际上，这类产品不仅仅存在于Web上。点开Chrome商店，我们会发现很多离线应用，这些产品都可以算是单页应用的体现。</p>\n<p>除了各种浏览器插件，借助node-webkit这样的外壳平台，我们可以使用Web技术来构建本地应用，产品的主要部分仍然是我们熟悉的单页应用。</p>\n<p>单页应用的流行程度正在逐渐增加，大家如果关注了一些初创型互联网企业，会发现其中很大一部分的产品模式是单页化的。这种模式能带给用户流畅的体验，在开发阶段，对JavaScript技能水平要求较高。</p>\n<p>单页应用开发过程中，前后端是天然分离的，双方以API为分界。前端作为服务的消费者，后端作为服务的提供者。在此模式下，前端将会推动后端的服务化。当后端不再承担模板渲染、输出页面这样工作的情况下，它可以更专注于所提供的API的实现，而在这样的情况下，Web前端与各种移动终端的地位对等，也逐渐使得后端API不必再为每个端作差异化设计了。</p>\n<h2 id=\"部署模式的改变\"><a href=\"#部署模式的改变\" class=\"headerlink\" title=\"部署模式的改变\"></a>部署模式的改变</h2><p>在现在这个时代，我们已经可以看到一种产品的出现了，那就是“无后端”的Web应用。这是一种什么东西呢？基于这种理念，你的产品很可能只需要自己编写静态Web页面，在某种BaaS（Backend as a Service）云平台上定制服务端API和云存储，集成这个平台提供的SDK，通过AJAX等方式与之打交道，实现注册认证、社交、消息推送、实时通信、云存储等功能。</p>\n<p>我们观察一下这种模式，会发现前后端的部署已经完全分离了，前端代码完全静态化，这意味着可以把它们放置到CDN上，访问将大大地加速，而服务端托管在BaaS云上，开发者也不必去关注一些部署方面的繁琐细节。</p>\n<h2 id=\"缺陷\"><a href=\"#缺陷\" class=\"headerlink\" title=\"缺陷\"></a>缺陷</h2><p>不利于SEO<br>SEO：Search Engine Optimization 搜索引擎优化<br>SEO是指通过站内优化比如网站结构调整、网站内容建设、网站代码优化等以及站外优化，比如网站站外推广、网站品牌建设等，使网站满足搜索引擎收录排名需求，在搜索引擎中提高关键词排名，从而吸引精准用户进入网站，获得免费流量，产生直接销售或品牌推广。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"单页面应用\"><a href=\"#单页面应用\" class=\"headerlink\" title=\"单页面应用\"></a>单页面应用</h1><p>所谓单页应用，指的是在一个页面上集成多种功能，甚至整个系统就只有一个页面，所有的业务功能都是它的子模块，通过特定的方式挂接到主界面上。它是AJAX技术的进一步升华，把AJAX的无刷新机制发挥到极致，因此能造就与桌面程序媲美的流畅用户体验。</p>\n<p>其实单页应用我们并不陌生，很多人写过ExtJS的项目，用它实现的系统，很天然的就已经是单页的了，也有人用jQuery或者其他框架实现过类似的东西。用各种JS框架，甚至不用框架，都是可以实现单页应用的，它只是一种理念。有些框架适用于开发这种系统，如果使用它们，可以得到很多便利。</p>\n<h2 id=\"开发框架\"><a href=\"#开发框架\" class=\"headerlink\" title=\"开发框架\"></a>开发框架</h2><p>ExtJS可以称为第一代单页应用框架的典型，它封装了各种UI组件，用户主要使用JavaScript来完成整个前端部分，甚至包括布局。随着功能逐渐增加，ExtJS的体积也逐渐增大，即使用于内部系统的开发，有时候也显得笨重了，更不用说开发以上这类运行在互联网上的系统。</p>\n<p>jQuery由于偏重DOM操作，它的插件体系又比较松散，所以比ExtJS这个体系更适合开发在公网运行的单页系统，整个解决方案会相对比较轻量、灵活。</p>\n<p>但由于jQuery主要面向上层操作，它对代码的组织是缺乏约束的。如何在代码急剧膨胀的情况下控制每个模块的内聚性，并且适当在模块之间产生数据传递与共享，就成为了一种有挑战的事情。</p>\n<p>为了解决单页应用规模增大时候的代码逻辑问题，出现了不少MV*框架，他们的基本思路都是在JS层创建模块分层和通信机制。有的是MVC，有的是MVP，有的是MVVM，而且，它们几乎都在这些模式上产生了变异，以适应前端开发的特点。</p>\n<p>这类框架包括Backbone，Knockout，AngularJS，Avalon等。</p>\n<h2 id=\"组件化\"><a href=\"#组件化\" class=\"headerlink\" title=\"组件化\"></a>组件化</h2><p>这些在前端做分层的框架推动了代码的组件化，所谓组件化，在传统的Web产品中，更多的指UI组件，但其实组件是一个广泛概念，传统Web产品中UI组件占比高的原因是它的厚度不足，随着客户端代码比例的增加，相当一部分的业务逻辑也前端化，由此催生了很多非界面型组件的出现。</p>\n<p>分层带来的一个优势是，每层的职责更专一了，由此，可以对其作单元测试的覆盖，以保证其质量。传统UI层测试最头疼的问题是UI层和逻辑混杂在一起，比如往往会在远程请求的回调中更改DOM，当引入分层之后，这些东西都可以分别被测试，然后再通过场景测试来保证整体流程。</p>\n<h2 id=\"代码隔离\"><a href=\"#代码隔离\" class=\"headerlink\" title=\"代码隔离\"></a>代码隔离</h2><p>与开发传统页面型网站相比，实现单页应用的过程中，有一些比较值得特别关注的点。</p>\n<p>从单页应用的特点来看，它比页面型网站更加依赖于JavaScript，而由于页面的单页化，各种子功能的JavaScript代码聚集到了同一个作用域，所以代码的隔离、模块化变得很重要。</p>\n<p>在单页应用中，页面模板的使用是很普遍的。很多框架内置了特定的模板，也有的框架需要引入第三方的模板。这种模板是界面片段，我们可以把它们类比成JavaScript模块，它们是另一种类型的组件。</p>\n<p>模板也一样有隔离的需要。不隔离模板，会造成什么问题呢？模板间的冲突主要存在于id属性上，如果一个模板中包含固定的id，当它被批量渲染的时候，会造成同一个页面的作用域中出现多个相同id的元素，产生不可预测的后果。因此，我们需要在模板中避免使用id，如果有对DOM的访问需求，应当通过其他选择器来完成。如果一个单页应用的组件化程度非常高，很可能整个应用中都没有元素id的使用。</p>\n<h2 id=\"代码合并与加载策略\"><a href=\"#代码合并与加载策略\" class=\"headerlink\" title=\"代码合并与加载策略\"></a>代码合并与加载策略</h2><p>人们对于单页系统的加载时间容忍度与Web页面不同，如果说他们愿意为购物页面的加载等待3秒，有可能会愿意为单页应用的首次加载等待5-10秒，但在此之后，各种功能的使用应当都比较流畅，所有子功能页面尽量要在1-2秒时间内切换成功，否则他们就会感觉这个系统很慢。</p>\n<p>从这些特点来看，我们可以把更多的公共功能放到首次加载，以减小每次加载的载入量，有一些站点甚至把所有的界面和逻辑全部放到首页加载，每次业务界面切换的时候，只产生数据请求，因此它的响应是非常迅速的，比如青云的控制台就是这么做的。</p>\n<p>通常在单页应用中，无需像网站型产品一样，为了防止文件加载阻塞渲染，把js放到html后面加载，因为它的界面基本都是动态生成的。</p>\n<p>当切换功能的时候，除了产生数据请求，还需要渲染界面，这个新渲染的界面部件一般是界面模板，它从哪里来呢？来源无非是两种，一种是即时请求，像请求数据那样通过AJAX获取过来，另一种是内置于主界面的某些位置，比如script标签或者不可见的textarea中，后者在切换功能的时候速度有优势，但是加重了主页面的负担。</p>\n<p>在传统的页面型网站中，页面之间是互相隔离的，因此，如果在页面间存在可复用的代码，一般是提取成单独的文件，并且可能会需要按照每个页面的需求去进行合并。单页应用中，如果总的代码量不大，可以整体打包一次在首页载入，如果大到一定规模，再作运行时加载，加载的粒度可以搞得比较大，不同的块之间没有重复部分。</p>\n<h2 id=\"路由与状态的管理\"><a href=\"#路由与状态的管理\" class=\"headerlink\" title=\"路由与状态的管理\"></a>路由与状态的管理</h2><p>管理路由的目的是什么呢？是为了能减少用户的导航成本。比如说我们有一个功能，经历过多次导航菜单的点击，才呈现出来。如果用户想要把这个功能地址分享给别人，他怎么才能做到呢？</p>\n<p>传统的页面型产品是不存在这个问题的，因为它就是以页面为单位的，也有的时候，服务端路由处理了这一切。但是在单页应用中，这成为了问题，因为我们只有一个页面，界面上的各种功能区块是动态生成的。所以我们要通过对路由的管理，来实现这样的功能。</p>\n<p>具体的做法就是把产品功能划分为若干状态，每个状态映射到相应的路由，然后通过pushState这样的机制，动态解析路由，使之与功能界面匹配。</p>\n<p>有了路由之后，我们的单页面产品就可以前进后退，就像是在不同页面之间一样。</p>\n<p>其实在Web产品之外，早就有了管理路由的技术方案，Adobe Flex中，就会把比如TabNavigator，甚至下拉框的选中状态对应到url上，因为它也是单“页面”的产品模式，需要面对同样的问题。</p>\n<p>当产品状态复杂到一定程度的时候，路由又变得很难应用了，因为状态的管理极其麻烦，比如开始的时候我们演示的c9.io在线IDE，它就没法把状态对应到url上。</p>\n<h2 id=\"缓存与本地存储\"><a href=\"#缓存与本地存储\" class=\"headerlink\" title=\"缓存与本地存储\"></a>缓存与本地存储</h2><p>在单页应用的运作机制中，缓存是一个很重要的环节。</p>\n<p>由于这类系统的前端部分几乎全是静态文件，所以它能够有机会利用浏览器的缓存机制，而比如动态加载的界面模板，也完全可以做一些自定义的缓存机制，在非首次的请求中直接取缓存的版本，以加快加载速度。</p>\n<p>甚至，也出现了一些方案，在动态加载JavaScript代码的同时，把它们也缓存起来。比如Addy Osmani的这个basket.js，就利用了HTML5 localStorage作了js和css文件的缓存。</p>\n<p>在单页产品中，业务代码也常常会需要跟本地存储打交道，存储一些临时数据，可以使用localStorage或者localStorageDB来简化自己的业务代码。</p>\n<h2 id=\"服务端通信\"><a href=\"#服务端通信\" class=\"headerlink\" title=\"服务端通信\"></a>服务端通信</h2><p>传统的Web产品通常使用JSONP或者AJAX这样的方式与服务端通信，但在单页Web应用中，有很大一部分采用WebSocket这样的实时通讯方式。</p>\n<p>WebSocket与传统基于HTTP的通信机制相比，有很大的优势。它可以让服务端很便利地使用反向推送，前端只响应确实产生业务数据的事件，减少一遍又一遍无意义的AJAX轮询。</p>\n<p>由于WebSocket只在比较先进的浏览器上被支持，有一些库提供了在不同浏览器中的兼容方案，比如socket.io，它在不支持WebSocket的浏览器上会降级成使用AJAX或JSONP等方式，对业务代码完全透明、兼容。</p>\n<h2 id=\"内存管理\"><a href=\"#内存管理\" class=\"headerlink\" title=\"内存管理\"></a>内存管理</h2><p>传统的Web页面一般是不需要考虑内存的管理的，因为用户的停留时间相对少，即使出现内存泄漏，可能很快就被刷新页面之类的操作冲掉了，但单页应用是不同的，它的用户很可能会把它开一整天，因此，我们需要对其中的DOM操作、网络连接等部分格外小心。</p>\n<h2 id=\"样式规划\"><a href=\"#样式规划\" class=\"headerlink\" title=\"样式规划\"></a>样式规划</h2><p>在单页应用中，因为页面的集成度高，所有页面聚集到同一作用域，样式的规划也变得重要了。<br>样式规划主要是几个方面：</p>\n<h3 id=\"基准样式的分离\"><a href=\"#基准样式的分离\" class=\"headerlink\" title=\"基准样式的分离\"></a>基准样式的分离</h3><p>这里面主要包括浏览器样式的重设、全局字体的设置、布局的基本约定和响应式支持。</p>\n<h3 id=\"组件样式的划分\"><a href=\"#组件样式的划分\" class=\"headerlink\" title=\"组件样式的划分\"></a>组件样式的划分</h3><p>这里面是两个层面的规划，首先是各种界面组件及其子元素的样式，其次是一些修饰样式。组件样式应当尽量减少互相依赖，各组件的样式允许冗余。</p>\n<h3 id=\"堆叠次序的管理\"><a href=\"#堆叠次序的管理\" class=\"headerlink\" title=\"堆叠次序的管理\"></a>堆叠次序的管理</h3><p>传统Web页面的特点是元素多，但是层次少，单页应用会有些不同。</p>\n<p>在单页应用中，需要提前为各种UI组件规划堆叠次序，也就是z-index，比如说，我们可能会有各种弹出对话框，浮动层，它们可能组合成各种堆叠状态。新的对话框的z-index需要比旧的高，才能确保盖在它上面。诸如此类，都需要我们对这些可能的遮盖作规划，那么，怎样去规划呢？</p>\n<p>了解通信知识的人，应当会知道，不同的频率段被划分给不同的通信方式使用，在一些国家，领空的使用也是有划分的，我们也可以用同样的方式来预先分段，不同类型的组件的z-index落到各自的区间，以避免它们的冲突。</p>\n<h2 id=\"单页应用的产品形态\"><a href=\"#单页应用的产品形态\" class=\"headerlink\" title=\"单页应用的产品形态\"></a>单页应用的产品形态</h2><p>我们在开始的时候提到，存在着很多新型Web产品，使用单页应用的方式构建，但实际上，这类产品不仅仅存在于Web上。点开Chrome商店，我们会发现很多离线应用，这些产品都可以算是单页应用的体现。</p>\n<p>除了各种浏览器插件，借助node-webkit这样的外壳平台，我们可以使用Web技术来构建本地应用，产品的主要部分仍然是我们熟悉的单页应用。</p>\n<p>单页应用的流行程度正在逐渐增加，大家如果关注了一些初创型互联网企业，会发现其中很大一部分的产品模式是单页化的。这种模式能带给用户流畅的体验，在开发阶段，对JavaScript技能水平要求较高。</p>\n<p>单页应用开发过程中，前后端是天然分离的，双方以API为分界。前端作为服务的消费者，后端作为服务的提供者。在此模式下，前端将会推动后端的服务化。当后端不再承担模板渲染、输出页面这样工作的情况下，它可以更专注于所提供的API的实现，而在这样的情况下，Web前端与各种移动终端的地位对等，也逐渐使得后端API不必再为每个端作差异化设计了。</p>\n<h2 id=\"部署模式的改变\"><a href=\"#部署模式的改变\" class=\"headerlink\" title=\"部署模式的改变\"></a>部署模式的改变</h2><p>在现在这个时代，我们已经可以看到一种产品的出现了，那就是“无后端”的Web应用。这是一种什么东西呢？基于这种理念，你的产品很可能只需要自己编写静态Web页面，在某种BaaS（Backend as a Service）云平台上定制服务端API和云存储，集成这个平台提供的SDK，通过AJAX等方式与之打交道，实现注册认证、社交、消息推送、实时通信、云存储等功能。</p>\n<p>我们观察一下这种模式，会发现前后端的部署已经完全分离了，前端代码完全静态化，这意味着可以把它们放置到CDN上，访问将大大地加速，而服务端托管在BaaS云上，开发者也不必去关注一些部署方面的繁琐细节。</p>\n<h2 id=\"缺陷\"><a href=\"#缺陷\" class=\"headerlink\" title=\"缺陷\"></a>缺陷</h2><p>不利于SEO<br>SEO：Search Engine Optimization 搜索引擎优化<br>SEO是指通过站内优化比如网站结构调整、网站内容建设、网站代码优化等以及站外优化，比如网站站外推广、网站品牌建设等，使网站满足搜索引擎收录排名需求，在搜索引擎中提高关键词排名，从而吸引精准用户进入网站，获得免费流量，产生直接销售或品牌推广。</p>\n"},{"title":"读- ES6标准入门","date":"2017-08-31T16:00:00.000Z","_content":"\n# ES6\n\n## let \n\n### 只在let命令所在代码块有效\n\n### 不存在变量提升（var 存在变量提升）\n#### 暂时性死区\n 只要块级作用域内存在let命令，它所声明的变量就binding这个区域，不再受外部影响\n```javascript\nvar tmp = '123';\n\nif(true){\n    tmp = 'haha';  //报错 ReferenceError\n    let tmp;\n}\n```\n代码中存在全局变量tmp，但是在if块级作用域内用**let**声明了一个tmp，因此之前赋值会报错。\n> es6中规定，如果区块中存在let和const，这个区块对这些命令声明的变量，形成了封闭作用域，声明之前就使用这些变量， 就会报错。\n\n```javascript\nif (true) {\n  // TDZ开始\n  tmp = 'abc'; // ReferenceError\n  console.log(tmp); // ReferenceError\n\n  let tmp; // TDZ结束\n  console.log(tmp); // undefined\n\n  tmp = 123;\n  console.log(tmp); // 123\n}\n```\n### 不允许重复声明\n\n## const\n\n### 声明一个只读的变量\n\n不是变量值不可改动，变量指向的内存地址不得改动\n\n``` javascript\nconst myConstObj = {};\nmyConstObj.name = \"obj\";\nmyConstObj.name    //'obj'\n\nmyConstObj = {};  // TypeError \n```\n### 块级作用域\n\n### 不存在变量提升\n\n\n## 变量的解构赋值\n\n### 数组的解构赋值\n\nvar [a,b,c] = [1,2,3];\n### 对象的解构赋值\n\nvar {bar,foo} = {foo:'aaa',bar:'bbb'};\n\n### 字符串的解构赋值\n\nconst [a,b,c,d,e] ='hello';\na//'h'\nb//'e'\nc//'l'\nd//'l'\ne//'o'\n### 数值和布尔值的解构赋值\n\n### 函数参数的解构赋值\n\n### 圆括号问题\n\n不能使用圆括号的情况\n1. 变量声明语句中，模式不能带有圆括号\n2. 函数参数中，模式不能带有圆括号\n3. 不能将整个模式或嵌套模式中的一层放在圆括号中。\n\n### 用途\n1. 交换变量的值\n[x,y] = [y,x];\n2. 从函数返回多个值\n3. 函数参数的定义\n4. 提取JSON数据\n5. 函数参数的默认值\n6. 遍历Map结构\n任何部署了Iterator接口的对象，都可以用for...of循环遍历。\n\n### 数组的扩展\n\n#### Array.from()\n\n 用于将两类对象转化为真正的数组\n1. 类数组对象：参数 ，DOM操作返回的NodeList集合\n2. 可遍历（iterable）对象（set 和map）：字符串／set 结构\n\nArray.from()可以接受两个参数\n第二个参数类似数组的map方法，用来对每个元素进行处理。\n\n#### Array.of()\n\n用于将一组值转换为数组\n构造函数Array()在参数个数为1时，实际是指定数组的长度。\n\n#### find()/findIndex()\n\nfind()用于找出第一个符合条件的数组成员，**参数是一个回调函数**，所有数组或成员依次执行该回调函数，直到找出第一个返回值为true的成员。\n返回值：该成员\nfindIndex()只是返回值不同\n返回值：返回第一个符合条件的数组成员的位置。\n\n#### fill(content,(start),(end))\n\n用content填充数组\n#### entries()/keys()/values()\n\n对键值对、键名、键值得遍历\n#### includes()\n#### rest参数\n...变量名，用于获取多余的参数\n#### ...扩展运算符\n将一个数组转为用逗号分隔的参数序列\n替代数组的apply方法\n##### 应用\n1. 合并数组\n[...arr1,...arr2,...arr3]\n2. 与解构赋值结合\n3. 函数的返回值\n4. 字符串\n5. 类数组对象\n\n#### name属性\n\n```javascript\nfunction foo(){}\nfoo.name //'foo'\n```\n### 箭头函数\n\n```javascript\nvar f=v=>v;\nvar f = function(v){\nreturn v;\n}\nvar f =()=>5;\n```\n\n**注意点**\n1. 函数体内的this对象就是定义时所在的对象，而不是使用时所在的对象。\n\n```javascript\nfunction foo()}\nsetTimeout(()=>{\nconsole.log('id':this.id);\n},1000);\n}\nfoo.call({id:42});\n//id:42\n```\n\n\n### 尾调用优化\n只保留内层函数的调用帧\n### 对象的扩展\nES6允许在对象中只写属性名，不写属性值。\n\n```javascript\nfunction f(x,y){\nreturn {x,y};\n}\n//等同于\nfunction f(x,y){\nreturn {x:x,y:y};\n}\nmodule.exports ={getItem,setItem}\n//等同于\nmodule.exports ={\ngetItem :getItem,\nsetItem:setItem\n};\n```\n\n#### Object.is()\n\n用来比较两个值是否严格相等\n\n#### Object.assign()\n\n用来将源对象的所有可枚举属性复制到目标对象。\n至少两个参数\n\n### Proxy实例方法\n\nget()用于拦截某个属性的读取操作\nset()用于拦截某个属性的赋值操作\napply()拦截函数的调用、call和apply操作\nhas()隐藏某些属性，不被in操作符发现\nconstruct()拦截new命令\ndeleteProperty() 拦截delete操作\ndefineProperty() 拦截Object.defineProperty\n\n### Promise\n\nPromise是一个对象，用来传递异步操作的消息，代表了某个未来才会知道结果的事件（通常是一个异步操作）。\n\n#### Promise对象有两个特点：\n\n1. 对象的状态不受外界影响\nPromise对象代表一个异步操作，有三种状态：Pending、Resolved、Rejected。只有异步操作的结果可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。\n2. 一旦状态改变就不会再变，任何时候都可以得到这个结果。\npending->resolved\npending->rejected\n只要其中之一发生，状态就凝固不会再变，会一直保持这个结果。就算改变已经发生，再对Promise添加回调函数也会立即得到这个结果。\n**缺点：**\n1. 无法取消，一旦新建就会立即执行\n2. 若不设置回调函数，内部抛出的错误不会反应到外部。\n3. 处于pending状态时，无法得知目前进展到哪一阶段。\n4. 若某些事件不断反复发生，使用stream模式比部署Promise更好。\n\n#### 用法\n\nPromise对象是一个构造函数，用来生成Promise实例。\n\n```javascript\nvar promise = new Promise(resolve,reject){\n    //...some code\n    if(/*异步操作成功*/){\n        resolve(value);\n    }else{\n        reject(error);\n    }\n});\n```\n\nresolve将promise状态从pending->resolved\nreject将promise状态从pending->rejected\nPromise实例生成后，可以用then方法分别指定resolved状态和rejected状态的回调函数。\n\n```javascript\npromise.then(function(value){\n    //success\n},function(value){\n    //failure\n});\n```\n\n#### 例子\n\n```javascript\nfunction timeout(ms){\n    return new Promise((resolve,reject)=>{\n        setTimeout(resolve,ms,'done');\n     });\n}\ntimeout(100).then((value)=>{\n    console.log(value);\n});\n```\n\n如果调用resolve函数和reject函数时带有参数，那么这些参数会被传递给回调函数。\nreject函数的参数通常是error对象的实例，resolve函数的参数可以是正常的值或另外一个promise实例，表示异步操作的结果可能是一个值，也可能是另一个异步操作。\n链式的then可以指定一组按照次序调用的回调函数\n\n\n```javascript\nvar someAsyncThing = function(){\n    return new Promise(function(resolve,reject){\n    //下面一行会报错，因为x没有声明\n    var x=1;\n        resolve(x+2);\n    });\n};\nsomeAsyncThing().catch(function(error){\nconsole.log('oh no',error);\n})\n.then(function(){\nconsole.log('carry on');\n});\n```\n\n#### Promise.all()\n\n用于将多个Promise实例包装成一个新的Promise实例,\n`var p = Promise.all([p1,p2,p3]);`\n参数不一定是数组，但一定具有Iterator接口\np的状态由p1、p2、p3决定，分两种情况\n1. p1 p2 p3 状态都变成fulfilled，p的状态才会变成fulfilled，p1 p2 p3的返回值组成一个数组，传递给p的回调函数\n2. 只要p1 p2 p3中任意一个被rejected，p的状态就变为rejected，此时第一个被rejected的实例的返回值会传递给p的回调函数。\n\n\n#### Promise.race()\n\n`var p = Promise.race([p1,p2,p3]);`\n只要其中之一先改变状态，p的状态就改变\n\n#### Promise.resolve()\n\n将现有对象转为Promise对象\n\n### Generator函数\n\nGenerator函数  --- 异步编程解决方案\n可以理解为一个状态机（封装了多个内部状态）\n**返回**：遍历器对象\n**特征**：\n1. function命令与函数名之间有一个*号\n2. 函数体内部使用yield语句定义不同的内部状态\n\n\n```javascript\nfunction* helloworldGenerator(){\n    yield 'hello';\n    yield 'world';\n    return 'ending';\n}\nvar hw = helloworldGenerator();\n```\n\n此段表示：函数有三个状态：hello、world、return\n调用generator函数之后，该函数不执行，返回的也不是函数运行结果，而是一个指向内部状态的指针对象（遍历器对象）\n必须调用遍历器对象的next方法，使得指针移向下一个状态\ngenerator函数是分段执行的，yield语句是暂停执行的标记，而next方法可以恢复执行\n。\n#### next方法\n\nyield语句本身没有返回值（undefined），next方法可以带一个参数，该参数就会被当做上一个yield语句的返回值。\n\n#### for ... of\n\nfor...of循环可以自动遍历generator\n\n#### yield*语句\n用来在一个Generator函数里面执行另一个Generator函数。\n\n```javascript\nfunction* foo(){\n    yield 1;\n    yield 2;\n}\nfunction* bar(){\n    yield 3;\n    yield* foo();\n    yield 4;\n}\nfor(let v of bar()){\n    console.log(v);\n}\n//3\n//1\n//2\n//4\n```\n如果yield命令后跟一个遍历器对象，那么需要在yield命令后面加上*，表明返回的是一个遍历器对象。\n\n**任何数据结构只要有Iterator接口，就可以用yield*遍历**\n取出嵌套数组的所有成员\n\n```javascript\nfunction* iterTree(tree){\n    if(Array.isArray(tree)){\n        for(let i=0;i<tree.length;i++){\n            yield* iterTree(tree[i]);\n        }\n    }else{\n        yield tree;\n    }\n}\nconst tree = [1,[2,3,4],5,[6,7],8];\nfor(let x of iterTree(tree)){\n    console.log(x);\n}\n```\n\n遍历完全二叉树\n\n```javascript\nfunction Tree(left,label,right){\n    this.left =left;\n    this.label = label;\n    this.right = right;\n}\nfunction* inorder(t){\n    if(t){\n        yield* inorder(t.left);\n        yield t.label;\n        yield* inorder(t.right);\n    }\n}\nfunction makeTree(arr){\n    if(arr.length ===1){\n        return new Tree(null,arr[0],null);\n    }\n    return new Tree(makeTree(arr[0]),arr[1],makeTree(arr[2]));\n}\nlet tree = makeTree([[[1],2,[3]],4,[[5],6,[7]]]);\nvar result =[];\nfor(let node of inorder(tree)){\n    result.push(node);\n}\nconsole.log(result);\n```\n\n\n#### generator函数的this\n\n要把generator函数当作正常的构造函数，可以通过如下方法：首先生成一个空对象，使用bind方法绑定generator内部的this。\n\n##### 应用\n\n1. 异步操作的同步化表达（处理异步操作，改写回调函数）\n\n```javascript\nfunction* loadUI(){\n    showLoadingScreen();\n    yield loadUIDataAsynchronously();\n    hideLoadingScreen();\n}\nvar loader = loadUI();\n//加载UI\nloader.next();\n//卸载UI\nloader.next();\n```\n\n\nAJAX操作\n\n```javascript\nfunction* main(){\n    var result =yield request(\"http://some.url\");\n    var resp = JSON.parse(result);\n    console.log(resp.value);\n}\nfunction request(url){\n    makeAjaxCall(url,function(response){\n        it.next(response);\n    });\n}\nvar it = main();\nit.next();\n```\n\n\n2. 部署Iterator接口\n利用generator函数可以在任意对象上部署Iterator接口\n\n```javascript\nfunction* iterEntries(obj){\n    let keys = Object.keys(obj);\n    for(let i=0;i<keys.length;i++){\n        let key = keys[i];\n        yield [key,obj[key]];\n    }\n}\nlet myObj ={foo:3,bar:7};\nfor(let [key,value] of iterEntries(myObj)){\n    console.log(key,value);\n}\n```\n\n3. 作为数据结构\ngenerator可以看做一个数组结构，因为其可以返回一系列的值，意味着可以对任意表达式提供类似数组的接口。\n\n#### async函数\nasync函数就是generator函数的语法唐\nasync对Generator的改进：\n1. 内置执行器\n2. 上面的代码调用了asyncReadFile函数，然后它自动执行，输出最后结果。\n##### async函数用法\n指定多少毫秒以后输出一个值：\n\n```javascript\nfunction timeout(ms){\n    return new Promise((resolve)=>{\n        setTimeout(resolve,ms);\n    });\n}\nasync function asyncPrint(value,ms){\n    await timeout(ms);\n    console.log(value);\n}\nasyncPrint('hello',5000); //五秒钟后输出hello\nconsole.log('later'); //先输出later\n```\n### Class\n构造函数的语法糖\n```javascript\nclass Point{\n    constructor(x,y){\n        this.x =x;\n        this.y =y;\n    }\n    toString(){\n        return this.x +','+this.y;\n    }\n}\nlet c = new Point(3,5);\nconsole.log(c.toString());\n```\n#### 实例对象\n使用new生成实例对象，实例的属性除非显示定义在其本身（即this对象）上，否则都是定义在原型上（即Class）上。\n#### name属性\nname属性总是返回紧跟在class关键字后面的类名。\n#### Class表达式\n\n```javascript\nconst MyClass = class Me{\n    getClassName(){\n        return Me.name;\n    }\n};\n```\n**类的名字是MyClass而不是Me,Me只是在Class内部代码中使用，指代当前类**\n#### Class的继承\n通过extends关键字\n子类必须在constructor中调用super方法，因为子类没有自己的this对象，而是继承了父类的this对象。\n在子类的构造函数中，只有调用super之后，才可以使用this关键字，否则会报错。\n##### 类的prototype属性和_proto_属性\n1. 子类的_proto_属性表示构造函数的继承，总是指向父类，\n2. 子类prototype属性的_proto_属性表示方法的继承，总是指向父类的prototype属性\n##### new.target属性                             \nnew.target返回new命令所作用的构造函数。如果构造函数不是通过new命令调用的，那么new.target会返回undefined。\n**子类继承父类时new.target会返回子类**\n利用这个特点，可以写出不能实例化的基类\n\n```javascript\nclass Shape{\n    constructor(){\n        if(new.target ===Shape){\n            throw new Error(\"此类不能实例化\");\n        }\n    }\n}\nclass Square extends Shape{\n    constructor(length,width){\n        super();\n        //...\n    }\n}\nvar x = new Shape();   //报错\nvar y = new Square(3,4);  // 正确\n```\n### 修饰器\n修饰器（Decorator）是一个表达式，用于修改类的行为，修饰器对类的行为的改变，是在代码编译时发生的，而不是在运行时。\n修饰器只能用于类和类的方法，不能用于函数，因为存在函数提升。\n\n","source":"_posts/2017-09-01-读ES6标准入门.md","raw":"---\ntitle: 读- ES6标准入门\ndate: 2017-09-01\ncategories: \n- FE\n- es6\ntags:\n- FE\n- es6\n---\n\n# ES6\n\n## let \n\n### 只在let命令所在代码块有效\n\n### 不存在变量提升（var 存在变量提升）\n#### 暂时性死区\n 只要块级作用域内存在let命令，它所声明的变量就binding这个区域，不再受外部影响\n```javascript\nvar tmp = '123';\n\nif(true){\n    tmp = 'haha';  //报错 ReferenceError\n    let tmp;\n}\n```\n代码中存在全局变量tmp，但是在if块级作用域内用**let**声明了一个tmp，因此之前赋值会报错。\n> es6中规定，如果区块中存在let和const，这个区块对这些命令声明的变量，形成了封闭作用域，声明之前就使用这些变量， 就会报错。\n\n```javascript\nif (true) {\n  // TDZ开始\n  tmp = 'abc'; // ReferenceError\n  console.log(tmp); // ReferenceError\n\n  let tmp; // TDZ结束\n  console.log(tmp); // undefined\n\n  tmp = 123;\n  console.log(tmp); // 123\n}\n```\n### 不允许重复声明\n\n## const\n\n### 声明一个只读的变量\n\n不是变量值不可改动，变量指向的内存地址不得改动\n\n``` javascript\nconst myConstObj = {};\nmyConstObj.name = \"obj\";\nmyConstObj.name    //'obj'\n\nmyConstObj = {};  // TypeError \n```\n### 块级作用域\n\n### 不存在变量提升\n\n\n## 变量的解构赋值\n\n### 数组的解构赋值\n\nvar [a,b,c] = [1,2,3];\n### 对象的解构赋值\n\nvar {bar,foo} = {foo:'aaa',bar:'bbb'};\n\n### 字符串的解构赋值\n\nconst [a,b,c,d,e] ='hello';\na//'h'\nb//'e'\nc//'l'\nd//'l'\ne//'o'\n### 数值和布尔值的解构赋值\n\n### 函数参数的解构赋值\n\n### 圆括号问题\n\n不能使用圆括号的情况\n1. 变量声明语句中，模式不能带有圆括号\n2. 函数参数中，模式不能带有圆括号\n3. 不能将整个模式或嵌套模式中的一层放在圆括号中。\n\n### 用途\n1. 交换变量的值\n[x,y] = [y,x];\n2. 从函数返回多个值\n3. 函数参数的定义\n4. 提取JSON数据\n5. 函数参数的默认值\n6. 遍历Map结构\n任何部署了Iterator接口的对象，都可以用for...of循环遍历。\n\n### 数组的扩展\n\n#### Array.from()\n\n 用于将两类对象转化为真正的数组\n1. 类数组对象：参数 ，DOM操作返回的NodeList集合\n2. 可遍历（iterable）对象（set 和map）：字符串／set 结构\n\nArray.from()可以接受两个参数\n第二个参数类似数组的map方法，用来对每个元素进行处理。\n\n#### Array.of()\n\n用于将一组值转换为数组\n构造函数Array()在参数个数为1时，实际是指定数组的长度。\n\n#### find()/findIndex()\n\nfind()用于找出第一个符合条件的数组成员，**参数是一个回调函数**，所有数组或成员依次执行该回调函数，直到找出第一个返回值为true的成员。\n返回值：该成员\nfindIndex()只是返回值不同\n返回值：返回第一个符合条件的数组成员的位置。\n\n#### fill(content,(start),(end))\n\n用content填充数组\n#### entries()/keys()/values()\n\n对键值对、键名、键值得遍历\n#### includes()\n#### rest参数\n...变量名，用于获取多余的参数\n#### ...扩展运算符\n将一个数组转为用逗号分隔的参数序列\n替代数组的apply方法\n##### 应用\n1. 合并数组\n[...arr1,...arr2,...arr3]\n2. 与解构赋值结合\n3. 函数的返回值\n4. 字符串\n5. 类数组对象\n\n#### name属性\n\n```javascript\nfunction foo(){}\nfoo.name //'foo'\n```\n### 箭头函数\n\n```javascript\nvar f=v=>v;\nvar f = function(v){\nreturn v;\n}\nvar f =()=>5;\n```\n\n**注意点**\n1. 函数体内的this对象就是定义时所在的对象，而不是使用时所在的对象。\n\n```javascript\nfunction foo()}\nsetTimeout(()=>{\nconsole.log('id':this.id);\n},1000);\n}\nfoo.call({id:42});\n//id:42\n```\n\n\n### 尾调用优化\n只保留内层函数的调用帧\n### 对象的扩展\nES6允许在对象中只写属性名，不写属性值。\n\n```javascript\nfunction f(x,y){\nreturn {x,y};\n}\n//等同于\nfunction f(x,y){\nreturn {x:x,y:y};\n}\nmodule.exports ={getItem,setItem}\n//等同于\nmodule.exports ={\ngetItem :getItem,\nsetItem:setItem\n};\n```\n\n#### Object.is()\n\n用来比较两个值是否严格相等\n\n#### Object.assign()\n\n用来将源对象的所有可枚举属性复制到目标对象。\n至少两个参数\n\n### Proxy实例方法\n\nget()用于拦截某个属性的读取操作\nset()用于拦截某个属性的赋值操作\napply()拦截函数的调用、call和apply操作\nhas()隐藏某些属性，不被in操作符发现\nconstruct()拦截new命令\ndeleteProperty() 拦截delete操作\ndefineProperty() 拦截Object.defineProperty\n\n### Promise\n\nPromise是一个对象，用来传递异步操作的消息，代表了某个未来才会知道结果的事件（通常是一个异步操作）。\n\n#### Promise对象有两个特点：\n\n1. 对象的状态不受外界影响\nPromise对象代表一个异步操作，有三种状态：Pending、Resolved、Rejected。只有异步操作的结果可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。\n2. 一旦状态改变就不会再变，任何时候都可以得到这个结果。\npending->resolved\npending->rejected\n只要其中之一发生，状态就凝固不会再变，会一直保持这个结果。就算改变已经发生，再对Promise添加回调函数也会立即得到这个结果。\n**缺点：**\n1. 无法取消，一旦新建就会立即执行\n2. 若不设置回调函数，内部抛出的错误不会反应到外部。\n3. 处于pending状态时，无法得知目前进展到哪一阶段。\n4. 若某些事件不断反复发生，使用stream模式比部署Promise更好。\n\n#### 用法\n\nPromise对象是一个构造函数，用来生成Promise实例。\n\n```javascript\nvar promise = new Promise(resolve,reject){\n    //...some code\n    if(/*异步操作成功*/){\n        resolve(value);\n    }else{\n        reject(error);\n    }\n});\n```\n\nresolve将promise状态从pending->resolved\nreject将promise状态从pending->rejected\nPromise实例生成后，可以用then方法分别指定resolved状态和rejected状态的回调函数。\n\n```javascript\npromise.then(function(value){\n    //success\n},function(value){\n    //failure\n});\n```\n\n#### 例子\n\n```javascript\nfunction timeout(ms){\n    return new Promise((resolve,reject)=>{\n        setTimeout(resolve,ms,'done');\n     });\n}\ntimeout(100).then((value)=>{\n    console.log(value);\n});\n```\n\n如果调用resolve函数和reject函数时带有参数，那么这些参数会被传递给回调函数。\nreject函数的参数通常是error对象的实例，resolve函数的参数可以是正常的值或另外一个promise实例，表示异步操作的结果可能是一个值，也可能是另一个异步操作。\n链式的then可以指定一组按照次序调用的回调函数\n\n\n```javascript\nvar someAsyncThing = function(){\n    return new Promise(function(resolve,reject){\n    //下面一行会报错，因为x没有声明\n    var x=1;\n        resolve(x+2);\n    });\n};\nsomeAsyncThing().catch(function(error){\nconsole.log('oh no',error);\n})\n.then(function(){\nconsole.log('carry on');\n});\n```\n\n#### Promise.all()\n\n用于将多个Promise实例包装成一个新的Promise实例,\n`var p = Promise.all([p1,p2,p3]);`\n参数不一定是数组，但一定具有Iterator接口\np的状态由p1、p2、p3决定，分两种情况\n1. p1 p2 p3 状态都变成fulfilled，p的状态才会变成fulfilled，p1 p2 p3的返回值组成一个数组，传递给p的回调函数\n2. 只要p1 p2 p3中任意一个被rejected，p的状态就变为rejected，此时第一个被rejected的实例的返回值会传递给p的回调函数。\n\n\n#### Promise.race()\n\n`var p = Promise.race([p1,p2,p3]);`\n只要其中之一先改变状态，p的状态就改变\n\n#### Promise.resolve()\n\n将现有对象转为Promise对象\n\n### Generator函数\n\nGenerator函数  --- 异步编程解决方案\n可以理解为一个状态机（封装了多个内部状态）\n**返回**：遍历器对象\n**特征**：\n1. function命令与函数名之间有一个*号\n2. 函数体内部使用yield语句定义不同的内部状态\n\n\n```javascript\nfunction* helloworldGenerator(){\n    yield 'hello';\n    yield 'world';\n    return 'ending';\n}\nvar hw = helloworldGenerator();\n```\n\n此段表示：函数有三个状态：hello、world、return\n调用generator函数之后，该函数不执行，返回的也不是函数运行结果，而是一个指向内部状态的指针对象（遍历器对象）\n必须调用遍历器对象的next方法，使得指针移向下一个状态\ngenerator函数是分段执行的，yield语句是暂停执行的标记，而next方法可以恢复执行\n。\n#### next方法\n\nyield语句本身没有返回值（undefined），next方法可以带一个参数，该参数就会被当做上一个yield语句的返回值。\n\n#### for ... of\n\nfor...of循环可以自动遍历generator\n\n#### yield*语句\n用来在一个Generator函数里面执行另一个Generator函数。\n\n```javascript\nfunction* foo(){\n    yield 1;\n    yield 2;\n}\nfunction* bar(){\n    yield 3;\n    yield* foo();\n    yield 4;\n}\nfor(let v of bar()){\n    console.log(v);\n}\n//3\n//1\n//2\n//4\n```\n如果yield命令后跟一个遍历器对象，那么需要在yield命令后面加上*，表明返回的是一个遍历器对象。\n\n**任何数据结构只要有Iterator接口，就可以用yield*遍历**\n取出嵌套数组的所有成员\n\n```javascript\nfunction* iterTree(tree){\n    if(Array.isArray(tree)){\n        for(let i=0;i<tree.length;i++){\n            yield* iterTree(tree[i]);\n        }\n    }else{\n        yield tree;\n    }\n}\nconst tree = [1,[2,3,4],5,[6,7],8];\nfor(let x of iterTree(tree)){\n    console.log(x);\n}\n```\n\n遍历完全二叉树\n\n```javascript\nfunction Tree(left,label,right){\n    this.left =left;\n    this.label = label;\n    this.right = right;\n}\nfunction* inorder(t){\n    if(t){\n        yield* inorder(t.left);\n        yield t.label;\n        yield* inorder(t.right);\n    }\n}\nfunction makeTree(arr){\n    if(arr.length ===1){\n        return new Tree(null,arr[0],null);\n    }\n    return new Tree(makeTree(arr[0]),arr[1],makeTree(arr[2]));\n}\nlet tree = makeTree([[[1],2,[3]],4,[[5],6,[7]]]);\nvar result =[];\nfor(let node of inorder(tree)){\n    result.push(node);\n}\nconsole.log(result);\n```\n\n\n#### generator函数的this\n\n要把generator函数当作正常的构造函数，可以通过如下方法：首先生成一个空对象，使用bind方法绑定generator内部的this。\n\n##### 应用\n\n1. 异步操作的同步化表达（处理异步操作，改写回调函数）\n\n```javascript\nfunction* loadUI(){\n    showLoadingScreen();\n    yield loadUIDataAsynchronously();\n    hideLoadingScreen();\n}\nvar loader = loadUI();\n//加载UI\nloader.next();\n//卸载UI\nloader.next();\n```\n\n\nAJAX操作\n\n```javascript\nfunction* main(){\n    var result =yield request(\"http://some.url\");\n    var resp = JSON.parse(result);\n    console.log(resp.value);\n}\nfunction request(url){\n    makeAjaxCall(url,function(response){\n        it.next(response);\n    });\n}\nvar it = main();\nit.next();\n```\n\n\n2. 部署Iterator接口\n利用generator函数可以在任意对象上部署Iterator接口\n\n```javascript\nfunction* iterEntries(obj){\n    let keys = Object.keys(obj);\n    for(let i=0;i<keys.length;i++){\n        let key = keys[i];\n        yield [key,obj[key]];\n    }\n}\nlet myObj ={foo:3,bar:7};\nfor(let [key,value] of iterEntries(myObj)){\n    console.log(key,value);\n}\n```\n\n3. 作为数据结构\ngenerator可以看做一个数组结构，因为其可以返回一系列的值，意味着可以对任意表达式提供类似数组的接口。\n\n#### async函数\nasync函数就是generator函数的语法唐\nasync对Generator的改进：\n1. 内置执行器\n2. 上面的代码调用了asyncReadFile函数，然后它自动执行，输出最后结果。\n##### async函数用法\n指定多少毫秒以后输出一个值：\n\n```javascript\nfunction timeout(ms){\n    return new Promise((resolve)=>{\n        setTimeout(resolve,ms);\n    });\n}\nasync function asyncPrint(value,ms){\n    await timeout(ms);\n    console.log(value);\n}\nasyncPrint('hello',5000); //五秒钟后输出hello\nconsole.log('later'); //先输出later\n```\n### Class\n构造函数的语法糖\n```javascript\nclass Point{\n    constructor(x,y){\n        this.x =x;\n        this.y =y;\n    }\n    toString(){\n        return this.x +','+this.y;\n    }\n}\nlet c = new Point(3,5);\nconsole.log(c.toString());\n```\n#### 实例对象\n使用new生成实例对象，实例的属性除非显示定义在其本身（即this对象）上，否则都是定义在原型上（即Class）上。\n#### name属性\nname属性总是返回紧跟在class关键字后面的类名。\n#### Class表达式\n\n```javascript\nconst MyClass = class Me{\n    getClassName(){\n        return Me.name;\n    }\n};\n```\n**类的名字是MyClass而不是Me,Me只是在Class内部代码中使用，指代当前类**\n#### Class的继承\n通过extends关键字\n子类必须在constructor中调用super方法，因为子类没有自己的this对象，而是继承了父类的this对象。\n在子类的构造函数中，只有调用super之后，才可以使用this关键字，否则会报错。\n##### 类的prototype属性和_proto_属性\n1. 子类的_proto_属性表示构造函数的继承，总是指向父类，\n2. 子类prototype属性的_proto_属性表示方法的继承，总是指向父类的prototype属性\n##### new.target属性                             \nnew.target返回new命令所作用的构造函数。如果构造函数不是通过new命令调用的，那么new.target会返回undefined。\n**子类继承父类时new.target会返回子类**\n利用这个特点，可以写出不能实例化的基类\n\n```javascript\nclass Shape{\n    constructor(){\n        if(new.target ===Shape){\n            throw new Error(\"此类不能实例化\");\n        }\n    }\n}\nclass Square extends Shape{\n    constructor(length,width){\n        super();\n        //...\n    }\n}\nvar x = new Shape();   //报错\nvar y = new Square(3,4);  // 正确\n```\n### 修饰器\n修饰器（Decorator）是一个表达式，用于修改类的行为，修饰器对类的行为的改变，是在代码编译时发生的，而不是在运行时。\n修饰器只能用于类和类的方法，不能用于函数，因为存在函数提升。\n\n","slug":"2017-09-01-读ES6标准入门","published":1,"updated":"2020-03-01T12:09:37.514Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckreo13pq003aytt5bq1m0jh5","content":"<h1 id=\"ES6\"><a href=\"#ES6\" class=\"headerlink\" title=\"ES6\"></a>ES6</h1><h2 id=\"let\"><a href=\"#let\" class=\"headerlink\" title=\"let\"></a>let</h2><h3 id=\"只在let命令所在代码块有效\"><a href=\"#只在let命令所在代码块有效\" class=\"headerlink\" title=\"只在let命令所在代码块有效\"></a>只在let命令所在代码块有效</h3><h3 id=\"不存在变量提升（var-存在变量提升）\"><a href=\"#不存在变量提升（var-存在变量提升）\" class=\"headerlink\" title=\"不存在变量提升（var 存在变量提升）\"></a>不存在变量提升（var 存在变量提升）</h3><h4 id=\"暂时性死区\"><a href=\"#暂时性死区\" class=\"headerlink\" title=\"暂时性死区\"></a>暂时性死区</h4><p> 只要块级作用域内存在let命令，它所声明的变量就binding这个区域，不再受外部影响</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> tmp = <span class=\"string\">'123'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"literal\">true</span>)&#123;</span><br><span class=\"line\">    tmp = <span class=\"string\">'haha'</span>;  <span class=\"comment\">//报错 ReferenceError</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> tmp;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>代码中存在全局变量tmp，但是在if块级作用域内用<strong>let</strong>声明了一个tmp，因此之前赋值会报错。</p>\n<blockquote>\n<p>es6中规定，如果区块中存在let和const，这个区块对这些命令声明的变量，形成了封闭作用域，声明之前就使用这些变量， 就会报错。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// TDZ开始</span></span><br><span class=\"line\">  tmp = <span class=\"string\">'abc'</span>; <span class=\"comment\">// ReferenceError</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(tmp); <span class=\"comment\">// ReferenceError</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> tmp; <span class=\"comment\">// TDZ结束</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(tmp); <span class=\"comment\">// undefined</span></span><br><span class=\"line\"></span><br><span class=\"line\">  tmp = <span class=\"number\">123</span>;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(tmp); <span class=\"comment\">// 123</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"不允许重复声明\"><a href=\"#不允许重复声明\" class=\"headerlink\" title=\"不允许重复声明\"></a>不允许重复声明</h3><h2 id=\"const\"><a href=\"#const\" class=\"headerlink\" title=\"const\"></a>const</h2><h3 id=\"声明一个只读的变量\"><a href=\"#声明一个只读的变量\" class=\"headerlink\" title=\"声明一个只读的变量\"></a>声明一个只读的变量</h3><p>不是变量值不可改动，变量指向的内存地址不得改动</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> myConstObj = &#123;&#125;;</span><br><span class=\"line\">myConstObj.name = <span class=\"string\">\"obj\"</span>;</span><br><span class=\"line\">myConstObj.name    <span class=\"comment\">//'obj'</span></span><br><span class=\"line\"></span><br><span class=\"line\">myConstObj = &#123;&#125;;  <span class=\"comment\">// TypeError</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"块级作用域\"><a href=\"#块级作用域\" class=\"headerlink\" title=\"块级作用域\"></a>块级作用域</h3><h3 id=\"不存在变量提升\"><a href=\"#不存在变量提升\" class=\"headerlink\" title=\"不存在变量提升\"></a>不存在变量提升</h3><h2 id=\"变量的解构赋值\"><a href=\"#变量的解构赋值\" class=\"headerlink\" title=\"变量的解构赋值\"></a>变量的解构赋值</h2><h3 id=\"数组的解构赋值\"><a href=\"#数组的解构赋值\" class=\"headerlink\" title=\"数组的解构赋值\"></a>数组的解构赋值</h3><p>var [a,b,c] = [1,2,3];</p>\n<h3 id=\"对象的解构赋值\"><a href=\"#对象的解构赋值\" class=\"headerlink\" title=\"对象的解构赋值\"></a>对象的解构赋值</h3><p>var {bar,foo} = {foo:’aaa’,bar:’bbb’};</p>\n<h3 id=\"字符串的解构赋值\"><a href=\"#字符串的解构赋值\" class=\"headerlink\" title=\"字符串的解构赋值\"></a>字符串的解构赋值</h3><p>const [a,b,c,d,e] =’hello’;<br>a//‘h’<br>b//‘e’<br>c//‘l’<br>d//‘l’<br>e//‘o’</p>\n<h3 id=\"数值和布尔值的解构赋值\"><a href=\"#数值和布尔值的解构赋值\" class=\"headerlink\" title=\"数值和布尔值的解构赋值\"></a>数值和布尔值的解构赋值</h3><h3 id=\"函数参数的解构赋值\"><a href=\"#函数参数的解构赋值\" class=\"headerlink\" title=\"函数参数的解构赋值\"></a>函数参数的解构赋值</h3><h3 id=\"圆括号问题\"><a href=\"#圆括号问题\" class=\"headerlink\" title=\"圆括号问题\"></a>圆括号问题</h3><p>不能使用圆括号的情况</p>\n<ol>\n<li>变量声明语句中，模式不能带有圆括号</li>\n<li>函数参数中，模式不能带有圆括号</li>\n<li>不能将整个模式或嵌套模式中的一层放在圆括号中。</li>\n</ol>\n<h3 id=\"用途\"><a href=\"#用途\" class=\"headerlink\" title=\"用途\"></a>用途</h3><ol>\n<li>交换变量的值<br>[x,y] = [y,x];</li>\n<li>从函数返回多个值</li>\n<li>函数参数的定义</li>\n<li>提取JSON数据</li>\n<li>函数参数的默认值</li>\n<li>遍历Map结构<br>任何部署了Iterator接口的对象，都可以用for…of循环遍历。</li>\n</ol>\n<h3 id=\"数组的扩展\"><a href=\"#数组的扩展\" class=\"headerlink\" title=\"数组的扩展\"></a>数组的扩展</h3><h4 id=\"Array-from\"><a href=\"#Array-from\" class=\"headerlink\" title=\"Array.from()\"></a>Array.from()</h4><p> 用于将两类对象转化为真正的数组</p>\n<ol>\n<li>类数组对象：参数 ，DOM操作返回的NodeList集合</li>\n<li>可遍历（iterable）对象（set 和map）：字符串／set 结构</li>\n</ol>\n<p>Array.from()可以接受两个参数<br>第二个参数类似数组的map方法，用来对每个元素进行处理。</p>\n<h4 id=\"Array-of\"><a href=\"#Array-of\" class=\"headerlink\" title=\"Array.of()\"></a>Array.of()</h4><p>用于将一组值转换为数组<br>构造函数Array()在参数个数为1时，实际是指定数组的长度。</p>\n<h4 id=\"find-findIndex\"><a href=\"#find-findIndex\" class=\"headerlink\" title=\"find()/findIndex()\"></a>find()/findIndex()</h4><p>find()用于找出第一个符合条件的数组成员，<strong>参数是一个回调函数</strong>，所有数组或成员依次执行该回调函数，直到找出第一个返回值为true的成员。<br>返回值：该成员<br>findIndex()只是返回值不同<br>返回值：返回第一个符合条件的数组成员的位置。</p>\n<h4 id=\"fill-content-start-end\"><a href=\"#fill-content-start-end\" class=\"headerlink\" title=\"fill(content,(start),(end))\"></a>fill(content,(start),(end))</h4><p>用content填充数组</p>\n<h4 id=\"entries-keys-values\"><a href=\"#entries-keys-values\" class=\"headerlink\" title=\"entries()/keys()/values()\"></a>entries()/keys()/values()</h4><p>对键值对、键名、键值得遍历</p>\n<h4 id=\"includes\"><a href=\"#includes\" class=\"headerlink\" title=\"includes()\"></a>includes()</h4><h4 id=\"rest参数\"><a href=\"#rest参数\" class=\"headerlink\" title=\"rest参数\"></a>rest参数</h4><p>…变量名，用于获取多余的参数</p>\n<h4 id=\"…扩展运算符\"><a href=\"#…扩展运算符\" class=\"headerlink\" title=\"…扩展运算符\"></a>…扩展运算符</h4><p>将一个数组转为用逗号分隔的参数序列<br>替代数组的apply方法</p>\n<h5 id=\"应用\"><a href=\"#应用\" class=\"headerlink\" title=\"应用\"></a>应用</h5><ol>\n<li>合并数组<br>[…arr1,…arr2,…arr3]</li>\n<li>与解构赋值结合</li>\n<li>函数的返回值</li>\n<li>字符串</li>\n<li>类数组对象</li>\n</ol>\n<h4 id=\"name属性\"><a href=\"#name属性\" class=\"headerlink\" title=\"name属性\"></a>name属性</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\">foo.name <span class=\"comment\">//'foo'</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"箭头函数\"><a href=\"#箭头函数\" class=\"headerlink\" title=\"箭头函数\"></a>箭头函数</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> f=<span class=\"function\"><span class=\"params\">v</span>=&gt;</span>v;</span><br><span class=\"line\"><span class=\"keyword\">var</span> f = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">v</span>)</span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> v;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> f =<span class=\"function\"><span class=\"params\">()</span>=&gt;</span><span class=\"number\">5</span>;</span><br></pre></td></tr></table></figure>\n\n<p><strong>注意点</strong></p>\n<ol>\n<li>函数体内的this对象就是定义时所在的对象，而不是使用时所在的对象。</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>)&#125;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">setTimeout</span>(<span class=\"params\">(</span>)=&gt;</span>&#123;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'id'</span>:<span class=\"keyword\">this</span>.id);</span><br><span class=\"line\">&#125;,<span class=\"number\">1000</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">foo.call(&#123;<span class=\"attr\">id</span>:<span class=\"number\">42</span>&#125;);</span><br><span class=\"line\"><span class=\"comment\">//id:42</span></span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"尾调用优化\"><a href=\"#尾调用优化\" class=\"headerlink\" title=\"尾调用优化\"></a>尾调用优化</h3><p>只保留内层函数的调用帧</p>\n<h3 id=\"对象的扩展\"><a href=\"#对象的扩展\" class=\"headerlink\" title=\"对象的扩展\"></a>对象的扩展</h3><p>ES6允许在对象中只写属性名，不写属性值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">x,y</span>)</span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> &#123;x,y&#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//等同于</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">x,y</span>)</span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> &#123;<span class=\"attr\">x</span>:x,<span class=\"attr\">y</span>:y&#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports =&#123;getItem,setItem&#125;</span><br><span class=\"line\"><span class=\"comment\">//等同于</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports =&#123;</span><br><span class=\"line\">getItem :getItem,</span><br><span class=\"line\">setItem:setItem</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Object-is\"><a href=\"#Object-is\" class=\"headerlink\" title=\"Object.is()\"></a>Object.is()</h4><p>用来比较两个值是否严格相等</p>\n<h4 id=\"Object-assign\"><a href=\"#Object-assign\" class=\"headerlink\" title=\"Object.assign()\"></a>Object.assign()</h4><p>用来将源对象的所有可枚举属性复制到目标对象。<br>至少两个参数</p>\n<h3 id=\"Proxy实例方法\"><a href=\"#Proxy实例方法\" class=\"headerlink\" title=\"Proxy实例方法\"></a>Proxy实例方法</h3><p>get()用于拦截某个属性的读取操作<br>set()用于拦截某个属性的赋值操作<br>apply()拦截函数的调用、call和apply操作<br>has()隐藏某些属性，不被in操作符发现<br>construct()拦截new命令<br>deleteProperty() 拦截delete操作<br>defineProperty() 拦截Object.defineProperty</p>\n<h3 id=\"Promise\"><a href=\"#Promise\" class=\"headerlink\" title=\"Promise\"></a>Promise</h3><p>Promise是一个对象，用来传递异步操作的消息，代表了某个未来才会知道结果的事件（通常是一个异步操作）。</p>\n<h4 id=\"Promise对象有两个特点：\"><a href=\"#Promise对象有两个特点：\" class=\"headerlink\" title=\"Promise对象有两个特点：\"></a>Promise对象有两个特点：</h4><ol>\n<li>对象的状态不受外界影响<br>Promise对象代表一个异步操作，有三种状态：Pending、Resolved、Rejected。只有异步操作的结果可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。</li>\n<li>一旦状态改变就不会再变，任何时候都可以得到这个结果。<br>pending-&gt;resolved<br>pending-&gt;rejected<br>只要其中之一发生，状态就凝固不会再变，会一直保持这个结果。就算改变已经发生，再对Promise添加回调函数也会立即得到这个结果。</li>\n</ol>\n<p><strong>缺点：</strong></p>\n<ol>\n<li>无法取消，一旦新建就会立即执行</li>\n<li>若不设置回调函数，内部抛出的错误不会反应到外部。</li>\n<li>处于pending状态时，无法得知目前进展到哪一阶段。</li>\n<li>若某些事件不断反复发生，使用stream模式比部署Promise更好。</li>\n</ol>\n<h4 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a>用法</h4><p>Promise对象是一个构造函数，用来生成Promise实例。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(resolve,reject)&#123;</span><br><span class=\"line\">    <span class=\"comment\">//...some code</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"comment\">/*异步操作成功*/</span>)&#123;</span><br><span class=\"line\">        resolve(value);</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        reject(error);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>resolve将promise状态从pending-&gt;resolved<br>reject将promise状态从pending-&gt;rejected<br>Promise实例生成后，可以用then方法分别指定resolved状态和rejected状态的回调函数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">promise.then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//success</span></span><br><span class=\"line\">&#125;,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//failure</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">timeout</span>(<span class=\"params\">ms</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class=\"line\">        setTimeout(resolve,ms,<span class=\"string\">'done'</span>);</span><br><span class=\"line\">     &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">timeout(<span class=\"number\">100</span>).then(<span class=\"function\">(<span class=\"params\">value</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(value);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>如果调用resolve函数和reject函数时带有参数，那么这些参数会被传递给回调函数。<br>reject函数的参数通常是error对象的实例，resolve函数的参数可以是正常的值或另外一个promise实例，表示异步操作的结果可能是一个值，也可能是另一个异步操作。<br>链式的then可以指定一组按照次序调用的回调函数</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> someAsyncThing = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve,reject</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//下面一行会报错，因为x没有声明</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> x=<span class=\"number\">1</span>;</span><br><span class=\"line\">        resolve(x+<span class=\"number\">2</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">someAsyncThing().catch(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">error</span>)</span>&#123;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'oh no'</span>,error);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'carry on'</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Promise-all\"><a href=\"#Promise-all\" class=\"headerlink\" title=\"Promise.all()\"></a>Promise.all()</h4><p>用于将多个Promise实例包装成一个新的Promise实例,<br><code>var p = Promise.all([p1,p2,p3]);</code><br>参数不一定是数组，但一定具有Iterator接口<br>p的状态由p1、p2、p3决定，分两种情况</p>\n<ol>\n<li>p1 p2 p3 状态都变成fulfilled，p的状态才会变成fulfilled，p1 p2 p3的返回值组成一个数组，传递给p的回调函数</li>\n<li>只要p1 p2 p3中任意一个被rejected，p的状态就变为rejected，此时第一个被rejected的实例的返回值会传递给p的回调函数。</li>\n</ol>\n<h4 id=\"Promise-race\"><a href=\"#Promise-race\" class=\"headerlink\" title=\"Promise.race()\"></a>Promise.race()</h4><p><code>var p = Promise.race([p1,p2,p3]);</code><br>只要其中之一先改变状态，p的状态就改变</p>\n<h4 id=\"Promise-resolve\"><a href=\"#Promise-resolve\" class=\"headerlink\" title=\"Promise.resolve()\"></a>Promise.resolve()</h4><p>将现有对象转为Promise对象</p>\n<h3 id=\"Generator函数\"><a href=\"#Generator函数\" class=\"headerlink\" title=\"Generator函数\"></a>Generator函数</h3><p>Generator函数  — 异步编程解决方案<br>可以理解为一个状态机（封装了多个内部状态）<br><strong>返回</strong>：遍历器对象<br><strong>特征</strong>：</p>\n<ol>\n<li>function命令与函数名之间有一个*号</li>\n<li>函数体内部使用yield语句定义不同的内部状态</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">helloworldGenerator</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"string\">'hello'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"string\">'world'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'ending'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> hw = helloworldGenerator();</span><br></pre></td></tr></table></figure>\n\n<p>此段表示：函数有三个状态：hello、world、return<br>调用generator函数之后，该函数不执行，返回的也不是函数运行结果，而是一个指向内部状态的指针对象（遍历器对象）<br>必须调用遍历器对象的next方法，使得指针移向下一个状态<br>generator函数是分段执行的，yield语句是暂停执行的标记，而next方法可以恢复执行<br>。</p>\n<h4 id=\"next方法\"><a href=\"#next方法\" class=\"headerlink\" title=\"next方法\"></a>next方法</h4><p>yield语句本身没有返回值（undefined），next方法可以带一个参数，该参数就会被当做上一个yield语句的返回值。</p>\n<h4 id=\"for-…-of\"><a href=\"#for-…-of\" class=\"headerlink\" title=\"for … of\"></a>for … of</h4><p>for…of循环可以自动遍历generator</p>\n<h4 id=\"yield-语句\"><a href=\"#yield-语句\" class=\"headerlink\" title=\"yield*语句\"></a>yield*语句</h4><p>用来在一个Generator函数里面执行另一个Generator函数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">foo</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">bar</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"number\">3</span>;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span>* foo();</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"number\">4</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> v <span class=\"keyword\">of</span> bar())&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(v);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//3</span></span><br><span class=\"line\"><span class=\"comment\">//1</span></span><br><span class=\"line\"><span class=\"comment\">//2</span></span><br><span class=\"line\"><span class=\"comment\">//4</span></span><br></pre></td></tr></table></figure>\n<p>如果yield命令后跟一个遍历器对象，那么需要在yield命令后面加上*，表明返回的是一个遍历器对象。</p>\n<p><strong>任何数据结构只要有Iterator接口，就可以用yield*遍历</strong><br>取出嵌套数组的所有成员</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">iterTree</span>(<span class=\"params\">tree</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">Array</span>.isArray(tree))&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i=<span class=\"number\">0</span>;i&lt;tree.length;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">yield</span>* iterTree(tree[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">yield</span> tree;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> tree = [<span class=\"number\">1</span>,[<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>],<span class=\"number\">5</span>,[<span class=\"number\">6</span>,<span class=\"number\">7</span>],<span class=\"number\">8</span>];</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> x <span class=\"keyword\">of</span> iterTree(tree))&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(x);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>遍历完全二叉树</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Tree</span>(<span class=\"params\">left,label,right</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.left =left;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.label = label;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.right = right;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">inorder</span>(<span class=\"params\">t</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(t)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">yield</span>* inorder(t.left);</span><br><span class=\"line\">        <span class=\"keyword\">yield</span> t.label;</span><br><span class=\"line\">        <span class=\"keyword\">yield</span>* inorder(t.right);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">makeTree</span>(<span class=\"params\">arr</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(arr.length ===<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Tree(<span class=\"literal\">null</span>,arr[<span class=\"number\">0</span>],<span class=\"literal\">null</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Tree(makeTree(arr[<span class=\"number\">0</span>]),arr[<span class=\"number\">1</span>],makeTree(arr[<span class=\"number\">2</span>]));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> tree = makeTree([[[<span class=\"number\">1</span>],<span class=\"number\">2</span>,[<span class=\"number\">3</span>]],<span class=\"number\">4</span>,[[<span class=\"number\">5</span>],<span class=\"number\">6</span>,[<span class=\"number\">7</span>]]]);</span><br><span class=\"line\"><span class=\"keyword\">var</span> result =[];</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> node <span class=\"keyword\">of</span> inorder(tree))&#123;</span><br><span class=\"line\">    result.push(node);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result);</span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"generator函数的this\"><a href=\"#generator函数的this\" class=\"headerlink\" title=\"generator函数的this\"></a>generator函数的this</h4><p>要把generator函数当作正常的构造函数，可以通过如下方法：首先生成一个空对象，使用bind方法绑定generator内部的this。</p>\n<h5 id=\"应用-1\"><a href=\"#应用-1\" class=\"headerlink\" title=\"应用\"></a>应用</h5><ol>\n<li>异步操作的同步化表达（处理异步操作，改写回调函数）</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">loadUI</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    showLoadingScreen();</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> loadUIDataAsynchronously();</span><br><span class=\"line\">    hideLoadingScreen();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> loader = loadUI();</span><br><span class=\"line\"><span class=\"comment\">//加载UI</span></span><br><span class=\"line\">loader.next();</span><br><span class=\"line\"><span class=\"comment\">//卸载UI</span></span><br><span class=\"line\">loader.next();</span><br></pre></td></tr></table></figure>\n\n\n<p>AJAX操作</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">main</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> result =<span class=\"keyword\">yield</span> request(<span class=\"string\">\"http://some.url\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> resp = <span class=\"built_in\">JSON</span>.parse(result);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(resp.value);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">request</span>(<span class=\"params\">url</span>)</span>&#123;</span><br><span class=\"line\">    makeAjaxCall(url,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">response</span>)</span>&#123;</span><br><span class=\"line\">        it.next(response);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> it = main();</span><br><span class=\"line\">it.next();</span><br></pre></td></tr></table></figure>\n\n\n<ol start=\"2\">\n<li>部署Iterator接口<br>利用generator函数可以在任意对象上部署Iterator接口</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">iterEntries</span>(<span class=\"params\">obj</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> keys = <span class=\"built_in\">Object</span>.keys(obj);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i=<span class=\"number\">0</span>;i&lt;keys.length;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> key = keys[i];</span><br><span class=\"line\">        <span class=\"keyword\">yield</span> [key,obj[key]];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> myObj =&#123;<span class=\"attr\">foo</span>:<span class=\"number\">3</span>,<span class=\"attr\">bar</span>:<span class=\"number\">7</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> [key,value] <span class=\"keyword\">of</span> iterEntries(myObj))&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(key,value);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>作为数据结构<br>generator可以看做一个数组结构，因为其可以返回一系列的值，意味着可以对任意表达式提供类似数组的接口。</li>\n</ol>\n<h4 id=\"async函数\"><a href=\"#async函数\" class=\"headerlink\" title=\"async函数\"></a>async函数</h4><p>async函数就是generator函数的语法唐<br>async对Generator的改进：</p>\n<ol>\n<li>内置执行器</li>\n<li>上面的代码调用了asyncReadFile函数，然后它自动执行，输出最后结果。<h5 id=\"async函数用法\"><a href=\"#async函数用法\" class=\"headerlink\" title=\"async函数用法\"></a>async函数用法</h5>指定多少毫秒以后输出一个值：</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">timeout</span>(<span class=\"params\">ms</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>)=&gt;</span>&#123;</span><br><span class=\"line\">        setTimeout(resolve,ms);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">asyncPrint</span>(<span class=\"params\">value,ms</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> timeout(ms);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(value);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">asyncPrint(<span class=\"string\">'hello'</span>,<span class=\"number\">5000</span>); <span class=\"comment\">//五秒钟后输出hello</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'later'</span>); <span class=\"comment\">//先输出later</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Class\"><a href=\"#Class\" class=\"headerlink\" title=\"Class\"></a>Class</h3><p>构造函数的语法糖</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Point</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(x,y)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.x =x;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.y =y;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    toString()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.x +<span class=\"string\">','</span>+<span class=\"keyword\">this</span>.y;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> c = <span class=\"keyword\">new</span> Point(<span class=\"number\">3</span>,<span class=\"number\">5</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(c.toString());</span><br></pre></td></tr></table></figure>\n<h4 id=\"实例对象\"><a href=\"#实例对象\" class=\"headerlink\" title=\"实例对象\"></a>实例对象</h4><p>使用new生成实例对象，实例的属性除非显示定义在其本身（即this对象）上，否则都是定义在原型上（即Class）上。</p>\n<h4 id=\"name属性-1\"><a href=\"#name属性-1\" class=\"headerlink\" title=\"name属性\"></a>name属性</h4><p>name属性总是返回紧跟在class关键字后面的类名。</p>\n<h4 id=\"Class表达式\"><a href=\"#Class表达式\" class=\"headerlink\" title=\"Class表达式\"></a>Class表达式</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> MyClass = <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Me</span></span>&#123;</span><br><span class=\"line\">    getClassName()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Me.name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p><strong>类的名字是MyClass而不是Me,Me只是在Class内部代码中使用，指代当前类</strong></p>\n<h4 id=\"Class的继承\"><a href=\"#Class的继承\" class=\"headerlink\" title=\"Class的继承\"></a>Class的继承</h4><p>通过extends关键字<br>子类必须在constructor中调用super方法，因为子类没有自己的this对象，而是继承了父类的this对象。<br>在子类的构造函数中，只有调用super之后，才可以使用this关键字，否则会报错。</p>\n<h5 id=\"类的prototype属性和-proto-属性\"><a href=\"#类的prototype属性和-proto-属性\" class=\"headerlink\" title=\"类的prototype属性和_proto_属性\"></a>类的prototype属性和_proto_属性</h5><ol>\n<li>子类的_proto_属性表示构造函数的继承，总是指向父类，</li>\n<li>子类prototype属性的_proto_属性表示方法的继承，总是指向父类的prototype属性<h5 id=\"new-target属性\"><a href=\"#new-target属性\" class=\"headerlink\" title=\"new.target属性\"></a>new.target属性</h5>new.target返回new命令所作用的构造函数。如果构造函数不是通过new命令调用的，那么new.target会返回undefined。</li>\n</ol>\n<p><strong>子类继承父类时new.target会返回子类</strong><br>利用这个特点，可以写出不能实例化的基类</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Shape</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">new</span>.target ===Shape)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">\"此类不能实例化\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Square</span> <span class=\"keyword\">extends</span> <span class=\"title\">Shape</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(length,width)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>();</span><br><span class=\"line\">        <span class=\"comment\">//...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"keyword\">new</span> Shape();   <span class=\"comment\">//报错</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> y = <span class=\"keyword\">new</span> Square(<span class=\"number\">3</span>,<span class=\"number\">4</span>);  <span class=\"comment\">// 正确</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"修饰器\"><a href=\"#修饰器\" class=\"headerlink\" title=\"修饰器\"></a>修饰器</h3><p>修饰器（Decorator）是一个表达式，用于修改类的行为，修饰器对类的行为的改变，是在代码编译时发生的，而不是在运行时。<br>修饰器只能用于类和类的方法，不能用于函数，因为存在函数提升。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"ES6\"><a href=\"#ES6\" class=\"headerlink\" title=\"ES6\"></a>ES6</h1><h2 id=\"let\"><a href=\"#let\" class=\"headerlink\" title=\"let\"></a>let</h2><h3 id=\"只在let命令所在代码块有效\"><a href=\"#只在let命令所在代码块有效\" class=\"headerlink\" title=\"只在let命令所在代码块有效\"></a>只在let命令所在代码块有效</h3><h3 id=\"不存在变量提升（var-存在变量提升）\"><a href=\"#不存在变量提升（var-存在变量提升）\" class=\"headerlink\" title=\"不存在变量提升（var 存在变量提升）\"></a>不存在变量提升（var 存在变量提升）</h3><h4 id=\"暂时性死区\"><a href=\"#暂时性死区\" class=\"headerlink\" title=\"暂时性死区\"></a>暂时性死区</h4><p> 只要块级作用域内存在let命令，它所声明的变量就binding这个区域，不再受外部影响</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> tmp = <span class=\"string\">'123'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"literal\">true</span>)&#123;</span><br><span class=\"line\">    tmp = <span class=\"string\">'haha'</span>;  <span class=\"comment\">//报错 ReferenceError</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> tmp;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>代码中存在全局变量tmp，但是在if块级作用域内用<strong>let</strong>声明了一个tmp，因此之前赋值会报错。</p>\n<blockquote>\n<p>es6中规定，如果区块中存在let和const，这个区块对这些命令声明的变量，形成了封闭作用域，声明之前就使用这些变量， 就会报错。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// TDZ开始</span></span><br><span class=\"line\">  tmp = <span class=\"string\">'abc'</span>; <span class=\"comment\">// ReferenceError</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(tmp); <span class=\"comment\">// ReferenceError</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> tmp; <span class=\"comment\">// TDZ结束</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(tmp); <span class=\"comment\">// undefined</span></span><br><span class=\"line\"></span><br><span class=\"line\">  tmp = <span class=\"number\">123</span>;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(tmp); <span class=\"comment\">// 123</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"不允许重复声明\"><a href=\"#不允许重复声明\" class=\"headerlink\" title=\"不允许重复声明\"></a>不允许重复声明</h3><h2 id=\"const\"><a href=\"#const\" class=\"headerlink\" title=\"const\"></a>const</h2><h3 id=\"声明一个只读的变量\"><a href=\"#声明一个只读的变量\" class=\"headerlink\" title=\"声明一个只读的变量\"></a>声明一个只读的变量</h3><p>不是变量值不可改动，变量指向的内存地址不得改动</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> myConstObj = &#123;&#125;;</span><br><span class=\"line\">myConstObj.name = <span class=\"string\">\"obj\"</span>;</span><br><span class=\"line\">myConstObj.name    <span class=\"comment\">//'obj'</span></span><br><span class=\"line\"></span><br><span class=\"line\">myConstObj = &#123;&#125;;  <span class=\"comment\">// TypeError</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"块级作用域\"><a href=\"#块级作用域\" class=\"headerlink\" title=\"块级作用域\"></a>块级作用域</h3><h3 id=\"不存在变量提升\"><a href=\"#不存在变量提升\" class=\"headerlink\" title=\"不存在变量提升\"></a>不存在变量提升</h3><h2 id=\"变量的解构赋值\"><a href=\"#变量的解构赋值\" class=\"headerlink\" title=\"变量的解构赋值\"></a>变量的解构赋值</h2><h3 id=\"数组的解构赋值\"><a href=\"#数组的解构赋值\" class=\"headerlink\" title=\"数组的解构赋值\"></a>数组的解构赋值</h3><p>var [a,b,c] = [1,2,3];</p>\n<h3 id=\"对象的解构赋值\"><a href=\"#对象的解构赋值\" class=\"headerlink\" title=\"对象的解构赋值\"></a>对象的解构赋值</h3><p>var {bar,foo} = {foo:’aaa’,bar:’bbb’};</p>\n<h3 id=\"字符串的解构赋值\"><a href=\"#字符串的解构赋值\" class=\"headerlink\" title=\"字符串的解构赋值\"></a>字符串的解构赋值</h3><p>const [a,b,c,d,e] =’hello’;<br>a//‘h’<br>b//‘e’<br>c//‘l’<br>d//‘l’<br>e//‘o’</p>\n<h3 id=\"数值和布尔值的解构赋值\"><a href=\"#数值和布尔值的解构赋值\" class=\"headerlink\" title=\"数值和布尔值的解构赋值\"></a>数值和布尔值的解构赋值</h3><h3 id=\"函数参数的解构赋值\"><a href=\"#函数参数的解构赋值\" class=\"headerlink\" title=\"函数参数的解构赋值\"></a>函数参数的解构赋值</h3><h3 id=\"圆括号问题\"><a href=\"#圆括号问题\" class=\"headerlink\" title=\"圆括号问题\"></a>圆括号问题</h3><p>不能使用圆括号的情况</p>\n<ol>\n<li>变量声明语句中，模式不能带有圆括号</li>\n<li>函数参数中，模式不能带有圆括号</li>\n<li>不能将整个模式或嵌套模式中的一层放在圆括号中。</li>\n</ol>\n<h3 id=\"用途\"><a href=\"#用途\" class=\"headerlink\" title=\"用途\"></a>用途</h3><ol>\n<li>交换变量的值<br>[x,y] = [y,x];</li>\n<li>从函数返回多个值</li>\n<li>函数参数的定义</li>\n<li>提取JSON数据</li>\n<li>函数参数的默认值</li>\n<li>遍历Map结构<br>任何部署了Iterator接口的对象，都可以用for…of循环遍历。</li>\n</ol>\n<h3 id=\"数组的扩展\"><a href=\"#数组的扩展\" class=\"headerlink\" title=\"数组的扩展\"></a>数组的扩展</h3><h4 id=\"Array-from\"><a href=\"#Array-from\" class=\"headerlink\" title=\"Array.from()\"></a>Array.from()</h4><p> 用于将两类对象转化为真正的数组</p>\n<ol>\n<li>类数组对象：参数 ，DOM操作返回的NodeList集合</li>\n<li>可遍历（iterable）对象（set 和map）：字符串／set 结构</li>\n</ol>\n<p>Array.from()可以接受两个参数<br>第二个参数类似数组的map方法，用来对每个元素进行处理。</p>\n<h4 id=\"Array-of\"><a href=\"#Array-of\" class=\"headerlink\" title=\"Array.of()\"></a>Array.of()</h4><p>用于将一组值转换为数组<br>构造函数Array()在参数个数为1时，实际是指定数组的长度。</p>\n<h4 id=\"find-findIndex\"><a href=\"#find-findIndex\" class=\"headerlink\" title=\"find()/findIndex()\"></a>find()/findIndex()</h4><p>find()用于找出第一个符合条件的数组成员，<strong>参数是一个回调函数</strong>，所有数组或成员依次执行该回调函数，直到找出第一个返回值为true的成员。<br>返回值：该成员<br>findIndex()只是返回值不同<br>返回值：返回第一个符合条件的数组成员的位置。</p>\n<h4 id=\"fill-content-start-end\"><a href=\"#fill-content-start-end\" class=\"headerlink\" title=\"fill(content,(start),(end))\"></a>fill(content,(start),(end))</h4><p>用content填充数组</p>\n<h4 id=\"entries-keys-values\"><a href=\"#entries-keys-values\" class=\"headerlink\" title=\"entries()/keys()/values()\"></a>entries()/keys()/values()</h4><p>对键值对、键名、键值得遍历</p>\n<h4 id=\"includes\"><a href=\"#includes\" class=\"headerlink\" title=\"includes()\"></a>includes()</h4><h4 id=\"rest参数\"><a href=\"#rest参数\" class=\"headerlink\" title=\"rest参数\"></a>rest参数</h4><p>…变量名，用于获取多余的参数</p>\n<h4 id=\"…扩展运算符\"><a href=\"#…扩展运算符\" class=\"headerlink\" title=\"…扩展运算符\"></a>…扩展运算符</h4><p>将一个数组转为用逗号分隔的参数序列<br>替代数组的apply方法</p>\n<h5 id=\"应用\"><a href=\"#应用\" class=\"headerlink\" title=\"应用\"></a>应用</h5><ol>\n<li>合并数组<br>[…arr1,…arr2,…arr3]</li>\n<li>与解构赋值结合</li>\n<li>函数的返回值</li>\n<li>字符串</li>\n<li>类数组对象</li>\n</ol>\n<h4 id=\"name属性\"><a href=\"#name属性\" class=\"headerlink\" title=\"name属性\"></a>name属性</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\">foo.name <span class=\"comment\">//'foo'</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"箭头函数\"><a href=\"#箭头函数\" class=\"headerlink\" title=\"箭头函数\"></a>箭头函数</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> f=<span class=\"function\"><span class=\"params\">v</span>=&gt;</span>v;</span><br><span class=\"line\"><span class=\"keyword\">var</span> f = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">v</span>)</span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> v;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> f =<span class=\"function\"><span class=\"params\">()</span>=&gt;</span><span class=\"number\">5</span>;</span><br></pre></td></tr></table></figure>\n\n<p><strong>注意点</strong></p>\n<ol>\n<li>函数体内的this对象就是定义时所在的对象，而不是使用时所在的对象。</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>)&#125;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">setTimeout</span>(<span class=\"params\">(</span>)=&gt;</span>&#123;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'id'</span>:<span class=\"keyword\">this</span>.id);</span><br><span class=\"line\">&#125;,<span class=\"number\">1000</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">foo.call(&#123;<span class=\"attr\">id</span>:<span class=\"number\">42</span>&#125;);</span><br><span class=\"line\"><span class=\"comment\">//id:42</span></span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"尾调用优化\"><a href=\"#尾调用优化\" class=\"headerlink\" title=\"尾调用优化\"></a>尾调用优化</h3><p>只保留内层函数的调用帧</p>\n<h3 id=\"对象的扩展\"><a href=\"#对象的扩展\" class=\"headerlink\" title=\"对象的扩展\"></a>对象的扩展</h3><p>ES6允许在对象中只写属性名，不写属性值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">x,y</span>)</span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> &#123;x,y&#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//等同于</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">x,y</span>)</span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> &#123;<span class=\"attr\">x</span>:x,<span class=\"attr\">y</span>:y&#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports =&#123;getItem,setItem&#125;</span><br><span class=\"line\"><span class=\"comment\">//等同于</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports =&#123;</span><br><span class=\"line\">getItem :getItem,</span><br><span class=\"line\">setItem:setItem</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Object-is\"><a href=\"#Object-is\" class=\"headerlink\" title=\"Object.is()\"></a>Object.is()</h4><p>用来比较两个值是否严格相等</p>\n<h4 id=\"Object-assign\"><a href=\"#Object-assign\" class=\"headerlink\" title=\"Object.assign()\"></a>Object.assign()</h4><p>用来将源对象的所有可枚举属性复制到目标对象。<br>至少两个参数</p>\n<h3 id=\"Proxy实例方法\"><a href=\"#Proxy实例方法\" class=\"headerlink\" title=\"Proxy实例方法\"></a>Proxy实例方法</h3><p>get()用于拦截某个属性的读取操作<br>set()用于拦截某个属性的赋值操作<br>apply()拦截函数的调用、call和apply操作<br>has()隐藏某些属性，不被in操作符发现<br>construct()拦截new命令<br>deleteProperty() 拦截delete操作<br>defineProperty() 拦截Object.defineProperty</p>\n<h3 id=\"Promise\"><a href=\"#Promise\" class=\"headerlink\" title=\"Promise\"></a>Promise</h3><p>Promise是一个对象，用来传递异步操作的消息，代表了某个未来才会知道结果的事件（通常是一个异步操作）。</p>\n<h4 id=\"Promise对象有两个特点：\"><a href=\"#Promise对象有两个特点：\" class=\"headerlink\" title=\"Promise对象有两个特点：\"></a>Promise对象有两个特点：</h4><ol>\n<li>对象的状态不受外界影响<br>Promise对象代表一个异步操作，有三种状态：Pending、Resolved、Rejected。只有异步操作的结果可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。</li>\n<li>一旦状态改变就不会再变，任何时候都可以得到这个结果。<br>pending-&gt;resolved<br>pending-&gt;rejected<br>只要其中之一发生，状态就凝固不会再变，会一直保持这个结果。就算改变已经发生，再对Promise添加回调函数也会立即得到这个结果。</li>\n</ol>\n<p><strong>缺点：</strong></p>\n<ol>\n<li>无法取消，一旦新建就会立即执行</li>\n<li>若不设置回调函数，内部抛出的错误不会反应到外部。</li>\n<li>处于pending状态时，无法得知目前进展到哪一阶段。</li>\n<li>若某些事件不断反复发生，使用stream模式比部署Promise更好。</li>\n</ol>\n<h4 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a>用法</h4><p>Promise对象是一个构造函数，用来生成Promise实例。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(resolve,reject)&#123;</span><br><span class=\"line\">    <span class=\"comment\">//...some code</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"comment\">/*异步操作成功*/</span>)&#123;</span><br><span class=\"line\">        resolve(value);</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        reject(error);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>resolve将promise状态从pending-&gt;resolved<br>reject将promise状态从pending-&gt;rejected<br>Promise实例生成后，可以用then方法分别指定resolved状态和rejected状态的回调函数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">promise.then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//success</span></span><br><span class=\"line\">&#125;,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//failure</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">timeout</span>(<span class=\"params\">ms</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class=\"line\">        setTimeout(resolve,ms,<span class=\"string\">'done'</span>);</span><br><span class=\"line\">     &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">timeout(<span class=\"number\">100</span>).then(<span class=\"function\">(<span class=\"params\">value</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(value);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>如果调用resolve函数和reject函数时带有参数，那么这些参数会被传递给回调函数。<br>reject函数的参数通常是error对象的实例，resolve函数的参数可以是正常的值或另外一个promise实例，表示异步操作的结果可能是一个值，也可能是另一个异步操作。<br>链式的then可以指定一组按照次序调用的回调函数</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> someAsyncThing = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve,reject</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//下面一行会报错，因为x没有声明</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> x=<span class=\"number\">1</span>;</span><br><span class=\"line\">        resolve(x+<span class=\"number\">2</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">someAsyncThing().catch(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">error</span>)</span>&#123;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'oh no'</span>,error);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'carry on'</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Promise-all\"><a href=\"#Promise-all\" class=\"headerlink\" title=\"Promise.all()\"></a>Promise.all()</h4><p>用于将多个Promise实例包装成一个新的Promise实例,<br><code>var p = Promise.all([p1,p2,p3]);</code><br>参数不一定是数组，但一定具有Iterator接口<br>p的状态由p1、p2、p3决定，分两种情况</p>\n<ol>\n<li>p1 p2 p3 状态都变成fulfilled，p的状态才会变成fulfilled，p1 p2 p3的返回值组成一个数组，传递给p的回调函数</li>\n<li>只要p1 p2 p3中任意一个被rejected，p的状态就变为rejected，此时第一个被rejected的实例的返回值会传递给p的回调函数。</li>\n</ol>\n<h4 id=\"Promise-race\"><a href=\"#Promise-race\" class=\"headerlink\" title=\"Promise.race()\"></a>Promise.race()</h4><p><code>var p = Promise.race([p1,p2,p3]);</code><br>只要其中之一先改变状态，p的状态就改变</p>\n<h4 id=\"Promise-resolve\"><a href=\"#Promise-resolve\" class=\"headerlink\" title=\"Promise.resolve()\"></a>Promise.resolve()</h4><p>将现有对象转为Promise对象</p>\n<h3 id=\"Generator函数\"><a href=\"#Generator函数\" class=\"headerlink\" title=\"Generator函数\"></a>Generator函数</h3><p>Generator函数  — 异步编程解决方案<br>可以理解为一个状态机（封装了多个内部状态）<br><strong>返回</strong>：遍历器对象<br><strong>特征</strong>：</p>\n<ol>\n<li>function命令与函数名之间有一个*号</li>\n<li>函数体内部使用yield语句定义不同的内部状态</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">helloworldGenerator</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"string\">'hello'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"string\">'world'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'ending'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> hw = helloworldGenerator();</span><br></pre></td></tr></table></figure>\n\n<p>此段表示：函数有三个状态：hello、world、return<br>调用generator函数之后，该函数不执行，返回的也不是函数运行结果，而是一个指向内部状态的指针对象（遍历器对象）<br>必须调用遍历器对象的next方法，使得指针移向下一个状态<br>generator函数是分段执行的，yield语句是暂停执行的标记，而next方法可以恢复执行<br>。</p>\n<h4 id=\"next方法\"><a href=\"#next方法\" class=\"headerlink\" title=\"next方法\"></a>next方法</h4><p>yield语句本身没有返回值（undefined），next方法可以带一个参数，该参数就会被当做上一个yield语句的返回值。</p>\n<h4 id=\"for-…-of\"><a href=\"#for-…-of\" class=\"headerlink\" title=\"for … of\"></a>for … of</h4><p>for…of循环可以自动遍历generator</p>\n<h4 id=\"yield-语句\"><a href=\"#yield-语句\" class=\"headerlink\" title=\"yield*语句\"></a>yield*语句</h4><p>用来在一个Generator函数里面执行另一个Generator函数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">foo</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">bar</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"number\">3</span>;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span>* foo();</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"number\">4</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> v <span class=\"keyword\">of</span> bar())&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(v);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//3</span></span><br><span class=\"line\"><span class=\"comment\">//1</span></span><br><span class=\"line\"><span class=\"comment\">//2</span></span><br><span class=\"line\"><span class=\"comment\">//4</span></span><br></pre></td></tr></table></figure>\n<p>如果yield命令后跟一个遍历器对象，那么需要在yield命令后面加上*，表明返回的是一个遍历器对象。</p>\n<p><strong>任何数据结构只要有Iterator接口，就可以用yield*遍历</strong><br>取出嵌套数组的所有成员</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">iterTree</span>(<span class=\"params\">tree</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">Array</span>.isArray(tree))&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i=<span class=\"number\">0</span>;i&lt;tree.length;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">yield</span>* iterTree(tree[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">yield</span> tree;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> tree = [<span class=\"number\">1</span>,[<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>],<span class=\"number\">5</span>,[<span class=\"number\">6</span>,<span class=\"number\">7</span>],<span class=\"number\">8</span>];</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> x <span class=\"keyword\">of</span> iterTree(tree))&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(x);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>遍历完全二叉树</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Tree</span>(<span class=\"params\">left,label,right</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.left =left;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.label = label;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.right = right;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">inorder</span>(<span class=\"params\">t</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(t)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">yield</span>* inorder(t.left);</span><br><span class=\"line\">        <span class=\"keyword\">yield</span> t.label;</span><br><span class=\"line\">        <span class=\"keyword\">yield</span>* inorder(t.right);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">makeTree</span>(<span class=\"params\">arr</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(arr.length ===<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Tree(<span class=\"literal\">null</span>,arr[<span class=\"number\">0</span>],<span class=\"literal\">null</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Tree(makeTree(arr[<span class=\"number\">0</span>]),arr[<span class=\"number\">1</span>],makeTree(arr[<span class=\"number\">2</span>]));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> tree = makeTree([[[<span class=\"number\">1</span>],<span class=\"number\">2</span>,[<span class=\"number\">3</span>]],<span class=\"number\">4</span>,[[<span class=\"number\">5</span>],<span class=\"number\">6</span>,[<span class=\"number\">7</span>]]]);</span><br><span class=\"line\"><span class=\"keyword\">var</span> result =[];</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> node <span class=\"keyword\">of</span> inorder(tree))&#123;</span><br><span class=\"line\">    result.push(node);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result);</span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"generator函数的this\"><a href=\"#generator函数的this\" class=\"headerlink\" title=\"generator函数的this\"></a>generator函数的this</h4><p>要把generator函数当作正常的构造函数，可以通过如下方法：首先生成一个空对象，使用bind方法绑定generator内部的this。</p>\n<h5 id=\"应用-1\"><a href=\"#应用-1\" class=\"headerlink\" title=\"应用\"></a>应用</h5><ol>\n<li>异步操作的同步化表达（处理异步操作，改写回调函数）</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">loadUI</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    showLoadingScreen();</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> loadUIDataAsynchronously();</span><br><span class=\"line\">    hideLoadingScreen();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> loader = loadUI();</span><br><span class=\"line\"><span class=\"comment\">//加载UI</span></span><br><span class=\"line\">loader.next();</span><br><span class=\"line\"><span class=\"comment\">//卸载UI</span></span><br><span class=\"line\">loader.next();</span><br></pre></td></tr></table></figure>\n\n\n<p>AJAX操作</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">main</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> result =<span class=\"keyword\">yield</span> request(<span class=\"string\">\"http://some.url\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> resp = <span class=\"built_in\">JSON</span>.parse(result);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(resp.value);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">request</span>(<span class=\"params\">url</span>)</span>&#123;</span><br><span class=\"line\">    makeAjaxCall(url,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">response</span>)</span>&#123;</span><br><span class=\"line\">        it.next(response);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> it = main();</span><br><span class=\"line\">it.next();</span><br></pre></td></tr></table></figure>\n\n\n<ol start=\"2\">\n<li>部署Iterator接口<br>利用generator函数可以在任意对象上部署Iterator接口</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">iterEntries</span>(<span class=\"params\">obj</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> keys = <span class=\"built_in\">Object</span>.keys(obj);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i=<span class=\"number\">0</span>;i&lt;keys.length;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> key = keys[i];</span><br><span class=\"line\">        <span class=\"keyword\">yield</span> [key,obj[key]];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> myObj =&#123;<span class=\"attr\">foo</span>:<span class=\"number\">3</span>,<span class=\"attr\">bar</span>:<span class=\"number\">7</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> [key,value] <span class=\"keyword\">of</span> iterEntries(myObj))&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(key,value);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>作为数据结构<br>generator可以看做一个数组结构，因为其可以返回一系列的值，意味着可以对任意表达式提供类似数组的接口。</li>\n</ol>\n<h4 id=\"async函数\"><a href=\"#async函数\" class=\"headerlink\" title=\"async函数\"></a>async函数</h4><p>async函数就是generator函数的语法唐<br>async对Generator的改进：</p>\n<ol>\n<li>内置执行器</li>\n<li>上面的代码调用了asyncReadFile函数，然后它自动执行，输出最后结果。<h5 id=\"async函数用法\"><a href=\"#async函数用法\" class=\"headerlink\" title=\"async函数用法\"></a>async函数用法</h5>指定多少毫秒以后输出一个值：</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">timeout</span>(<span class=\"params\">ms</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>)=&gt;</span>&#123;</span><br><span class=\"line\">        setTimeout(resolve,ms);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">asyncPrint</span>(<span class=\"params\">value,ms</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> timeout(ms);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(value);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">asyncPrint(<span class=\"string\">'hello'</span>,<span class=\"number\">5000</span>); <span class=\"comment\">//五秒钟后输出hello</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'later'</span>); <span class=\"comment\">//先输出later</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Class\"><a href=\"#Class\" class=\"headerlink\" title=\"Class\"></a>Class</h3><p>构造函数的语法糖</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Point</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(x,y)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.x =x;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.y =y;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    toString()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.x +<span class=\"string\">','</span>+<span class=\"keyword\">this</span>.y;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> c = <span class=\"keyword\">new</span> Point(<span class=\"number\">3</span>,<span class=\"number\">5</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(c.toString());</span><br></pre></td></tr></table></figure>\n<h4 id=\"实例对象\"><a href=\"#实例对象\" class=\"headerlink\" title=\"实例对象\"></a>实例对象</h4><p>使用new生成实例对象，实例的属性除非显示定义在其本身（即this对象）上，否则都是定义在原型上（即Class）上。</p>\n<h4 id=\"name属性-1\"><a href=\"#name属性-1\" class=\"headerlink\" title=\"name属性\"></a>name属性</h4><p>name属性总是返回紧跟在class关键字后面的类名。</p>\n<h4 id=\"Class表达式\"><a href=\"#Class表达式\" class=\"headerlink\" title=\"Class表达式\"></a>Class表达式</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> MyClass = <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Me</span></span>&#123;</span><br><span class=\"line\">    getClassName()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Me.name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p><strong>类的名字是MyClass而不是Me,Me只是在Class内部代码中使用，指代当前类</strong></p>\n<h4 id=\"Class的继承\"><a href=\"#Class的继承\" class=\"headerlink\" title=\"Class的继承\"></a>Class的继承</h4><p>通过extends关键字<br>子类必须在constructor中调用super方法，因为子类没有自己的this对象，而是继承了父类的this对象。<br>在子类的构造函数中，只有调用super之后，才可以使用this关键字，否则会报错。</p>\n<h5 id=\"类的prototype属性和-proto-属性\"><a href=\"#类的prototype属性和-proto-属性\" class=\"headerlink\" title=\"类的prototype属性和_proto_属性\"></a>类的prototype属性和_proto_属性</h5><ol>\n<li>子类的_proto_属性表示构造函数的继承，总是指向父类，</li>\n<li>子类prototype属性的_proto_属性表示方法的继承，总是指向父类的prototype属性<h5 id=\"new-target属性\"><a href=\"#new-target属性\" class=\"headerlink\" title=\"new.target属性\"></a>new.target属性</h5>new.target返回new命令所作用的构造函数。如果构造函数不是通过new命令调用的，那么new.target会返回undefined。</li>\n</ol>\n<p><strong>子类继承父类时new.target会返回子类</strong><br>利用这个特点，可以写出不能实例化的基类</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Shape</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">new</span>.target ===Shape)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">\"此类不能实例化\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Square</span> <span class=\"keyword\">extends</span> <span class=\"title\">Shape</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(length,width)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>();</span><br><span class=\"line\">        <span class=\"comment\">//...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"keyword\">new</span> Shape();   <span class=\"comment\">//报错</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> y = <span class=\"keyword\">new</span> Square(<span class=\"number\">3</span>,<span class=\"number\">4</span>);  <span class=\"comment\">// 正确</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"修饰器\"><a href=\"#修饰器\" class=\"headerlink\" title=\"修饰器\"></a>修饰器</h3><p>修饰器（Decorator）是一个表达式，用于修改类的行为，修饰器对类的行为的改变，是在代码编译时发生的，而不是在运行时。<br>修饰器只能用于类和类的方法，不能用于函数，因为存在函数提升。</p>\n"},{"title":"webpack","date":"2018-03-06T16:00:00.000Z","_content":"\n# webpack\n\n# 概念\n\n webpack 是一个 js应用程序 的静态模块打包器，当webpack处理应用程序时，会递归的构建一个依赖关系图。\n\n 在 webpack.config.js 文件中\n\n## entry\n\n ```javascript\n /*单个入口语法*/\n module.exports = {\n  entry: './path/to/my/entry/file.js'\n};\n```\n```javascript\n/*对象语法*/\nconst config = {\n  entry: {\n    app: './src/app.js',    \n    vendors: './src/vendors.js'  //第三方库\n  }\n};\n```\n\n这种属于 **分离应用程序和第三方库入口**\n从表面上看，这告诉我们 webpack 从 app.js 和 vendors.js 开始创建依赖图(dependency graph)。这些依赖图是彼此完全分离、互相独立的（每个 bundle 中都有一个 webpack 引导(bootstrap)）。这种方式比较常见于，只有一个入口起点（不包括 vendor）的单页应用程序(single page application)中。\n\n此设置允许你使用 CommonsChunkPlugin 从「应用程序 bundle」中提取 vendor 引用(vendor reference) 到 vendor bundle，并把引用 vendor 的部分替换为 __webpack_require__() 调用。如果应用程序 bundle 中没有 vendor 代码，那么你可以在 webpack 中实现被称为长效缓存的通用模式。\n\n```javascript\n/*多页面应用程序*/\nconst config = {\n  entry: {\n    pageOne: './src/pageOne/index.js',\n    pageTwo: './src/pageTwo/index.js',\n    pageThree: './src/pageThree/index.js'\n  }\n};\n```\n我们告诉 webpack 需要 3 个独立分离的依赖图\n\n在多页应用中，（译注：每当页面跳转时）服务器将为你获取一个新的 HTML 文档。页面重新加载新文档，并且资源被重新下载。然而，这给了我们特殊的机会去做很多事：\n\n\n## output\n\n 配置 output 选项可以控制 webpack 如何向硬盘写入编译文件。注意，即使可以存在多个入口起点，但只指定一个输出配置。\n\n ```javascript\n\n const path = require('path');\n\nmodule.exports = {\n  entry: './path/to/my/entry/file.js',\n  output: {\n    path: path.resolve(__dirname, 'dist'),\n    filename: 'my-first-webpack.bundle.js'\n  }\n};\n\n/*多个入口起点*/\n{\n  entry: {\n    app: './src/app.js',\n    search: './src/search.js'\n  },\n  output: {\n    filename: '[name].js',\n    path: __dirname + '/dist'\n  }\n}\n// 写入到硬盘：./dist/app.js, ./dist/search.js\n```\n\n## loader\n\nloader 让 webpack 能够去处理那些非 JavaScript 文件（webpack 自身只理解 JavaScript）。loader 可以将所有类型的文件转换为 webpack 能够处理的有效模块，然后你就可以利用 webpack 的打包能力，对它们进行处理。\n\n在更高层面，在 webpack 的配置中 loader 有两个目标：\n\n1. test 属性，用于标识出应该被对应的 loader 进行转换的某个或某些文件。\n2. use 属性，表示进行转换时，应该使用哪个 loader。\n\n```javascript\nconst path = require('path');\n\nconst config = {\n  entry: './path/to/my/entry/file.js',\n  output: {\n    path: path.resolve(__dirname, 'dist'),\n    filename: 'my-first-webpack.bundle.js'\n  },\n  module: {\n    rules: [\n      { test: /\\.txt$/, use: 'raw-loader' }\n    ]\n  }\n};\n\nmodule.exports = config;\n```\n### loader特性\n\n* loader 支持链式传递。能够对资源使用流水线(pipeline)。一组链式的 loader 将按照相反的顺序执行。\n* loader 链中的第一个 loader 返回值给下一个 loader。在最后一个 loader，返回 webpack 所预期的 JavaScript。\n* loader 可以是同步的，也可以是异步的。\n* loader 运行在 Node.js 中，并且能够执行任何可能的操作。\n* loader 接收查询参数。用于对 loader 传递配置。\n* loader 也能够使用 options 对象进行配置。\n* 除了使用 package.json 常见的 main 属性，还可以将普通的 npm 模块导出为 loader，做法是在 package.json 里定义一个 loader 字段。\n* 插件(plugin)可以为 loader 带来更多特性。\n* loader 能够产生额外的任意文件。\n\n## plugins\n\nloader 被用于转换某些类型的模块，而插件则可以用于执行范围更广的任务。插件的范围包括，从打包优化和压缩，一直到重新定义环境中的变量。插件接口功能极其强大，可以用来处理各种各样的任务。\n\n想要使用一个插件，你只需要 require() 它，然后把它添加到 plugins 数组中。多数插件可以通过选项(option)自定义。你也可以在一个配置文件中因为不同目的而多次使用同一个插件，这时需要通过使用 new 操作符来创建它的一个实例。\n\nwebpack 插件是一个具有 apply 属性的 JavaScript 对象。apply 属性会被 webpack compiler 调用，并且 compiler 对象可在整个编译生命周期访问。\n\n\n```javascript\nplugins: [\n    new webpack.optimize.UglifyJsPlugin(),\n    new HtmlWebpackPlugin({template: './src/index.html'})\n  ]\n  ```\n## modules\n\n在模块化编程中，开发者将程序分解成离散功能块(discrete chunks of functionality)，并称之为模块。\n\n每个模块具有比完整程序更小的接触面，使得校验、调试、测试轻而易举。 精心编写的模块提供了可靠的抽象和封装界限，使得应用程序中每个模块都具有条理清楚的设计和明确的目的。\n\n对比 Node.js 模块，webpack 模块能够以各种方式表达它们的依赖关系，几个例子如下：\n\n* ES2015 import 语句\n* CommonJS require() 语句\n* AMD define 和 require 语句\n* css/sass/less 文件中的 @import 语句。\n* 样式(url(...))或 HTML 文件(`<img src=...>`)中的图片链接(image url)\n\n### 模块解析\n\nresolver 是一个库(library)，用于帮助找到模块的绝对路径。一个模块可以作为另一个模块的依赖模块，然后被后者引用，如下：\n```javascript\nimport foo from 'path/to/module'\n// 或者\nrequire('path/to/module')\n```\n\n## 模块热替换 （Hot Module Replacement HMR）\n\n通过以下步骤，可以做到在应用程序中置换(swap in and out)模块：\n\n1. 应用程序代码要求 HMR runtime 检查更新。\n2. HMR runtime（异步）下载更新，然后通知应用程序代码。\n3. 应用程序代码要求 HMR runtime 应用更新。\n4. HMR runtime（异步）应用更新。\n你可以设置 HMR，以使此进程自动触发更新，或者你可以选择要求在用户交互时进行更新。\n\n## webpack热加载原理\n\n基本实现原理大致这样的，构建 bundle 的时候，加入一段 HMR runtime 的 js 和一段和服务沟通的 js 。文件修改会触发 webpack 重新构建，服务器通过向浏览器发送更新消息，浏览器通过 jsonp 拉取更新的模块文件，jsonp 回调触发模块热替换逻辑。\n\n热加载基本思路一般是很简单的，监听本地文件修改，然后服务器推送到客户端，执行更新即可。\n\n\n* Code Splitting\n* Everything is a module\n\n所谓的 Code Splitting 不仅仅是把代码拆分成不同的模块，而是在代码中需要执行到的时候按需加载。这和纯前端 loader(比如 seajs、requirejs) 类似，但在 webpack 对模块设计上就区分了异步模块和同步模块，构建过程中自动构建成两个不同的 chunk 文件，异步模块按需加载。这一点突破是传统的 gulp 或者纯前端 loader 都无法做到的。\n\nCode Splitting 还体现在对公共依赖的抽离(CommonsChunkPlugin)，如果一个构成过程有多入口文件，这些入口的公共依赖可以单独打包成一个 chunk 。\n\nwebpack 通过的 `require.ensure` 来定义一个分离点。`require.ensure` 在实际执行过程是触发了一个 jsonp 请求，这个请求回调后返回一个对象，这个对象包括了所有异步模块 id 与异步模块代码。\n\n\n热加载实现主要分为几部分功能\n\n服务器构建、推送更新消息\n浏览器模块更新\n模块更新后页面渲染\n\n\n### 构建\n\n热加载是通过内置的 HotModuleReplacementPlugin 实现的，构建过程中热加载相关的逻辑都在这个插件中。这个插件主要处理两部分逻辑\n\n注入 HMR runtime 逻辑\n找到修改的模块，生成一个补丁 js 文件和更新描述 json 文件\n\nHMR runtime 主要定义了 jsonp callback 方法，这个方法会触发模块更新，并且对模块新增一个 module.hot 相关 API ，这个 API 可以让开发者自定义页面更新逻辑。\n\n### 服务器推送\n\n文件更新后，首先需要打包好新的补丁文件，还需要告诉浏览器文件修改了，可以拉代码了。\n\n这一部分 webpack 自带了一个 dev-server。当开启热加载的时候，webpack-dev-server 会响应客户端发起的 EventStream 请求，然后保持请求不断开。这样服务器就可以在有更新的时候直接把结果 push 到浏览器。\n\n服务器推送部分比较简单，构建一个 node 的 Server-Sent Events 服务器只需要几行代码，这里有一个例子。\n\n一次完成的构建流程大概是这样的\n\n![构建流程](https://zos.alipayobjects.com/rmsportal/MrLNdSjTeZJdtvczOalS.svg)\n\n对于基于 React 的应用，实现 React 热加载的基本思路分为两种\n\n直接基于 module.hot API\n对每个组件进行一次包裹，组件更新后替换原有组件原型上的 render 方法和其他方法\n\n\n## webpack构建流程\n\n从启动webpack构建到输出结果经历了一系列过程，它们是：\n\n解析webpack配置参数，合并从shell传入和webpack.config.js文件里配置的参数，生产最后的配置结果。\n\n注册所有配置的插件，好让插件监听webpack构建生命周期的事件节点，以做出对应的反应。\n\n从配置的entry入口文件开始解析文件构建AST语法树，找出每个文件所依赖的文件，递归下去。\n\n在解析文件递归的过程中根据文件类型和loader配置找出合适的loader用来对文件进行转换。\n\n递归完后得到每个文件的最终结果，根据entry配置生成代码块chunk。\n\n输出所有chunk到文件系统。","source":"_posts/2018-03-07-webpack.md","raw":"---\ntitle: webpack\ndate: 2018-03-07\ncategories: \n- FE\n- webpack\ntags:\n- FE\n---\n\n# webpack\n\n# 概念\n\n webpack 是一个 js应用程序 的静态模块打包器，当webpack处理应用程序时，会递归的构建一个依赖关系图。\n\n 在 webpack.config.js 文件中\n\n## entry\n\n ```javascript\n /*单个入口语法*/\n module.exports = {\n  entry: './path/to/my/entry/file.js'\n};\n```\n```javascript\n/*对象语法*/\nconst config = {\n  entry: {\n    app: './src/app.js',    \n    vendors: './src/vendors.js'  //第三方库\n  }\n};\n```\n\n这种属于 **分离应用程序和第三方库入口**\n从表面上看，这告诉我们 webpack 从 app.js 和 vendors.js 开始创建依赖图(dependency graph)。这些依赖图是彼此完全分离、互相独立的（每个 bundle 中都有一个 webpack 引导(bootstrap)）。这种方式比较常见于，只有一个入口起点（不包括 vendor）的单页应用程序(single page application)中。\n\n此设置允许你使用 CommonsChunkPlugin 从「应用程序 bundle」中提取 vendor 引用(vendor reference) 到 vendor bundle，并把引用 vendor 的部分替换为 __webpack_require__() 调用。如果应用程序 bundle 中没有 vendor 代码，那么你可以在 webpack 中实现被称为长效缓存的通用模式。\n\n```javascript\n/*多页面应用程序*/\nconst config = {\n  entry: {\n    pageOne: './src/pageOne/index.js',\n    pageTwo: './src/pageTwo/index.js',\n    pageThree: './src/pageThree/index.js'\n  }\n};\n```\n我们告诉 webpack 需要 3 个独立分离的依赖图\n\n在多页应用中，（译注：每当页面跳转时）服务器将为你获取一个新的 HTML 文档。页面重新加载新文档，并且资源被重新下载。然而，这给了我们特殊的机会去做很多事：\n\n\n## output\n\n 配置 output 选项可以控制 webpack 如何向硬盘写入编译文件。注意，即使可以存在多个入口起点，但只指定一个输出配置。\n\n ```javascript\n\n const path = require('path');\n\nmodule.exports = {\n  entry: './path/to/my/entry/file.js',\n  output: {\n    path: path.resolve(__dirname, 'dist'),\n    filename: 'my-first-webpack.bundle.js'\n  }\n};\n\n/*多个入口起点*/\n{\n  entry: {\n    app: './src/app.js',\n    search: './src/search.js'\n  },\n  output: {\n    filename: '[name].js',\n    path: __dirname + '/dist'\n  }\n}\n// 写入到硬盘：./dist/app.js, ./dist/search.js\n```\n\n## loader\n\nloader 让 webpack 能够去处理那些非 JavaScript 文件（webpack 自身只理解 JavaScript）。loader 可以将所有类型的文件转换为 webpack 能够处理的有效模块，然后你就可以利用 webpack 的打包能力，对它们进行处理。\n\n在更高层面，在 webpack 的配置中 loader 有两个目标：\n\n1. test 属性，用于标识出应该被对应的 loader 进行转换的某个或某些文件。\n2. use 属性，表示进行转换时，应该使用哪个 loader。\n\n```javascript\nconst path = require('path');\n\nconst config = {\n  entry: './path/to/my/entry/file.js',\n  output: {\n    path: path.resolve(__dirname, 'dist'),\n    filename: 'my-first-webpack.bundle.js'\n  },\n  module: {\n    rules: [\n      { test: /\\.txt$/, use: 'raw-loader' }\n    ]\n  }\n};\n\nmodule.exports = config;\n```\n### loader特性\n\n* loader 支持链式传递。能够对资源使用流水线(pipeline)。一组链式的 loader 将按照相反的顺序执行。\n* loader 链中的第一个 loader 返回值给下一个 loader。在最后一个 loader，返回 webpack 所预期的 JavaScript。\n* loader 可以是同步的，也可以是异步的。\n* loader 运行在 Node.js 中，并且能够执行任何可能的操作。\n* loader 接收查询参数。用于对 loader 传递配置。\n* loader 也能够使用 options 对象进行配置。\n* 除了使用 package.json 常见的 main 属性，还可以将普通的 npm 模块导出为 loader，做法是在 package.json 里定义一个 loader 字段。\n* 插件(plugin)可以为 loader 带来更多特性。\n* loader 能够产生额外的任意文件。\n\n## plugins\n\nloader 被用于转换某些类型的模块，而插件则可以用于执行范围更广的任务。插件的范围包括，从打包优化和压缩，一直到重新定义环境中的变量。插件接口功能极其强大，可以用来处理各种各样的任务。\n\n想要使用一个插件，你只需要 require() 它，然后把它添加到 plugins 数组中。多数插件可以通过选项(option)自定义。你也可以在一个配置文件中因为不同目的而多次使用同一个插件，这时需要通过使用 new 操作符来创建它的一个实例。\n\nwebpack 插件是一个具有 apply 属性的 JavaScript 对象。apply 属性会被 webpack compiler 调用，并且 compiler 对象可在整个编译生命周期访问。\n\n\n```javascript\nplugins: [\n    new webpack.optimize.UglifyJsPlugin(),\n    new HtmlWebpackPlugin({template: './src/index.html'})\n  ]\n  ```\n## modules\n\n在模块化编程中，开发者将程序分解成离散功能块(discrete chunks of functionality)，并称之为模块。\n\n每个模块具有比完整程序更小的接触面，使得校验、调试、测试轻而易举。 精心编写的模块提供了可靠的抽象和封装界限，使得应用程序中每个模块都具有条理清楚的设计和明确的目的。\n\n对比 Node.js 模块，webpack 模块能够以各种方式表达它们的依赖关系，几个例子如下：\n\n* ES2015 import 语句\n* CommonJS require() 语句\n* AMD define 和 require 语句\n* css/sass/less 文件中的 @import 语句。\n* 样式(url(...))或 HTML 文件(`<img src=...>`)中的图片链接(image url)\n\n### 模块解析\n\nresolver 是一个库(library)，用于帮助找到模块的绝对路径。一个模块可以作为另一个模块的依赖模块，然后被后者引用，如下：\n```javascript\nimport foo from 'path/to/module'\n// 或者\nrequire('path/to/module')\n```\n\n## 模块热替换 （Hot Module Replacement HMR）\n\n通过以下步骤，可以做到在应用程序中置换(swap in and out)模块：\n\n1. 应用程序代码要求 HMR runtime 检查更新。\n2. HMR runtime（异步）下载更新，然后通知应用程序代码。\n3. 应用程序代码要求 HMR runtime 应用更新。\n4. HMR runtime（异步）应用更新。\n你可以设置 HMR，以使此进程自动触发更新，或者你可以选择要求在用户交互时进行更新。\n\n## webpack热加载原理\n\n基本实现原理大致这样的，构建 bundle 的时候，加入一段 HMR runtime 的 js 和一段和服务沟通的 js 。文件修改会触发 webpack 重新构建，服务器通过向浏览器发送更新消息，浏览器通过 jsonp 拉取更新的模块文件，jsonp 回调触发模块热替换逻辑。\n\n热加载基本思路一般是很简单的，监听本地文件修改，然后服务器推送到客户端，执行更新即可。\n\n\n* Code Splitting\n* Everything is a module\n\n所谓的 Code Splitting 不仅仅是把代码拆分成不同的模块，而是在代码中需要执行到的时候按需加载。这和纯前端 loader(比如 seajs、requirejs) 类似，但在 webpack 对模块设计上就区分了异步模块和同步模块，构建过程中自动构建成两个不同的 chunk 文件，异步模块按需加载。这一点突破是传统的 gulp 或者纯前端 loader 都无法做到的。\n\nCode Splitting 还体现在对公共依赖的抽离(CommonsChunkPlugin)，如果一个构成过程有多入口文件，这些入口的公共依赖可以单独打包成一个 chunk 。\n\nwebpack 通过的 `require.ensure` 来定义一个分离点。`require.ensure` 在实际执行过程是触发了一个 jsonp 请求，这个请求回调后返回一个对象，这个对象包括了所有异步模块 id 与异步模块代码。\n\n\n热加载实现主要分为几部分功能\n\n服务器构建、推送更新消息\n浏览器模块更新\n模块更新后页面渲染\n\n\n### 构建\n\n热加载是通过内置的 HotModuleReplacementPlugin 实现的，构建过程中热加载相关的逻辑都在这个插件中。这个插件主要处理两部分逻辑\n\n注入 HMR runtime 逻辑\n找到修改的模块，生成一个补丁 js 文件和更新描述 json 文件\n\nHMR runtime 主要定义了 jsonp callback 方法，这个方法会触发模块更新，并且对模块新增一个 module.hot 相关 API ，这个 API 可以让开发者自定义页面更新逻辑。\n\n### 服务器推送\n\n文件更新后，首先需要打包好新的补丁文件，还需要告诉浏览器文件修改了，可以拉代码了。\n\n这一部分 webpack 自带了一个 dev-server。当开启热加载的时候，webpack-dev-server 会响应客户端发起的 EventStream 请求，然后保持请求不断开。这样服务器就可以在有更新的时候直接把结果 push 到浏览器。\n\n服务器推送部分比较简单，构建一个 node 的 Server-Sent Events 服务器只需要几行代码，这里有一个例子。\n\n一次完成的构建流程大概是这样的\n\n![构建流程](https://zos.alipayobjects.com/rmsportal/MrLNdSjTeZJdtvczOalS.svg)\n\n对于基于 React 的应用，实现 React 热加载的基本思路分为两种\n\n直接基于 module.hot API\n对每个组件进行一次包裹，组件更新后替换原有组件原型上的 render 方法和其他方法\n\n\n## webpack构建流程\n\n从启动webpack构建到输出结果经历了一系列过程，它们是：\n\n解析webpack配置参数，合并从shell传入和webpack.config.js文件里配置的参数，生产最后的配置结果。\n\n注册所有配置的插件，好让插件监听webpack构建生命周期的事件节点，以做出对应的反应。\n\n从配置的entry入口文件开始解析文件构建AST语法树，找出每个文件所依赖的文件，递归下去。\n\n在解析文件递归的过程中根据文件类型和loader配置找出合适的loader用来对文件进行转换。\n\n递归完后得到每个文件的最终结果，根据entry配置生成代码块chunk。\n\n输出所有chunk到文件系统。","slug":"2018-03-07-webpack","published":1,"updated":"2020-03-01T12:09:37.520Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckreo13pr003cytt51xxvg43d","content":"<h1 id=\"webpack\"><a href=\"#webpack\" class=\"headerlink\" title=\"webpack\"></a>webpack</h1><h1 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h1><p> webpack 是一个 js应用程序 的静态模块打包器，当webpack处理应用程序时，会递归的构建一个依赖关系图。</p>\n<p> 在 webpack.config.js 文件中</p>\n<h2 id=\"entry\"><a href=\"#entry\" class=\"headerlink\" title=\"entry\"></a>entry</h2> <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\">/*单个入口语法*/</span></span><br><span class=\"line\"> <span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  entry: <span class=\"string\">'./path/to/my/entry/file.js'</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*对象语法*/</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> config = &#123;</span><br><span class=\"line\">  entry: &#123;</span><br><span class=\"line\">    app: <span class=\"string\">'./src/app.js'</span>,    </span><br><span class=\"line\">    vendors: <span class=\"string\">'./src/vendors.js'</span>  <span class=\"comment\">//第三方库</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>这种属于 <strong>分离应用程序和第三方库入口</strong><br>从表面上看，这告诉我们 webpack 从 app.js 和 vendors.js 开始创建依赖图(dependency graph)。这些依赖图是彼此完全分离、互相独立的（每个 bundle 中都有一个 webpack 引导(bootstrap)）。这种方式比较常见于，只有一个入口起点（不包括 vendor）的单页应用程序(single page application)中。</p>\n<p>此设置允许你使用 CommonsChunkPlugin 从「应用程序 bundle」中提取 vendor 引用(vendor reference) 到 vendor bundle，并把引用 vendor 的部分替换为 <strong>webpack_require</strong>() 调用。如果应用程序 bundle 中没有 vendor 代码，那么你可以在 webpack 中实现被称为长效缓存的通用模式。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*多页面应用程序*/</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> config = &#123;</span><br><span class=\"line\">  entry: &#123;</span><br><span class=\"line\">    pageOne: <span class=\"string\">'./src/pageOne/index.js'</span>,</span><br><span class=\"line\">    pageTwo: <span class=\"string\">'./src/pageTwo/index.js'</span>,</span><br><span class=\"line\">    pageThree: <span class=\"string\">'./src/pageThree/index.js'</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>我们告诉 webpack 需要 3 个独立分离的依赖图</p>\n<p>在多页应用中，（译注：每当页面跳转时）服务器将为你获取一个新的 HTML 文档。页面重新加载新文档，并且资源被重新下载。然而，这给了我们特殊的机会去做很多事：</p>\n<h2 id=\"output\"><a href=\"#output\" class=\"headerlink\" title=\"output\"></a>output</h2><p> 配置 output 选项可以控制 webpack 如何向硬盘写入编译文件。注意，即使可以存在多个入口起点，但只指定一个输出配置。</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  entry: <span class=\"string\">'./path/to/my/entry/file.js'</span>,</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    path: path.resolve(__dirname, <span class=\"string\">'dist'</span>),</span><br><span class=\"line\">    filename: <span class=\"string\">'my-first-webpack.bundle.js'</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*多个入口起点*/</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  entry: &#123;</span><br><span class=\"line\">    app: <span class=\"string\">'./src/app.js'</span>,</span><br><span class=\"line\">    search: <span class=\"string\">'./src/search.js'</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    filename: <span class=\"string\">'[name].js'</span>,</span><br><span class=\"line\">    path: __dirname + <span class=\"string\">'/dist'</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 写入到硬盘：./dist/app.js, ./dist/search.js</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"loader\"><a href=\"#loader\" class=\"headerlink\" title=\"loader\"></a>loader</h2><p>loader 让 webpack 能够去处理那些非 JavaScript 文件（webpack 自身只理解 JavaScript）。loader 可以将所有类型的文件转换为 webpack 能够处理的有效模块，然后你就可以利用 webpack 的打包能力，对它们进行处理。</p>\n<p>在更高层面，在 webpack 的配置中 loader 有两个目标：</p>\n<ol>\n<li>test 属性，用于标识出应该被对应的 loader 进行转换的某个或某些文件。</li>\n<li>use 属性，表示进行转换时，应该使用哪个 loader。</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> config = &#123;</span><br><span class=\"line\">  entry: <span class=\"string\">'./path/to/my/entry/file.js'</span>,</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    path: path.resolve(__dirname, <span class=\"string\">'dist'</span>),</span><br><span class=\"line\">    filename: <span class=\"string\">'my-first-webpack.bundle.js'</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">    rules: [</span><br><span class=\"line\">      &#123; <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.txt$/</span>, <span class=\"attr\">use</span>: <span class=\"string\">'raw-loader'</span> &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = config;</span><br></pre></td></tr></table></figure>\n<h3 id=\"loader特性\"><a href=\"#loader特性\" class=\"headerlink\" title=\"loader特性\"></a>loader特性</h3><ul>\n<li>loader 支持链式传递。能够对资源使用流水线(pipeline)。一组链式的 loader 将按照相反的顺序执行。</li>\n<li>loader 链中的第一个 loader 返回值给下一个 loader。在最后一个 loader，返回 webpack 所预期的 JavaScript。</li>\n<li>loader 可以是同步的，也可以是异步的。</li>\n<li>loader 运行在 Node.js 中，并且能够执行任何可能的操作。</li>\n<li>loader 接收查询参数。用于对 loader 传递配置。</li>\n<li>loader 也能够使用 options 对象进行配置。</li>\n<li>除了使用 package.json 常见的 main 属性，还可以将普通的 npm 模块导出为 loader，做法是在 package.json 里定义一个 loader 字段。</li>\n<li>插件(plugin)可以为 loader 带来更多特性。</li>\n<li>loader 能够产生额外的任意文件。</li>\n</ul>\n<h2 id=\"plugins\"><a href=\"#plugins\" class=\"headerlink\" title=\"plugins\"></a>plugins</h2><p>loader 被用于转换某些类型的模块，而插件则可以用于执行范围更广的任务。插件的范围包括，从打包优化和压缩，一直到重新定义环境中的变量。插件接口功能极其强大，可以用来处理各种各样的任务。</p>\n<p>想要使用一个插件，你只需要 require() 它，然后把它添加到 plugins 数组中。多数插件可以通过选项(option)自定义。你也可以在一个配置文件中因为不同目的而多次使用同一个插件，这时需要通过使用 new 操作符来创建它的一个实例。</p>\n<p>webpack 插件是一个具有 apply 属性的 JavaScript 对象。apply 属性会被 webpack compiler 调用，并且 compiler 对象可在整个编译生命周期访问。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plugins: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> webpack.optimize.UglifyJsPlugin(),</span><br><span class=\"line\">    <span class=\"keyword\">new</span> HtmlWebpackPlugin(&#123;<span class=\"attr\">template</span>: <span class=\"string\">'./src/index.html'</span>&#125;)</span><br><span class=\"line\">  ]</span><br></pre></td></tr></table></figure>\n<h2 id=\"modules\"><a href=\"#modules\" class=\"headerlink\" title=\"modules\"></a>modules</h2><p>在模块化编程中，开发者将程序分解成离散功能块(discrete chunks of functionality)，并称之为模块。</p>\n<p>每个模块具有比完整程序更小的接触面，使得校验、调试、测试轻而易举。 精心编写的模块提供了可靠的抽象和封装界限，使得应用程序中每个模块都具有条理清楚的设计和明确的目的。</p>\n<p>对比 Node.js 模块，webpack 模块能够以各种方式表达它们的依赖关系，几个例子如下：</p>\n<ul>\n<li>ES2015 import 语句</li>\n<li>CommonJS require() 语句</li>\n<li>AMD define 和 require 语句</li>\n<li>css/sass/less 文件中的 @import 语句。</li>\n<li>样式(url(…))或 HTML 文件(<code>&lt;img src=...&gt;</code>)中的图片链接(image url)</li>\n</ul>\n<h3 id=\"模块解析\"><a href=\"#模块解析\" class=\"headerlink\" title=\"模块解析\"></a>模块解析</h3><p>resolver 是一个库(library)，用于帮助找到模块的绝对路径。一个模块可以作为另一个模块的依赖模块，然后被后者引用，如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> foo <span class=\"keyword\">from</span> <span class=\"string\">'path/to/module'</span></span><br><span class=\"line\"><span class=\"comment\">// 或者</span></span><br><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">'path/to/module'</span>)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"模块热替换-（Hot-Module-Replacement-HMR）\"><a href=\"#模块热替换-（Hot-Module-Replacement-HMR）\" class=\"headerlink\" title=\"模块热替换 （Hot Module Replacement HMR）\"></a>模块热替换 （Hot Module Replacement HMR）</h2><p>通过以下步骤，可以做到在应用程序中置换(swap in and out)模块：</p>\n<ol>\n<li>应用程序代码要求 HMR runtime 检查更新。</li>\n<li>HMR runtime（异步）下载更新，然后通知应用程序代码。</li>\n<li>应用程序代码要求 HMR runtime 应用更新。</li>\n<li>HMR runtime（异步）应用更新。<br>你可以设置 HMR，以使此进程自动触发更新，或者你可以选择要求在用户交互时进行更新。</li>\n</ol>\n<h2 id=\"webpack热加载原理\"><a href=\"#webpack热加载原理\" class=\"headerlink\" title=\"webpack热加载原理\"></a>webpack热加载原理</h2><p>基本实现原理大致这样的，构建 bundle 的时候，加入一段 HMR runtime 的 js 和一段和服务沟通的 js 。文件修改会触发 webpack 重新构建，服务器通过向浏览器发送更新消息，浏览器通过 jsonp 拉取更新的模块文件，jsonp 回调触发模块热替换逻辑。</p>\n<p>热加载基本思路一般是很简单的，监听本地文件修改，然后服务器推送到客户端，执行更新即可。</p>\n<ul>\n<li>Code Splitting</li>\n<li>Everything is a module</li>\n</ul>\n<p>所谓的 Code Splitting 不仅仅是把代码拆分成不同的模块，而是在代码中需要执行到的时候按需加载。这和纯前端 loader(比如 seajs、requirejs) 类似，但在 webpack 对模块设计上就区分了异步模块和同步模块，构建过程中自动构建成两个不同的 chunk 文件，异步模块按需加载。这一点突破是传统的 gulp 或者纯前端 loader 都无法做到的。</p>\n<p>Code Splitting 还体现在对公共依赖的抽离(CommonsChunkPlugin)，如果一个构成过程有多入口文件，这些入口的公共依赖可以单独打包成一个 chunk 。</p>\n<p>webpack 通过的 <code>require.ensure</code> 来定义一个分离点。<code>require.ensure</code> 在实际执行过程是触发了一个 jsonp 请求，这个请求回调后返回一个对象，这个对象包括了所有异步模块 id 与异步模块代码。</p>\n<p>热加载实现主要分为几部分功能</p>\n<p>服务器构建、推送更新消息<br>浏览器模块更新<br>模块更新后页面渲染</p>\n<h3 id=\"构建\"><a href=\"#构建\" class=\"headerlink\" title=\"构建\"></a>构建</h3><p>热加载是通过内置的 HotModuleReplacementPlugin 实现的，构建过程中热加载相关的逻辑都在这个插件中。这个插件主要处理两部分逻辑</p>\n<p>注入 HMR runtime 逻辑<br>找到修改的模块，生成一个补丁 js 文件和更新描述 json 文件</p>\n<p>HMR runtime 主要定义了 jsonp callback 方法，这个方法会触发模块更新，并且对模块新增一个 module.hot 相关 API ，这个 API 可以让开发者自定义页面更新逻辑。</p>\n<h3 id=\"服务器推送\"><a href=\"#服务器推送\" class=\"headerlink\" title=\"服务器推送\"></a>服务器推送</h3><p>文件更新后，首先需要打包好新的补丁文件，还需要告诉浏览器文件修改了，可以拉代码了。</p>\n<p>这一部分 webpack 自带了一个 dev-server。当开启热加载的时候，webpack-dev-server 会响应客户端发起的 EventStream 请求，然后保持请求不断开。这样服务器就可以在有更新的时候直接把结果 push 到浏览器。</p>\n<p>服务器推送部分比较简单，构建一个 node 的 Server-Sent Events 服务器只需要几行代码，这里有一个例子。</p>\n<p>一次完成的构建流程大概是这样的</p>\n<p><img src=\"https://zos.alipayobjects.com/rmsportal/MrLNdSjTeZJdtvczOalS.svg\" alt=\"构建流程\"></p>\n<p>对于基于 React 的应用，实现 React 热加载的基本思路分为两种</p>\n<p>直接基于 module.hot API<br>对每个组件进行一次包裹，组件更新后替换原有组件原型上的 render 方法和其他方法</p>\n<h2 id=\"webpack构建流程\"><a href=\"#webpack构建流程\" class=\"headerlink\" title=\"webpack构建流程\"></a>webpack构建流程</h2><p>从启动webpack构建到输出结果经历了一系列过程，它们是：</p>\n<p>解析webpack配置参数，合并从shell传入和webpack.config.js文件里配置的参数，生产最后的配置结果。</p>\n<p>注册所有配置的插件，好让插件监听webpack构建生命周期的事件节点，以做出对应的反应。</p>\n<p>从配置的entry入口文件开始解析文件构建AST语法树，找出每个文件所依赖的文件，递归下去。</p>\n<p>在解析文件递归的过程中根据文件类型和loader配置找出合适的loader用来对文件进行转换。</p>\n<p>递归完后得到每个文件的最终结果，根据entry配置生成代码块chunk。</p>\n<p>输出所有chunk到文件系统。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"webpack\"><a href=\"#webpack\" class=\"headerlink\" title=\"webpack\"></a>webpack</h1><h1 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h1><p> webpack 是一个 js应用程序 的静态模块打包器，当webpack处理应用程序时，会递归的构建一个依赖关系图。</p>\n<p> 在 webpack.config.js 文件中</p>\n<h2 id=\"entry\"><a href=\"#entry\" class=\"headerlink\" title=\"entry\"></a>entry</h2> <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\">/*单个入口语法*/</span></span><br><span class=\"line\"> <span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  entry: <span class=\"string\">'./path/to/my/entry/file.js'</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*对象语法*/</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> config = &#123;</span><br><span class=\"line\">  entry: &#123;</span><br><span class=\"line\">    app: <span class=\"string\">'./src/app.js'</span>,    </span><br><span class=\"line\">    vendors: <span class=\"string\">'./src/vendors.js'</span>  <span class=\"comment\">//第三方库</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>这种属于 <strong>分离应用程序和第三方库入口</strong><br>从表面上看，这告诉我们 webpack 从 app.js 和 vendors.js 开始创建依赖图(dependency graph)。这些依赖图是彼此完全分离、互相独立的（每个 bundle 中都有一个 webpack 引导(bootstrap)）。这种方式比较常见于，只有一个入口起点（不包括 vendor）的单页应用程序(single page application)中。</p>\n<p>此设置允许你使用 CommonsChunkPlugin 从「应用程序 bundle」中提取 vendor 引用(vendor reference) 到 vendor bundle，并把引用 vendor 的部分替换为 <strong>webpack_require</strong>() 调用。如果应用程序 bundle 中没有 vendor 代码，那么你可以在 webpack 中实现被称为长效缓存的通用模式。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*多页面应用程序*/</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> config = &#123;</span><br><span class=\"line\">  entry: &#123;</span><br><span class=\"line\">    pageOne: <span class=\"string\">'./src/pageOne/index.js'</span>,</span><br><span class=\"line\">    pageTwo: <span class=\"string\">'./src/pageTwo/index.js'</span>,</span><br><span class=\"line\">    pageThree: <span class=\"string\">'./src/pageThree/index.js'</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>我们告诉 webpack 需要 3 个独立分离的依赖图</p>\n<p>在多页应用中，（译注：每当页面跳转时）服务器将为你获取一个新的 HTML 文档。页面重新加载新文档，并且资源被重新下载。然而，这给了我们特殊的机会去做很多事：</p>\n<h2 id=\"output\"><a href=\"#output\" class=\"headerlink\" title=\"output\"></a>output</h2><p> 配置 output 选项可以控制 webpack 如何向硬盘写入编译文件。注意，即使可以存在多个入口起点，但只指定一个输出配置。</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  entry: <span class=\"string\">'./path/to/my/entry/file.js'</span>,</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    path: path.resolve(__dirname, <span class=\"string\">'dist'</span>),</span><br><span class=\"line\">    filename: <span class=\"string\">'my-first-webpack.bundle.js'</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*多个入口起点*/</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  entry: &#123;</span><br><span class=\"line\">    app: <span class=\"string\">'./src/app.js'</span>,</span><br><span class=\"line\">    search: <span class=\"string\">'./src/search.js'</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    filename: <span class=\"string\">'[name].js'</span>,</span><br><span class=\"line\">    path: __dirname + <span class=\"string\">'/dist'</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 写入到硬盘：./dist/app.js, ./dist/search.js</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"loader\"><a href=\"#loader\" class=\"headerlink\" title=\"loader\"></a>loader</h2><p>loader 让 webpack 能够去处理那些非 JavaScript 文件（webpack 自身只理解 JavaScript）。loader 可以将所有类型的文件转换为 webpack 能够处理的有效模块，然后你就可以利用 webpack 的打包能力，对它们进行处理。</p>\n<p>在更高层面，在 webpack 的配置中 loader 有两个目标：</p>\n<ol>\n<li>test 属性，用于标识出应该被对应的 loader 进行转换的某个或某些文件。</li>\n<li>use 属性，表示进行转换时，应该使用哪个 loader。</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> config = &#123;</span><br><span class=\"line\">  entry: <span class=\"string\">'./path/to/my/entry/file.js'</span>,</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    path: path.resolve(__dirname, <span class=\"string\">'dist'</span>),</span><br><span class=\"line\">    filename: <span class=\"string\">'my-first-webpack.bundle.js'</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">    rules: [</span><br><span class=\"line\">      &#123; <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.txt$/</span>, <span class=\"attr\">use</span>: <span class=\"string\">'raw-loader'</span> &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = config;</span><br></pre></td></tr></table></figure>\n<h3 id=\"loader特性\"><a href=\"#loader特性\" class=\"headerlink\" title=\"loader特性\"></a>loader特性</h3><ul>\n<li>loader 支持链式传递。能够对资源使用流水线(pipeline)。一组链式的 loader 将按照相反的顺序执行。</li>\n<li>loader 链中的第一个 loader 返回值给下一个 loader。在最后一个 loader，返回 webpack 所预期的 JavaScript。</li>\n<li>loader 可以是同步的，也可以是异步的。</li>\n<li>loader 运行在 Node.js 中，并且能够执行任何可能的操作。</li>\n<li>loader 接收查询参数。用于对 loader 传递配置。</li>\n<li>loader 也能够使用 options 对象进行配置。</li>\n<li>除了使用 package.json 常见的 main 属性，还可以将普通的 npm 模块导出为 loader，做法是在 package.json 里定义一个 loader 字段。</li>\n<li>插件(plugin)可以为 loader 带来更多特性。</li>\n<li>loader 能够产生额外的任意文件。</li>\n</ul>\n<h2 id=\"plugins\"><a href=\"#plugins\" class=\"headerlink\" title=\"plugins\"></a>plugins</h2><p>loader 被用于转换某些类型的模块，而插件则可以用于执行范围更广的任务。插件的范围包括，从打包优化和压缩，一直到重新定义环境中的变量。插件接口功能极其强大，可以用来处理各种各样的任务。</p>\n<p>想要使用一个插件，你只需要 require() 它，然后把它添加到 plugins 数组中。多数插件可以通过选项(option)自定义。你也可以在一个配置文件中因为不同目的而多次使用同一个插件，这时需要通过使用 new 操作符来创建它的一个实例。</p>\n<p>webpack 插件是一个具有 apply 属性的 JavaScript 对象。apply 属性会被 webpack compiler 调用，并且 compiler 对象可在整个编译生命周期访问。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plugins: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> webpack.optimize.UglifyJsPlugin(),</span><br><span class=\"line\">    <span class=\"keyword\">new</span> HtmlWebpackPlugin(&#123;<span class=\"attr\">template</span>: <span class=\"string\">'./src/index.html'</span>&#125;)</span><br><span class=\"line\">  ]</span><br></pre></td></tr></table></figure>\n<h2 id=\"modules\"><a href=\"#modules\" class=\"headerlink\" title=\"modules\"></a>modules</h2><p>在模块化编程中，开发者将程序分解成离散功能块(discrete chunks of functionality)，并称之为模块。</p>\n<p>每个模块具有比完整程序更小的接触面，使得校验、调试、测试轻而易举。 精心编写的模块提供了可靠的抽象和封装界限，使得应用程序中每个模块都具有条理清楚的设计和明确的目的。</p>\n<p>对比 Node.js 模块，webpack 模块能够以各种方式表达它们的依赖关系，几个例子如下：</p>\n<ul>\n<li>ES2015 import 语句</li>\n<li>CommonJS require() 语句</li>\n<li>AMD define 和 require 语句</li>\n<li>css/sass/less 文件中的 @import 语句。</li>\n<li>样式(url(…))或 HTML 文件(<code>&lt;img src=...&gt;</code>)中的图片链接(image url)</li>\n</ul>\n<h3 id=\"模块解析\"><a href=\"#模块解析\" class=\"headerlink\" title=\"模块解析\"></a>模块解析</h3><p>resolver 是一个库(library)，用于帮助找到模块的绝对路径。一个模块可以作为另一个模块的依赖模块，然后被后者引用，如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> foo <span class=\"keyword\">from</span> <span class=\"string\">'path/to/module'</span></span><br><span class=\"line\"><span class=\"comment\">// 或者</span></span><br><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">'path/to/module'</span>)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"模块热替换-（Hot-Module-Replacement-HMR）\"><a href=\"#模块热替换-（Hot-Module-Replacement-HMR）\" class=\"headerlink\" title=\"模块热替换 （Hot Module Replacement HMR）\"></a>模块热替换 （Hot Module Replacement HMR）</h2><p>通过以下步骤，可以做到在应用程序中置换(swap in and out)模块：</p>\n<ol>\n<li>应用程序代码要求 HMR runtime 检查更新。</li>\n<li>HMR runtime（异步）下载更新，然后通知应用程序代码。</li>\n<li>应用程序代码要求 HMR runtime 应用更新。</li>\n<li>HMR runtime（异步）应用更新。<br>你可以设置 HMR，以使此进程自动触发更新，或者你可以选择要求在用户交互时进行更新。</li>\n</ol>\n<h2 id=\"webpack热加载原理\"><a href=\"#webpack热加载原理\" class=\"headerlink\" title=\"webpack热加载原理\"></a>webpack热加载原理</h2><p>基本实现原理大致这样的，构建 bundle 的时候，加入一段 HMR runtime 的 js 和一段和服务沟通的 js 。文件修改会触发 webpack 重新构建，服务器通过向浏览器发送更新消息，浏览器通过 jsonp 拉取更新的模块文件，jsonp 回调触发模块热替换逻辑。</p>\n<p>热加载基本思路一般是很简单的，监听本地文件修改，然后服务器推送到客户端，执行更新即可。</p>\n<ul>\n<li>Code Splitting</li>\n<li>Everything is a module</li>\n</ul>\n<p>所谓的 Code Splitting 不仅仅是把代码拆分成不同的模块，而是在代码中需要执行到的时候按需加载。这和纯前端 loader(比如 seajs、requirejs) 类似，但在 webpack 对模块设计上就区分了异步模块和同步模块，构建过程中自动构建成两个不同的 chunk 文件，异步模块按需加载。这一点突破是传统的 gulp 或者纯前端 loader 都无法做到的。</p>\n<p>Code Splitting 还体现在对公共依赖的抽离(CommonsChunkPlugin)，如果一个构成过程有多入口文件，这些入口的公共依赖可以单独打包成一个 chunk 。</p>\n<p>webpack 通过的 <code>require.ensure</code> 来定义一个分离点。<code>require.ensure</code> 在实际执行过程是触发了一个 jsonp 请求，这个请求回调后返回一个对象，这个对象包括了所有异步模块 id 与异步模块代码。</p>\n<p>热加载实现主要分为几部分功能</p>\n<p>服务器构建、推送更新消息<br>浏览器模块更新<br>模块更新后页面渲染</p>\n<h3 id=\"构建\"><a href=\"#构建\" class=\"headerlink\" title=\"构建\"></a>构建</h3><p>热加载是通过内置的 HotModuleReplacementPlugin 实现的，构建过程中热加载相关的逻辑都在这个插件中。这个插件主要处理两部分逻辑</p>\n<p>注入 HMR runtime 逻辑<br>找到修改的模块，生成一个补丁 js 文件和更新描述 json 文件</p>\n<p>HMR runtime 主要定义了 jsonp callback 方法，这个方法会触发模块更新，并且对模块新增一个 module.hot 相关 API ，这个 API 可以让开发者自定义页面更新逻辑。</p>\n<h3 id=\"服务器推送\"><a href=\"#服务器推送\" class=\"headerlink\" title=\"服务器推送\"></a>服务器推送</h3><p>文件更新后，首先需要打包好新的补丁文件，还需要告诉浏览器文件修改了，可以拉代码了。</p>\n<p>这一部分 webpack 自带了一个 dev-server。当开启热加载的时候，webpack-dev-server 会响应客户端发起的 EventStream 请求，然后保持请求不断开。这样服务器就可以在有更新的时候直接把结果 push 到浏览器。</p>\n<p>服务器推送部分比较简单，构建一个 node 的 Server-Sent Events 服务器只需要几行代码，这里有一个例子。</p>\n<p>一次完成的构建流程大概是这样的</p>\n<p><img src=\"https://zos.alipayobjects.com/rmsportal/MrLNdSjTeZJdtvczOalS.svg\" alt=\"构建流程\"></p>\n<p>对于基于 React 的应用，实现 React 热加载的基本思路分为两种</p>\n<p>直接基于 module.hot API<br>对每个组件进行一次包裹，组件更新后替换原有组件原型上的 render 方法和其他方法</p>\n<h2 id=\"webpack构建流程\"><a href=\"#webpack构建流程\" class=\"headerlink\" title=\"webpack构建流程\"></a>webpack构建流程</h2><p>从启动webpack构建到输出结果经历了一系列过程，它们是：</p>\n<p>解析webpack配置参数，合并从shell传入和webpack.config.js文件里配置的参数，生产最后的配置结果。</p>\n<p>注册所有配置的插件，好让插件监听webpack构建生命周期的事件节点，以做出对应的反应。</p>\n<p>从配置的entry入口文件开始解析文件构建AST语法树，找出每个文件所依赖的文件，递归下去。</p>\n<p>在解析文件递归的过程中根据文件类型和loader配置找出合适的loader用来对文件进行转换。</p>\n<p>递归完后得到每个文件的最终结果，根据entry配置生成代码块chunk。</p>\n<p>输出所有chunk到文件系统。</p>\n"},{"title":"React分析","date":"2017-03-15T16:00:00.000Z","type":"tags","_content":"\n# React\n## react认识\n\n**有一段解释很透彻：**\n用脚本进行DOM操作的代价很昂贵。有个贴切的比喻，把DOM和JavaScript各自想象为一个岛屿，它们之间用收费桥梁连接，js每次访问DOM，都要途径这座桥，并交纳“过桥费”,访问DOM的次数越多，费用也就越高。 因此，推荐的做法是尽量减少过桥的次数，努力待在ECMAScript岛上。\n因为这个原因react的虚拟dom就显得难能可贵了，它创造了**虚拟dom**并且将它们储存起来，每当状态发生变化的时候就会创造新的**虚拟节点**和以前的进行对比（Diff算法），让变化的部分进行渲染。整个过程没有对dom进行获取和操作，只有一个**渲染**的过程，所以react说是一个**ui框架**。\n\n## react组件化\n\nreact的一个组件很明显的由**dom视图**和**state数据**组成，两个部分泾渭分明。\nstate是数据中心，它的状态决定着视图的状态。这时候发现似乎和我们一直推崇的MVC开发模式有点区别，没了Controller控制器，那用户交互怎么处理，数据变化谁来管理？然而这并不是react所要关心的事情，它只负责ui的渲染。与其他框架监听数据动态改变dom不同，react采用setState来控制视图的更新。setState会自动调用render函数，触发视图的重新渲染，如果仅仅只是state数据的变化而没有调用setState，并不会触发更新。 \n组件就是拥有独立功能的视图模块，许多小的组件组成一个大的组件，整个页面就是由一个个组件组合而成。它的好处是利于重复利用和维护。\n\n## react diff算法\n\neact的diff算法用在什么地方呢？当组件更新的时候，react会创建一个新的虚拟dom树并且会和之前储存的dom树进行比较，这个比较多过程就用到了diff算法，所以组件初始化的时候是用不到的。react提出了一种假设，相同的节点具有类似的结构，而不同的节点具有不同的结构。在这种假设之上进行逐层的比较，如果发现对应的节点是不同的，那就直接删除旧的节点以及它所包含的所有子节点然后替换成新的节点。如果是相同的节点，则只进行属性的更改。\n\n对于列表的diff算法稍有不同，因为列表通常具有相同的结构，在对列表节点进行删除，插入，排序的时候，单个节点的整体操作远比一个个对比一个个替换要好得多，所以在创建列表的时候需要设置key值，这样react才能分清谁是谁。当然不写key值也可以，但这样通常会报出警告，通知我们加上key值以提高react的性能。\n![][image-1]\n\n## react组件写法\n\n组件的创造方法为React.createClass() ——创造一个类，react系统内部设计了一套类系统，利用它来创造react组件。但这并不是必须的，我们还可以用es6的class类来创造组件,这也是Facebook官方推荐的写法。\n\n```javascript\nclass MyComponent extends React.Component{\n  constructor(props){\n    super(props);\n    this.state ={\n      params:'',\n      MyList:[]\n    }\n   } \n```\n这两种写法实现的功能一样但是原理却是不同，es6的class类可以看作是构造函数的一个语法糖，可以把它当成构造函数来看，extends实现了类之间的继承 —— 定义一个类MyComponent继承React.Component所有的属性和方法，组件的生命周期函数就是从这来的。\nconstructor是构造器，在实例化对象时调用，super调用了父类的constructor创造了父类的实例对象this，然后用子类的构造函数进行修改。这和es5的原型继承是不同的，原型继承是先创造一个实例化对象this，然后再继承父级的原型方法。\n当我们使用组件<MyComponent/>时，其实是对MyComponent类的实例化，只不过react对这个过程进行了封装，使其看起来像一个标签。\nprops访问父组件的属性\nthis.props.children 访问组件的孩子节点\n可以用React.Children.map()遍历this.props.children\n\n## 组件的生命周期\n\n![][image-2]\n\n### 组件在初始化时会触发5个钩子函数：\n\n1. getDefaultProps() :😀设置，默认的props，也可以用defaultProps设置组件的默认属性。\n2. getInitialState() ：在使用es6的class语法时是没有这个钩子函数的，可以直接在constructor中定义this.state。此时可以访问this.props。\n3. componentWillMount()：件初始化时只调用，以后组件更新不调用，整个生命周期只调用一次，此时可以修改state。\n4. render() ：react最重要的步骤，创建虚拟dom，进行diff算法，更新dom树都在此进行。此时就不能更改state了。\n5. componentDidMount() ：组件渲染之后调用，可以通过this.getDOMNode()获取和操作dom节点，只调用一次。\n\n\n### 组件在更新时也会触发5个钩子函数：\n\n1.componentWillReceiveProps(nextProps) :组件初始化时不调用，组件接受新的props时调用。\n2. shouldComponentUpdate(nextProps,nextState) :**react性能优化非常重要的一环**。组件接受新的state或者props时调用，我们可以设置在此对比前后两个props和state是否相同，如果相同则返回false阻止更新，因为相同的属性状态一定会生成相同的dom树，这样就不需要创造新的dom树和旧的dom树进行diff算法对比，节省大量性能，尤其是在dom结构复杂的时候。不过调用this.forceUpdate会跳过此步骤。\n3. componentWillUpdate(nextProps,nextState) :组件初始化时不调用，只有在组件将要更新时才调用，此时可以修改state\n4. render()\n5. componentDidUpdate() :组件初始化时不调用，组件更新完成后调用，此时可以获取dom节点。\n\n\n## 继承React.Component的类的方法时遵循下面的顺序\n1. constructor\n2. optional static methods\n3. getChildContext\n4. componentWillMount\n5. componentDidMount\n6. componentWillReceiveProps\n7. shouldComponentUpdate\n8. componentWillUpdate\n9. componentDidUpdate\n10. componentWillUnmount\n11. 点击回调或者事件回调，比如onClickSubmit()或者onChangeDescription()\n12. render函数中的getter()方法，，比如getSelectReason()或者getFooterContent()\n13. 可选的render方法\n14. render\n\n\n## react-router路由\n\nRouter就是react的一个组件，并不会被渲染，只是一个创建内部路由规则的配置对象，根据匹配的路由地址展现相应的组件。\nRouter则对路由地址和组件进行绑定，Router具有嵌套功能，表示路由地址的包含关系，这和组件的嵌套没有直接联系。\nRouter可以向绑定的组件传递7个属性：children，history，location，params，route，routeParams，routes，每个属性都包涵路由的相关的信息。比较常用的有children（以路由的包涵关系为区分的组件），location（包括地址，参数，地址切换方式，key值，hash值）。react-router提供Link标签，这只是对a标签的封装，值得注意的是，点击链接进行的跳转并不是默认的方式，react-router阻止了a标签的默认行为并用pushState进行hash值的转变。切换页面的过程是在点击Link标签或者后退前进按钮时，会先发生url地址的转变，Router监听到地址的改变根据Route的path属性匹配到对应的组件，将state值改成对应的组件并调用setState触发render函数重新渲染dom。\n当页面比较多时，项目就会变得越来越大，尤其对于单页面应用来说，初次渲染的速度就会很慢，这时候就需要按需加载，只有切换到页面的时候才去加载对应的js文件。react配合webpack进行按需加载的方法很简单，Route的component改为getComponent，组件用require.ensure的方式获取，并在webpack中配置chunkFilename。\n\n```javascript\nconst chooseProducts = (location, cb) => {\n    require.ensure([], require => {\n        cb(null, require('../Component/chooseProducts').default)\n    },'chooseProducts')\n}\n\nconst helpCenter = (location, cb) => {\n    require.ensure([], require => {\n        cb(null, require('../Component/helpCenter').default)\n    },'helpCenter')\n}\n\nconst saleRecord = (location, cb) => {\n    require.ensure([], require => {\n        cb(null, require('../Component/saleRecord').default)\n    },'saleRecord')\n}\n\nconst RouteConfig = (\n    <Router history={history}>\n        <Route path=\"/\" component={Roots}>\n            <IndexRoute component={index} />//首页\n            <Route path=\"index\" component={index} />\n            <Route path=\"helpCenter\" getComponent={helpCenter} />//帮助中心\n            <Route path=\"saleRecord\" getComponent={saleRecord} />//销售记录\n            <Redirect from='*' to='/'  />\n        </Route>\n    </Router>\n);\n```\n\n\n## 组件之间的通信\n\nreact推崇的是单向数据流，自上而下进行数据的传递，但是由下而上或者不在一条数据流上的组件之间的通信就会变的复杂。解决通信问题的方法很多，如果只是父子级关系，父级可以将一个回调函数当作属性传递给子级，子级可以直接调用函数从而和父级通信。\n\n组件层级嵌套到比较深，可以使用上下文getChildContext来传递信息，这样在不需要将函数一层层往下传，任何一层的子级都可以通过this.context直接访问。\n\n兄弟关系的组件之间无法直接通信，它们只能利用同一层的上级作为中转站。而如果兄弟组件都是最高层的组件，为了能够让它们进行通信，必须在它们外层再套一层组件，这个外层的组件起着保存数据，传递信息的作用，这其实就是redux所做的事情。\n\n组件之间的信息还可以通过全局事件来传递。不同页面可以通过参数传递数据，下个页面可以用location.param来获取。其实react本身很简单，难的在于如何优雅高效的实现组件之间数据的交流。\n\n# redux\n\n## redux作用\n\n首先，redux并不是必须的，它的作用相当于在顶层组件之上又加了一个组件，作用是进行逻辑运算、储存数据和实现组件尤其是顶层组件的通信。如果组件之间的交流不多，逻辑不复杂，只是单纯的进行视图的渲染，这时候用回调，context就行，没必要用redux，用了反而影响开发速度。但是如果组件交流特别频繁，逻辑很复杂，那redux的优势就特别明显了。\n   Redux 的react绑定库是基于 **容器组件和展示组件相分离** 的开发思想。\n\n## redux和react如何配合\n\nreact-redux提供了connect和Provider两个好基友，它们一个将组件与redux关联起来，一个将store传给组件。组件通过dispatch发出action，store根据action的type属性调用对应的reducer并传入state和这个action，reducer对state进行处理并返回一个新的state放入store，connect监听到store发生变化，调用setState更新组件，此时组件的props也就跟着变化。\n流程如下：\n![][image-3]\nconnect，Provider，mapStateToProps,mapDispatchToProps是react-redux提供的，redux本身和react没有半毛钱关系，它只是数据处理中心，没有和react产生任何耦合，是react-redux让它们联系在一起\n![][image-4]\nredux 主要由三部分组成：store，reducer，action\n\n### store\n\nstore是一个对象，有四个主要方法：\n\n1. dispatch：\n> 用于action的分发——在createStore中可以用middleware中间件对dispatch进行改造，比如当action传入dispatch会立即触发reducer，有些时候我们不希望它立即触发，而是等待异步操作完成之后再触发，这时候用redux-thunk对dispatch进行改造，以前只能传入一个对象，改造完成后可以传入一个函数，在这个函数里我们手动dispatch一个action对象，这个过程是可控的，就实现了异步。\n\n2. subscribe：\n> 监听state的变化——这个函数在store调用dispatch时会注册一个listener监听state变化，当我们需要知道state是否变化时可以调用，它返回一个函数，调用这个返回的函数可以注销监听\n\n3. getState：\n> 获取store中的state——当我们用action触发reducer改变了state时，需要再拿到新的state里的数据，毕竟数据才是我们想要的。getState主要在两个地方需要用到，一是在dispatch拿到action后store需要用它来获取state里的数据，并把这个数据传给reducer，这个过程是自动执行的，二是在我们利用subscribe监听到state发生变化后调用它来获取新的state数据，如果做到这一步，说明我们已经成功了\n\n4. replaceReducer：\n> 替换reducer，改变state修改的逻辑\n\n### action\n\naction是一个对象，其中type属性是必须的，同时可以传入一些数据。action可以用actionCreator进行创造。dispatch就是把action对象发送出去。\n### reducer\n\n官网上是这么定义的\n> **Actions** describe the fact that something happened, but don't specify how the application's state changes in response. This is the job of reducers.\n\nreducer是一个函数，它接受一个state和一个action，根据action的type返回一个新的state。根据业务逻辑可以分为很多个reducer，然后通过combineReducers将它们合并，state树中有很多对象，每个state对象对应一个reducer，state对象的名字可以在合并时定义。\n\n```\nconst reducer =combineReducers({\n a:doSometingWithA,\n b:processB,\n c:c\n })\n```\n\n### comebineReducers\n\n其实它也是一个reducer，它接受整个state和一个action，然后将整个state拆分发送给对应的reducer进行处理，所有的reducer会收到相同的action，不过它们会根据action的type进行判断，有这个type就进行处理然后返回新的state，没有就返回默认值，然后这些分散的state又会整合在一起返回一个新的state树。\n\n### 整体流程\n\n首先调用store.dispatch将action作为参数传入，同时用调用getState获取当前的状态树state并注册subscribe的listener监听state变化，再调用combineReducers并将获取的state和action传入。combineReducers会将传入的state和action传给所有reducer，reducer会根据state的key值获取与自己对应的state，并根据action的type返回新的state，触发state树的更新，我们调用subscribe监听到state发生变化后用getState获取新的state数据。\n**redux的state和react的state两者完全没有关系，除了名字一样。**\n\n## React-Redux\n\n若只使用redux，流程是这样：\n> component --\\> dispatch(action) --\\> reducer --\\> subscribe --\\> getState --\\> component\n\n使用react-redux之后，流程：\n> component --\\> actionCreator(data) --\\> reducer --\\> component\n\nstore的三大功能：dispatch，subscribe，getState都不需要手动来写了。react-redux帮我们做了这些，同时它提供了两个好基友Provider和connect。\n**Provider**是一个组件，它接受store作为props，然后通过context往下传，这样react中任何组件都可以通过contex获取store。也就意味着我们可以在任何一个组件里利用dispatch(action)来触发reducer改变state，并用subscribe监听state的变化，然后用getState获取变化后的值。但是并不推荐这样做，它会让数据流变的混乱，过度的耦合也会影响组件的复用，维护起来也更麻烦。\n**Connect** --connect(mapStateToProps, mapDispatchToProps, mergeProps, options)是一个函数，它接受四个参数并且再返回一个函数--wrapWithConnect，wrapWithConnect接受一个组件作为参数wrapWithConnect(component)，它内部定义一个新组件Connect(容器组件)并将传入的组件(ui组件)作为Connect的子组件然后return出去。\n\n**mapStateToProps(state, [ownProps])：**\n\n> mapStateToProps 接受两个参数，store的state和自定义的props，并返回一个新的对象，这个对象会作为props的一部分传入ui组件。我们可以根据组件所需要的数据自定义返回一个对象。ownProps的变化也会触发mapStateToProps\n\n\n```javascript\nfunction mapStateToProps(state){\n return {todos:state.todos};\n }\n```\n\n**mapDispatchToProps(dispatch,[ownProps]):**\n\n> mapDispatchToProps如果是对象，那么会和store绑定作为props的一部分传入ui组件。如果是个函数，它接受两个参数，bindActionCreators会将action和dispatch绑定并返回一个对象，这个对象会和ownProps一起作为props的一部分传入ui组件。所以不论mapDispatchToProps是对象还是函数，它最终都会返回一个对象，如果是函数，这个对象的key值是可以自定义的.\n\n\n```javascript\nfunction mapDispatchToProps(dispatch) {\n   return {\n      todoActions: bindActionCreators(todoActionCreators, dispatch),\n      counterActions: bindActionCreators(counterActionCreators, dispatch)\n   };\n}\n```\n\nmapDispatchToProps返回的对象其属性其实就是一个个actionCreator，因为已经和dispatch绑定，所以当调用actionCreator时会立即发送action，而不用手动dispatch。ownProps的变化也会触发mapDispatchToProps.\n\n**mergeProps(stateProps,dispatchProps,ownProps):**\n\n> 将mapStateToProps() 与 mapDispatchToProps()返回的对象和组件自身的props合并成新的props并传入组件。默认返回 Object.assign({}, ownProps, stateProps, dispatchProps) 的结果。\n\n**options:**\n> pure = true 表示Connect容器组件将在shouldComponentUpdate中对store的state和ownProps进行浅对比，判断是否发生变化，优化性能。为false则不对比。\n\n## 完整的react-redux-react流程\n一、Provider组件接受redux的store作为props，然后通过context往下传。\n\n二、connect函数在初始化的时候会将mapDispatchToProps对象绑定到store，如果mapDispatchToProps是函数则在Connect组件获得store后，根据传入的store.dispatch和action通过bindActionCreators进行绑定，再将返回的对象绑定到store，connect函数会返回一个wrapWithConnect函数，同时wrapWithConnect会被调用且传入一个ui组件，wrapWithConnect内部使用class Connect extends Component定义了一个Connect组件，传入的ui组件就是Connect的子组件，然后Connect组件会通过context获得store，并通过store.getState获得完整的state对象，将state传入mapStateToProps返回stateProps对象、mapDispatchToProps对象或mapDispatchToProps函数会返回一个dispatchProps对象，stateProps、dispatchProps以及Connect组件的props三者通过Object.assign()，或者mergeProps合并为props传入ui组件。然后在ComponentDidMount中调用store.subscribe，注册了一个回调函数handleChange监听state的变化。\n\n三、此时ui组件就可以在props中找到actionCreator，当我们调用actionCreator时会自动调用dispatch，在dispatch中会调用getState获取整个state，同时注册一个listener监听state的变化，store将获得的state和action传给combineReducers，combineReducers会将state依据state的key值分别传给子reducer，并将action传给全部子reducer，reducer会被依次执行进行action.type的判断，如果有则返回一个新的state，如果没有则返回默认。combineReducers再次将子reducer返回的单个state进行合并成一个新的完整的state。此时state发生了变化。Connect组件中调用的subscribe会监听到state发生了变化，然后调用handleChange函数，handleChange函数内部首先调用getState获取新的state值并对新旧两个state进行浅对比，如果相同直接return，如果不同则调用mapStateToProps获取stateProps并将新旧两个stateProps进行浅对比，如果相同，直接return结束，不进行后续操作。如果不相同则调用this.setState()触发Connect组件的更新，传入ui组件，触发ui组件的更新，此时ui组件获得新的props，react --\\> redux --\\> react 的一次流程结束。\n\n## 简化版流程 \n\n一、Provider组件接受redux的store作为props，然后通过context往下传。\n\n二、connect函数收到Provider传出的store，然后接受三个参数mapStateToProps，mapDispatchToProps和组件，并将state和actionCreator以props传入组件，这时组件就可以调用actionCreator函数来触发reducer函数返回新的state，connect监听到state变化调用setState更新组件并将新的state传入组件。\n\nconnect可以写的非常简洁，mapStateToProps，mapDispatchToProps只不过是传入的回调函数，connect函数在必要的时候会调用它们，名字不是固定的，甚至可以不写名字。\n\n\n```javascript\nconnect(state => state,action)(Component);\n```\n\n# 项目搭建\n\n1. 先引用react.js,redux,react-router等基本文件，用npm安装，直接在文件中引用。\n2. 从react.js,redux,react-router 中引入所需要的对象和方法。\n\n``` javascript\nimport React, {Component, PropTypes} from 'react';\nimport ReactDOM, {render} from 'react-dom';\nimport {Provider, connect} from 'react-redux';\nimport {createStore, combineReducers, applyMiddleware} from 'redux';\nimport { Router, Route, Redirect, IndexRoute, browserHistory, hashHistory } from 'react-router';\n```\n\n3. 根据需求创建顶层ui组件，每个顶层ui组件对应一个页面。\n4. 创建actionCreators和reducers，并用combineReducers将所有的reducer合并成一个大的reduer。利用createStore创建store并引入combineReducers和applyMiddleware。\n5. 利用connect将actionCreator，reuder和顶层的ui组件进行关联并返回一个新的组件。\n6. 利用connect返回的新的组件配合react-router进行路由的部署，返回一个路由组件Router。\n7. 将Router放入最顶层组件Provider，引入store作为Provider的属性。\n8. 调用render渲染Provider组件且放入页面的标签中。\n可以看到顶层的ui组件其实被套了四层组件，Provider，Router，Route，Connect，这四个组件并不会在视图上改变react，它们只是功能性的。\n\n\n[image-1]:\thttps://segmentfault.com/img/remote/1460000007642743?w=736&h=409\n[image-2]:\thttps://segmentfault.com/img/remote/1460000007642745?w=2803&h=2945\n[image-3]:\thttps://segmentfault.com/img/remote/1460000007642746?w=638&h=479\n[image-4]:\thttps://segmentfault.com/img/remote/1460000007642747?w=1286&h=1246\n\n","source":"_posts/2017-03-16-React.md","raw":"---\ntitle: React分析\ndate: 2017-03-16\ntype: \"tags\"\ncategories: \n- FE\n- React\ntags:\n- FE\n- React\n---\n\n# React\n## react认识\n\n**有一段解释很透彻：**\n用脚本进行DOM操作的代价很昂贵。有个贴切的比喻，把DOM和JavaScript各自想象为一个岛屿，它们之间用收费桥梁连接，js每次访问DOM，都要途径这座桥，并交纳“过桥费”,访问DOM的次数越多，费用也就越高。 因此，推荐的做法是尽量减少过桥的次数，努力待在ECMAScript岛上。\n因为这个原因react的虚拟dom就显得难能可贵了，它创造了**虚拟dom**并且将它们储存起来，每当状态发生变化的时候就会创造新的**虚拟节点**和以前的进行对比（Diff算法），让变化的部分进行渲染。整个过程没有对dom进行获取和操作，只有一个**渲染**的过程，所以react说是一个**ui框架**。\n\n## react组件化\n\nreact的一个组件很明显的由**dom视图**和**state数据**组成，两个部分泾渭分明。\nstate是数据中心，它的状态决定着视图的状态。这时候发现似乎和我们一直推崇的MVC开发模式有点区别，没了Controller控制器，那用户交互怎么处理，数据变化谁来管理？然而这并不是react所要关心的事情，它只负责ui的渲染。与其他框架监听数据动态改变dom不同，react采用setState来控制视图的更新。setState会自动调用render函数，触发视图的重新渲染，如果仅仅只是state数据的变化而没有调用setState，并不会触发更新。 \n组件就是拥有独立功能的视图模块，许多小的组件组成一个大的组件，整个页面就是由一个个组件组合而成。它的好处是利于重复利用和维护。\n\n## react diff算法\n\neact的diff算法用在什么地方呢？当组件更新的时候，react会创建一个新的虚拟dom树并且会和之前储存的dom树进行比较，这个比较多过程就用到了diff算法，所以组件初始化的时候是用不到的。react提出了一种假设，相同的节点具有类似的结构，而不同的节点具有不同的结构。在这种假设之上进行逐层的比较，如果发现对应的节点是不同的，那就直接删除旧的节点以及它所包含的所有子节点然后替换成新的节点。如果是相同的节点，则只进行属性的更改。\n\n对于列表的diff算法稍有不同，因为列表通常具有相同的结构，在对列表节点进行删除，插入，排序的时候，单个节点的整体操作远比一个个对比一个个替换要好得多，所以在创建列表的时候需要设置key值，这样react才能分清谁是谁。当然不写key值也可以，但这样通常会报出警告，通知我们加上key值以提高react的性能。\n![][image-1]\n\n## react组件写法\n\n组件的创造方法为React.createClass() ——创造一个类，react系统内部设计了一套类系统，利用它来创造react组件。但这并不是必须的，我们还可以用es6的class类来创造组件,这也是Facebook官方推荐的写法。\n\n```javascript\nclass MyComponent extends React.Component{\n  constructor(props){\n    super(props);\n    this.state ={\n      params:'',\n      MyList:[]\n    }\n   } \n```\n这两种写法实现的功能一样但是原理却是不同，es6的class类可以看作是构造函数的一个语法糖，可以把它当成构造函数来看，extends实现了类之间的继承 —— 定义一个类MyComponent继承React.Component所有的属性和方法，组件的生命周期函数就是从这来的。\nconstructor是构造器，在实例化对象时调用，super调用了父类的constructor创造了父类的实例对象this，然后用子类的构造函数进行修改。这和es5的原型继承是不同的，原型继承是先创造一个实例化对象this，然后再继承父级的原型方法。\n当我们使用组件<MyComponent/>时，其实是对MyComponent类的实例化，只不过react对这个过程进行了封装，使其看起来像一个标签。\nprops访问父组件的属性\nthis.props.children 访问组件的孩子节点\n可以用React.Children.map()遍历this.props.children\n\n## 组件的生命周期\n\n![][image-2]\n\n### 组件在初始化时会触发5个钩子函数：\n\n1. getDefaultProps() :😀设置，默认的props，也可以用defaultProps设置组件的默认属性。\n2. getInitialState() ：在使用es6的class语法时是没有这个钩子函数的，可以直接在constructor中定义this.state。此时可以访问this.props。\n3. componentWillMount()：件初始化时只调用，以后组件更新不调用，整个生命周期只调用一次，此时可以修改state。\n4. render() ：react最重要的步骤，创建虚拟dom，进行diff算法，更新dom树都在此进行。此时就不能更改state了。\n5. componentDidMount() ：组件渲染之后调用，可以通过this.getDOMNode()获取和操作dom节点，只调用一次。\n\n\n### 组件在更新时也会触发5个钩子函数：\n\n1.componentWillReceiveProps(nextProps) :组件初始化时不调用，组件接受新的props时调用。\n2. shouldComponentUpdate(nextProps,nextState) :**react性能优化非常重要的一环**。组件接受新的state或者props时调用，我们可以设置在此对比前后两个props和state是否相同，如果相同则返回false阻止更新，因为相同的属性状态一定会生成相同的dom树，这样就不需要创造新的dom树和旧的dom树进行diff算法对比，节省大量性能，尤其是在dom结构复杂的时候。不过调用this.forceUpdate会跳过此步骤。\n3. componentWillUpdate(nextProps,nextState) :组件初始化时不调用，只有在组件将要更新时才调用，此时可以修改state\n4. render()\n5. componentDidUpdate() :组件初始化时不调用，组件更新完成后调用，此时可以获取dom节点。\n\n\n## 继承React.Component的类的方法时遵循下面的顺序\n1. constructor\n2. optional static methods\n3. getChildContext\n4. componentWillMount\n5. componentDidMount\n6. componentWillReceiveProps\n7. shouldComponentUpdate\n8. componentWillUpdate\n9. componentDidUpdate\n10. componentWillUnmount\n11. 点击回调或者事件回调，比如onClickSubmit()或者onChangeDescription()\n12. render函数中的getter()方法，，比如getSelectReason()或者getFooterContent()\n13. 可选的render方法\n14. render\n\n\n## react-router路由\n\nRouter就是react的一个组件，并不会被渲染，只是一个创建内部路由规则的配置对象，根据匹配的路由地址展现相应的组件。\nRouter则对路由地址和组件进行绑定，Router具有嵌套功能，表示路由地址的包含关系，这和组件的嵌套没有直接联系。\nRouter可以向绑定的组件传递7个属性：children，history，location，params，route，routeParams，routes，每个属性都包涵路由的相关的信息。比较常用的有children（以路由的包涵关系为区分的组件），location（包括地址，参数，地址切换方式，key值，hash值）。react-router提供Link标签，这只是对a标签的封装，值得注意的是，点击链接进行的跳转并不是默认的方式，react-router阻止了a标签的默认行为并用pushState进行hash值的转变。切换页面的过程是在点击Link标签或者后退前进按钮时，会先发生url地址的转变，Router监听到地址的改变根据Route的path属性匹配到对应的组件，将state值改成对应的组件并调用setState触发render函数重新渲染dom。\n当页面比较多时，项目就会变得越来越大，尤其对于单页面应用来说，初次渲染的速度就会很慢，这时候就需要按需加载，只有切换到页面的时候才去加载对应的js文件。react配合webpack进行按需加载的方法很简单，Route的component改为getComponent，组件用require.ensure的方式获取，并在webpack中配置chunkFilename。\n\n```javascript\nconst chooseProducts = (location, cb) => {\n    require.ensure([], require => {\n        cb(null, require('../Component/chooseProducts').default)\n    },'chooseProducts')\n}\n\nconst helpCenter = (location, cb) => {\n    require.ensure([], require => {\n        cb(null, require('../Component/helpCenter').default)\n    },'helpCenter')\n}\n\nconst saleRecord = (location, cb) => {\n    require.ensure([], require => {\n        cb(null, require('../Component/saleRecord').default)\n    },'saleRecord')\n}\n\nconst RouteConfig = (\n    <Router history={history}>\n        <Route path=\"/\" component={Roots}>\n            <IndexRoute component={index} />//首页\n            <Route path=\"index\" component={index} />\n            <Route path=\"helpCenter\" getComponent={helpCenter} />//帮助中心\n            <Route path=\"saleRecord\" getComponent={saleRecord} />//销售记录\n            <Redirect from='*' to='/'  />\n        </Route>\n    </Router>\n);\n```\n\n\n## 组件之间的通信\n\nreact推崇的是单向数据流，自上而下进行数据的传递，但是由下而上或者不在一条数据流上的组件之间的通信就会变的复杂。解决通信问题的方法很多，如果只是父子级关系，父级可以将一个回调函数当作属性传递给子级，子级可以直接调用函数从而和父级通信。\n\n组件层级嵌套到比较深，可以使用上下文getChildContext来传递信息，这样在不需要将函数一层层往下传，任何一层的子级都可以通过this.context直接访问。\n\n兄弟关系的组件之间无法直接通信，它们只能利用同一层的上级作为中转站。而如果兄弟组件都是最高层的组件，为了能够让它们进行通信，必须在它们外层再套一层组件，这个外层的组件起着保存数据，传递信息的作用，这其实就是redux所做的事情。\n\n组件之间的信息还可以通过全局事件来传递。不同页面可以通过参数传递数据，下个页面可以用location.param来获取。其实react本身很简单，难的在于如何优雅高效的实现组件之间数据的交流。\n\n# redux\n\n## redux作用\n\n首先，redux并不是必须的，它的作用相当于在顶层组件之上又加了一个组件，作用是进行逻辑运算、储存数据和实现组件尤其是顶层组件的通信。如果组件之间的交流不多，逻辑不复杂，只是单纯的进行视图的渲染，这时候用回调，context就行，没必要用redux，用了反而影响开发速度。但是如果组件交流特别频繁，逻辑很复杂，那redux的优势就特别明显了。\n   Redux 的react绑定库是基于 **容器组件和展示组件相分离** 的开发思想。\n\n## redux和react如何配合\n\nreact-redux提供了connect和Provider两个好基友，它们一个将组件与redux关联起来，一个将store传给组件。组件通过dispatch发出action，store根据action的type属性调用对应的reducer并传入state和这个action，reducer对state进行处理并返回一个新的state放入store，connect监听到store发生变化，调用setState更新组件，此时组件的props也就跟着变化。\n流程如下：\n![][image-3]\nconnect，Provider，mapStateToProps,mapDispatchToProps是react-redux提供的，redux本身和react没有半毛钱关系，它只是数据处理中心，没有和react产生任何耦合，是react-redux让它们联系在一起\n![][image-4]\nredux 主要由三部分组成：store，reducer，action\n\n### store\n\nstore是一个对象，有四个主要方法：\n\n1. dispatch：\n> 用于action的分发——在createStore中可以用middleware中间件对dispatch进行改造，比如当action传入dispatch会立即触发reducer，有些时候我们不希望它立即触发，而是等待异步操作完成之后再触发，这时候用redux-thunk对dispatch进行改造，以前只能传入一个对象，改造完成后可以传入一个函数，在这个函数里我们手动dispatch一个action对象，这个过程是可控的，就实现了异步。\n\n2. subscribe：\n> 监听state的变化——这个函数在store调用dispatch时会注册一个listener监听state变化，当我们需要知道state是否变化时可以调用，它返回一个函数，调用这个返回的函数可以注销监听\n\n3. getState：\n> 获取store中的state——当我们用action触发reducer改变了state时，需要再拿到新的state里的数据，毕竟数据才是我们想要的。getState主要在两个地方需要用到，一是在dispatch拿到action后store需要用它来获取state里的数据，并把这个数据传给reducer，这个过程是自动执行的，二是在我们利用subscribe监听到state发生变化后调用它来获取新的state数据，如果做到这一步，说明我们已经成功了\n\n4. replaceReducer：\n> 替换reducer，改变state修改的逻辑\n\n### action\n\naction是一个对象，其中type属性是必须的，同时可以传入一些数据。action可以用actionCreator进行创造。dispatch就是把action对象发送出去。\n### reducer\n\n官网上是这么定义的\n> **Actions** describe the fact that something happened, but don't specify how the application's state changes in response. This is the job of reducers.\n\nreducer是一个函数，它接受一个state和一个action，根据action的type返回一个新的state。根据业务逻辑可以分为很多个reducer，然后通过combineReducers将它们合并，state树中有很多对象，每个state对象对应一个reducer，state对象的名字可以在合并时定义。\n\n```\nconst reducer =combineReducers({\n a:doSometingWithA,\n b:processB,\n c:c\n })\n```\n\n### comebineReducers\n\n其实它也是一个reducer，它接受整个state和一个action，然后将整个state拆分发送给对应的reducer进行处理，所有的reducer会收到相同的action，不过它们会根据action的type进行判断，有这个type就进行处理然后返回新的state，没有就返回默认值，然后这些分散的state又会整合在一起返回一个新的state树。\n\n### 整体流程\n\n首先调用store.dispatch将action作为参数传入，同时用调用getState获取当前的状态树state并注册subscribe的listener监听state变化，再调用combineReducers并将获取的state和action传入。combineReducers会将传入的state和action传给所有reducer，reducer会根据state的key值获取与自己对应的state，并根据action的type返回新的state，触发state树的更新，我们调用subscribe监听到state发生变化后用getState获取新的state数据。\n**redux的state和react的state两者完全没有关系，除了名字一样。**\n\n## React-Redux\n\n若只使用redux，流程是这样：\n> component --\\> dispatch(action) --\\> reducer --\\> subscribe --\\> getState --\\> component\n\n使用react-redux之后，流程：\n> component --\\> actionCreator(data) --\\> reducer --\\> component\n\nstore的三大功能：dispatch，subscribe，getState都不需要手动来写了。react-redux帮我们做了这些，同时它提供了两个好基友Provider和connect。\n**Provider**是一个组件，它接受store作为props，然后通过context往下传，这样react中任何组件都可以通过contex获取store。也就意味着我们可以在任何一个组件里利用dispatch(action)来触发reducer改变state，并用subscribe监听state的变化，然后用getState获取变化后的值。但是并不推荐这样做，它会让数据流变的混乱，过度的耦合也会影响组件的复用，维护起来也更麻烦。\n**Connect** --connect(mapStateToProps, mapDispatchToProps, mergeProps, options)是一个函数，它接受四个参数并且再返回一个函数--wrapWithConnect，wrapWithConnect接受一个组件作为参数wrapWithConnect(component)，它内部定义一个新组件Connect(容器组件)并将传入的组件(ui组件)作为Connect的子组件然后return出去。\n\n**mapStateToProps(state, [ownProps])：**\n\n> mapStateToProps 接受两个参数，store的state和自定义的props，并返回一个新的对象，这个对象会作为props的一部分传入ui组件。我们可以根据组件所需要的数据自定义返回一个对象。ownProps的变化也会触发mapStateToProps\n\n\n```javascript\nfunction mapStateToProps(state){\n return {todos:state.todos};\n }\n```\n\n**mapDispatchToProps(dispatch,[ownProps]):**\n\n> mapDispatchToProps如果是对象，那么会和store绑定作为props的一部分传入ui组件。如果是个函数，它接受两个参数，bindActionCreators会将action和dispatch绑定并返回一个对象，这个对象会和ownProps一起作为props的一部分传入ui组件。所以不论mapDispatchToProps是对象还是函数，它最终都会返回一个对象，如果是函数，这个对象的key值是可以自定义的.\n\n\n```javascript\nfunction mapDispatchToProps(dispatch) {\n   return {\n      todoActions: bindActionCreators(todoActionCreators, dispatch),\n      counterActions: bindActionCreators(counterActionCreators, dispatch)\n   };\n}\n```\n\nmapDispatchToProps返回的对象其属性其实就是一个个actionCreator，因为已经和dispatch绑定，所以当调用actionCreator时会立即发送action，而不用手动dispatch。ownProps的变化也会触发mapDispatchToProps.\n\n**mergeProps(stateProps,dispatchProps,ownProps):**\n\n> 将mapStateToProps() 与 mapDispatchToProps()返回的对象和组件自身的props合并成新的props并传入组件。默认返回 Object.assign({}, ownProps, stateProps, dispatchProps) 的结果。\n\n**options:**\n> pure = true 表示Connect容器组件将在shouldComponentUpdate中对store的state和ownProps进行浅对比，判断是否发生变化，优化性能。为false则不对比。\n\n## 完整的react-redux-react流程\n一、Provider组件接受redux的store作为props，然后通过context往下传。\n\n二、connect函数在初始化的时候会将mapDispatchToProps对象绑定到store，如果mapDispatchToProps是函数则在Connect组件获得store后，根据传入的store.dispatch和action通过bindActionCreators进行绑定，再将返回的对象绑定到store，connect函数会返回一个wrapWithConnect函数，同时wrapWithConnect会被调用且传入一个ui组件，wrapWithConnect内部使用class Connect extends Component定义了一个Connect组件，传入的ui组件就是Connect的子组件，然后Connect组件会通过context获得store，并通过store.getState获得完整的state对象，将state传入mapStateToProps返回stateProps对象、mapDispatchToProps对象或mapDispatchToProps函数会返回一个dispatchProps对象，stateProps、dispatchProps以及Connect组件的props三者通过Object.assign()，或者mergeProps合并为props传入ui组件。然后在ComponentDidMount中调用store.subscribe，注册了一个回调函数handleChange监听state的变化。\n\n三、此时ui组件就可以在props中找到actionCreator，当我们调用actionCreator时会自动调用dispatch，在dispatch中会调用getState获取整个state，同时注册一个listener监听state的变化，store将获得的state和action传给combineReducers，combineReducers会将state依据state的key值分别传给子reducer，并将action传给全部子reducer，reducer会被依次执行进行action.type的判断，如果有则返回一个新的state，如果没有则返回默认。combineReducers再次将子reducer返回的单个state进行合并成一个新的完整的state。此时state发生了变化。Connect组件中调用的subscribe会监听到state发生了变化，然后调用handleChange函数，handleChange函数内部首先调用getState获取新的state值并对新旧两个state进行浅对比，如果相同直接return，如果不同则调用mapStateToProps获取stateProps并将新旧两个stateProps进行浅对比，如果相同，直接return结束，不进行后续操作。如果不相同则调用this.setState()触发Connect组件的更新，传入ui组件，触发ui组件的更新，此时ui组件获得新的props，react --\\> redux --\\> react 的一次流程结束。\n\n## 简化版流程 \n\n一、Provider组件接受redux的store作为props，然后通过context往下传。\n\n二、connect函数收到Provider传出的store，然后接受三个参数mapStateToProps，mapDispatchToProps和组件，并将state和actionCreator以props传入组件，这时组件就可以调用actionCreator函数来触发reducer函数返回新的state，connect监听到state变化调用setState更新组件并将新的state传入组件。\n\nconnect可以写的非常简洁，mapStateToProps，mapDispatchToProps只不过是传入的回调函数，connect函数在必要的时候会调用它们，名字不是固定的，甚至可以不写名字。\n\n\n```javascript\nconnect(state => state,action)(Component);\n```\n\n# 项目搭建\n\n1. 先引用react.js,redux,react-router等基本文件，用npm安装，直接在文件中引用。\n2. 从react.js,redux,react-router 中引入所需要的对象和方法。\n\n``` javascript\nimport React, {Component, PropTypes} from 'react';\nimport ReactDOM, {render} from 'react-dom';\nimport {Provider, connect} from 'react-redux';\nimport {createStore, combineReducers, applyMiddleware} from 'redux';\nimport { Router, Route, Redirect, IndexRoute, browserHistory, hashHistory } from 'react-router';\n```\n\n3. 根据需求创建顶层ui组件，每个顶层ui组件对应一个页面。\n4. 创建actionCreators和reducers，并用combineReducers将所有的reducer合并成一个大的reduer。利用createStore创建store并引入combineReducers和applyMiddleware。\n5. 利用connect将actionCreator，reuder和顶层的ui组件进行关联并返回一个新的组件。\n6. 利用connect返回的新的组件配合react-router进行路由的部署，返回一个路由组件Router。\n7. 将Router放入最顶层组件Provider，引入store作为Provider的属性。\n8. 调用render渲染Provider组件且放入页面的标签中。\n可以看到顶层的ui组件其实被套了四层组件，Provider，Router，Route，Connect，这四个组件并不会在视图上改变react，它们只是功能性的。\n\n\n[image-1]:\thttps://segmentfault.com/img/remote/1460000007642743?w=736&h=409\n[image-2]:\thttps://segmentfault.com/img/remote/1460000007642745?w=2803&h=2945\n[image-3]:\thttps://segmentfault.com/img/remote/1460000007642746?w=638&h=479\n[image-4]:\thttps://segmentfault.com/img/remote/1460000007642747?w=1286&h=1246\n\n","slug":"2017-03-16-React","published":1,"updated":"2020-03-01T12:09:37.508Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckreo13q6003rytt5chdu62y7","content":"<h1 id=\"React\"><a href=\"#React\" class=\"headerlink\" title=\"React\"></a>React</h1><h2 id=\"react认识\"><a href=\"#react认识\" class=\"headerlink\" title=\"react认识\"></a>react认识</h2><p><strong>有一段解释很透彻：</strong><br>用脚本进行DOM操作的代价很昂贵。有个贴切的比喻，把DOM和JavaScript各自想象为一个岛屿，它们之间用收费桥梁连接，js每次访问DOM，都要途径这座桥，并交纳“过桥费”,访问DOM的次数越多，费用也就越高。 因此，推荐的做法是尽量减少过桥的次数，努力待在ECMAScript岛上。<br>因为这个原因react的虚拟dom就显得难能可贵了，它创造了<strong>虚拟dom</strong>并且将它们储存起来，每当状态发生变化的时候就会创造新的<strong>虚拟节点</strong>和以前的进行对比（Diff算法），让变化的部分进行渲染。整个过程没有对dom进行获取和操作，只有一个<strong>渲染</strong>的过程，所以react说是一个<strong>ui框架</strong>。</p>\n<h2 id=\"react组件化\"><a href=\"#react组件化\" class=\"headerlink\" title=\"react组件化\"></a>react组件化</h2><p>react的一个组件很明显的由<strong>dom视图</strong>和<strong>state数据</strong>组成，两个部分泾渭分明。<br>state是数据中心，它的状态决定着视图的状态。这时候发现似乎和我们一直推崇的MVC开发模式有点区别，没了Controller控制器，那用户交互怎么处理，数据变化谁来管理？然而这并不是react所要关心的事情，它只负责ui的渲染。与其他框架监听数据动态改变dom不同，react采用setState来控制视图的更新。setState会自动调用render函数，触发视图的重新渲染，如果仅仅只是state数据的变化而没有调用setState，并不会触发更新。<br>组件就是拥有独立功能的视图模块，许多小的组件组成一个大的组件，整个页面就是由一个个组件组合而成。它的好处是利于重复利用和维护。</p>\n<h2 id=\"react-diff算法\"><a href=\"#react-diff算法\" class=\"headerlink\" title=\"react diff算法\"></a>react diff算法</h2><p>eact的diff算法用在什么地方呢？当组件更新的时候，react会创建一个新的虚拟dom树并且会和之前储存的dom树进行比较，这个比较多过程就用到了diff算法，所以组件初始化的时候是用不到的。react提出了一种假设，相同的节点具有类似的结构，而不同的节点具有不同的结构。在这种假设之上进行逐层的比较，如果发现对应的节点是不同的，那就直接删除旧的节点以及它所包含的所有子节点然后替换成新的节点。如果是相同的节点，则只进行属性的更改。</p>\n<p>对于列表的diff算法稍有不同，因为列表通常具有相同的结构，在对列表节点进行删除，插入，排序的时候，单个节点的整体操作远比一个个对比一个个替换要好得多，所以在创建列表的时候需要设置key值，这样react才能分清谁是谁。当然不写key值也可以，但这样通常会报出警告，通知我们加上key值以提高react的性能。<br><img src=\"https://segmentfault.com/img/remote/1460000007642743?w=736&h=409\" alt=\"\"></p>\n<h2 id=\"react组件写法\"><a href=\"#react组件写法\" class=\"headerlink\" title=\"react组件写法\"></a>react组件写法</h2><p>组件的创造方法为React.createClass() ——创造一个类，react系统内部设计了一套类系统，利用它来创造react组件。但这并不是必须的，我们还可以用es6的class类来创造组件,这也是Facebook官方推荐的写法。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyComponent</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(props)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(props);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.state =&#123;</span><br><span class=\"line\">      params:<span class=\"string\">''</span>,</span><br><span class=\"line\">      MyList:[]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p>这两种写法实现的功能一样但是原理却是不同，es6的class类可以看作是构造函数的一个语法糖，可以把它当成构造函数来看，extends实现了类之间的继承 —— 定义一个类MyComponent继承React.Component所有的属性和方法，组件的生命周期函数就是从这来的。<br>constructor是构造器，在实例化对象时调用，super调用了父类的constructor创造了父类的实例对象this，然后用子类的构造函数进行修改。这和es5的原型继承是不同的，原型继承是先创造一个实例化对象this，然后再继承父级的原型方法。<br>当我们使用组件<MyComponent/>时，其实是对MyComponent类的实例化，只不过react对这个过程进行了封装，使其看起来像一个标签。<br>props访问父组件的属性<br>this.props.children 访问组件的孩子节点<br>可以用React.Children.map()遍历this.props.children</p>\n<h2 id=\"组件的生命周期\"><a href=\"#组件的生命周期\" class=\"headerlink\" title=\"组件的生命周期\"></a>组件的生命周期</h2><p><img src=\"https://segmentfault.com/img/remote/1460000007642745?w=2803&h=2945\" alt=\"\"></p>\n<h3 id=\"组件在初始化时会触发5个钩子函数：\"><a href=\"#组件在初始化时会触发5个钩子函数：\" class=\"headerlink\" title=\"组件在初始化时会触发5个钩子函数：\"></a>组件在初始化时会触发5个钩子函数：</h3><ol>\n<li>getDefaultProps() :😀设置，默认的props，也可以用defaultProps设置组件的默认属性。</li>\n<li>getInitialState() ：在使用es6的class语法时是没有这个钩子函数的，可以直接在constructor中定义this.state。此时可以访问this.props。</li>\n<li>componentWillMount()：件初始化时只调用，以后组件更新不调用，整个生命周期只调用一次，此时可以修改state。</li>\n<li>render() ：react最重要的步骤，创建虚拟dom，进行diff算法，更新dom树都在此进行。此时就不能更改state了。</li>\n<li>componentDidMount() ：组件渲染之后调用，可以通过this.getDOMNode()获取和操作dom节点，只调用一次。</li>\n</ol>\n<h3 id=\"组件在更新时也会触发5个钩子函数：\"><a href=\"#组件在更新时也会触发5个钩子函数：\" class=\"headerlink\" title=\"组件在更新时也会触发5个钩子函数：\"></a>组件在更新时也会触发5个钩子函数：</h3><p>1.componentWillReceiveProps(nextProps) :组件初始化时不调用，组件接受新的props时调用。<br>2. shouldComponentUpdate(nextProps,nextState) :<strong>react性能优化非常重要的一环</strong>。组件接受新的state或者props时调用，我们可以设置在此对比前后两个props和state是否相同，如果相同则返回false阻止更新，因为相同的属性状态一定会生成相同的dom树，这样就不需要创造新的dom树和旧的dom树进行diff算法对比，节省大量性能，尤其是在dom结构复杂的时候。不过调用this.forceUpdate会跳过此步骤。<br>3. componentWillUpdate(nextProps,nextState) :组件初始化时不调用，只有在组件将要更新时才调用，此时可以修改state<br>4. render()<br>5. componentDidUpdate() :组件初始化时不调用，组件更新完成后调用，此时可以获取dom节点。</p>\n<h2 id=\"继承React-Component的类的方法时遵循下面的顺序\"><a href=\"#继承React-Component的类的方法时遵循下面的顺序\" class=\"headerlink\" title=\"继承React.Component的类的方法时遵循下面的顺序\"></a>继承React.Component的类的方法时遵循下面的顺序</h2><ol>\n<li>constructor</li>\n<li>optional static methods</li>\n<li>getChildContext</li>\n<li>componentWillMount</li>\n<li>componentDidMount</li>\n<li>componentWillReceiveProps</li>\n<li>shouldComponentUpdate</li>\n<li>componentWillUpdate</li>\n<li>componentDidUpdate</li>\n<li>componentWillUnmount</li>\n<li>点击回调或者事件回调，比如onClickSubmit()或者onChangeDescription()</li>\n<li>render函数中的getter()方法，，比如getSelectReason()或者getFooterContent()</li>\n<li>可选的render方法</li>\n<li>render</li>\n</ol>\n<h2 id=\"react-router路由\"><a href=\"#react-router路由\" class=\"headerlink\" title=\"react-router路由\"></a>react-router路由</h2><p>Router就是react的一个组件，并不会被渲染，只是一个创建内部路由规则的配置对象，根据匹配的路由地址展现相应的组件。<br>Router则对路由地址和组件进行绑定，Router具有嵌套功能，表示路由地址的包含关系，这和组件的嵌套没有直接联系。<br>Router可以向绑定的组件传递7个属性：children，history，location，params，route，routeParams，routes，每个属性都包涵路由的相关的信息。比较常用的有children（以路由的包涵关系为区分的组件），location（包括地址，参数，地址切换方式，key值，hash值）。react-router提供Link标签，这只是对a标签的封装，值得注意的是，点击链接进行的跳转并不是默认的方式，react-router阻止了a标签的默认行为并用pushState进行hash值的转变。切换页面的过程是在点击Link标签或者后退前进按钮时，会先发生url地址的转变，Router监听到地址的改变根据Route的path属性匹配到对应的组件，将state值改成对应的组件并调用setState触发render函数重新渲染dom。<br>当页面比较多时，项目就会变得越来越大，尤其对于单页面应用来说，初次渲染的速度就会很慢，这时候就需要按需加载，只有切换到页面的时候才去加载对应的js文件。react配合webpack进行按需加载的方法很简单，Route的component改为getComponent，组件用require.ensure的方式获取，并在webpack中配置chunkFilename。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> chooseProducts = <span class=\"function\">(<span class=\"params\">location, cb</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">require</span>.ensure([], <span class=\"built_in\">require</span> =&gt; &#123;</span><br><span class=\"line\">        cb(<span class=\"literal\">null</span>, <span class=\"built_in\">require</span>(<span class=\"string\">'../Component/chooseProducts'</span>).default)</span><br><span class=\"line\">    &#125;,<span class=\"string\">'chooseProducts'</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> helpCenter = <span class=\"function\">(<span class=\"params\">location, cb</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">require</span>.ensure([], <span class=\"built_in\">require</span> =&gt; &#123;</span><br><span class=\"line\">        cb(<span class=\"literal\">null</span>, <span class=\"built_in\">require</span>(<span class=\"string\">'../Component/helpCenter'</span>).default)</span><br><span class=\"line\">    &#125;,<span class=\"string\">'helpCenter'</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> saleRecord = <span class=\"function\">(<span class=\"params\">location, cb</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">require</span>.ensure([], <span class=\"built_in\">require</span> =&gt; &#123;</span><br><span class=\"line\">        cb(<span class=\"literal\">null</span>, <span class=\"built_in\">require</span>(<span class=\"string\">'../Component/saleRecord'</span>).default)</span><br><span class=\"line\">    &#125;,<span class=\"string\">'saleRecord'</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> RouteConfig = (</span><br><span class=\"line\">    &lt;Router history=&#123;history&#125;&gt;</span><br><span class=\"line\">        &lt;Route path=<span class=\"string\">\"/\"</span> component=&#123;Roots&#125;&gt;</span><br><span class=\"line\">            &lt;IndexRoute component=&#123;index&#125; /&gt;<span class=\"comment\">//首页</span></span><br><span class=\"line\">            &lt;Route path=<span class=\"string\">\"index\"</span> component=&#123;index&#125; /&gt;</span><br><span class=\"line\">            &lt;Route path=<span class=\"string\">\"helpCenter\"</span> getComponent=&#123;helpCenter&#125; /&gt;<span class=\"comment\">//帮助中心</span></span><br><span class=\"line\">            &lt;Route path=<span class=\"string\">\"saleRecord\"</span> getComponent=&#123;saleRecord&#125; /&gt;<span class=\"comment\">//销售记录</span></span><br><span class=\"line\">            &lt;Redirect <span class=\"keyword\">from</span>=<span class=\"string\">'*'</span> to=<span class=\"string\">'/'</span>  /&gt;</span><br><span class=\"line\">        &lt;<span class=\"regexp\">/Route&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>Router&gt;</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"组件之间的通信\"><a href=\"#组件之间的通信\" class=\"headerlink\" title=\"组件之间的通信\"></a>组件之间的通信</h2><p>react推崇的是单向数据流，自上而下进行数据的传递，但是由下而上或者不在一条数据流上的组件之间的通信就会变的复杂。解决通信问题的方法很多，如果只是父子级关系，父级可以将一个回调函数当作属性传递给子级，子级可以直接调用函数从而和父级通信。</p>\n<p>组件层级嵌套到比较深，可以使用上下文getChildContext来传递信息，这样在不需要将函数一层层往下传，任何一层的子级都可以通过this.context直接访问。</p>\n<p>兄弟关系的组件之间无法直接通信，它们只能利用同一层的上级作为中转站。而如果兄弟组件都是最高层的组件，为了能够让它们进行通信，必须在它们外层再套一层组件，这个外层的组件起着保存数据，传递信息的作用，这其实就是redux所做的事情。</p>\n<p>组件之间的信息还可以通过全局事件来传递。不同页面可以通过参数传递数据，下个页面可以用location.param来获取。其实react本身很简单，难的在于如何优雅高效的实现组件之间数据的交流。</p>\n<h1 id=\"redux\"><a href=\"#redux\" class=\"headerlink\" title=\"redux\"></a>redux</h1><h2 id=\"redux作用\"><a href=\"#redux作用\" class=\"headerlink\" title=\"redux作用\"></a>redux作用</h2><p>首先，redux并不是必须的，它的作用相当于在顶层组件之上又加了一个组件，作用是进行逻辑运算、储存数据和实现组件尤其是顶层组件的通信。如果组件之间的交流不多，逻辑不复杂，只是单纯的进行视图的渲染，这时候用回调，context就行，没必要用redux，用了反而影响开发速度。但是如果组件交流特别频繁，逻辑很复杂，那redux的优势就特别明显了。<br>   Redux 的react绑定库是基于 <strong>容器组件和展示组件相分离</strong> 的开发思想。</p>\n<h2 id=\"redux和react如何配合\"><a href=\"#redux和react如何配合\" class=\"headerlink\" title=\"redux和react如何配合\"></a>redux和react如何配合</h2><p>react-redux提供了connect和Provider两个好基友，它们一个将组件与redux关联起来，一个将store传给组件。组件通过dispatch发出action，store根据action的type属性调用对应的reducer并传入state和这个action，reducer对state进行处理并返回一个新的state放入store，connect监听到store发生变化，调用setState更新组件，此时组件的props也就跟着变化。<br>流程如下：<br><img src=\"https://segmentfault.com/img/remote/1460000007642746?w=638&h=479\" alt=\"\"><br>connect，Provider，mapStateToProps,mapDispatchToProps是react-redux提供的，redux本身和react没有半毛钱关系，它只是数据处理中心，没有和react产生任何耦合，是react-redux让它们联系在一起<br><img src=\"https://segmentfault.com/img/remote/1460000007642747?w=1286&h=1246\" alt=\"\"><br>redux 主要由三部分组成：store，reducer，action</p>\n<h3 id=\"store\"><a href=\"#store\" class=\"headerlink\" title=\"store\"></a>store</h3><p>store是一个对象，有四个主要方法：</p>\n<ol>\n<li><p>dispatch：</p>\n<blockquote>\n<p>用于action的分发——在createStore中可以用middleware中间件对dispatch进行改造，比如当action传入dispatch会立即触发reducer，有些时候我们不希望它立即触发，而是等待异步操作完成之后再触发，这时候用redux-thunk对dispatch进行改造，以前只能传入一个对象，改造完成后可以传入一个函数，在这个函数里我们手动dispatch一个action对象，这个过程是可控的，就实现了异步。</p>\n</blockquote>\n</li>\n<li><p>subscribe：</p>\n<blockquote>\n<p>监听state的变化——这个函数在store调用dispatch时会注册一个listener监听state变化，当我们需要知道state是否变化时可以调用，它返回一个函数，调用这个返回的函数可以注销监听</p>\n</blockquote>\n</li>\n<li><p>getState：</p>\n<blockquote>\n<p>获取store中的state——当我们用action触发reducer改变了state时，需要再拿到新的state里的数据，毕竟数据才是我们想要的。getState主要在两个地方需要用到，一是在dispatch拿到action后store需要用它来获取state里的数据，并把这个数据传给reducer，这个过程是自动执行的，二是在我们利用subscribe监听到state发生变化后调用它来获取新的state数据，如果做到这一步，说明我们已经成功了</p>\n</blockquote>\n</li>\n<li><p>replaceReducer：</p>\n<blockquote>\n<p>替换reducer，改变state修改的逻辑</p>\n</blockquote>\n</li>\n</ol>\n<h3 id=\"action\"><a href=\"#action\" class=\"headerlink\" title=\"action\"></a>action</h3><p>action是一个对象，其中type属性是必须的，同时可以传入一些数据。action可以用actionCreator进行创造。dispatch就是把action对象发送出去。</p>\n<h3 id=\"reducer\"><a href=\"#reducer\" class=\"headerlink\" title=\"reducer\"></a>reducer</h3><p>官网上是这么定义的</p>\n<blockquote>\n<p><strong>Actions</strong> describe the fact that something happened, but don’t specify how the application’s state changes in response. This is the job of reducers.</p>\n</blockquote>\n<p>reducer是一个函数，它接受一个state和一个action，根据action的type返回一个新的state。根据业务逻辑可以分为很多个reducer，然后通过combineReducers将它们合并，state树中有很多对象，每个state对象对应一个reducer，state对象的名字可以在合并时定义。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const reducer &#x3D;combineReducers(&#123;</span><br><span class=\"line\"> a:doSometingWithA,</span><br><span class=\"line\"> b:processB,</span><br><span class=\"line\"> c:c</span><br><span class=\"line\"> &#125;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"comebineReducers\"><a href=\"#comebineReducers\" class=\"headerlink\" title=\"comebineReducers\"></a>comebineReducers</h3><p>其实它也是一个reducer，它接受整个state和一个action，然后将整个state拆分发送给对应的reducer进行处理，所有的reducer会收到相同的action，不过它们会根据action的type进行判断，有这个type就进行处理然后返回新的state，没有就返回默认值，然后这些分散的state又会整合在一起返回一个新的state树。</p>\n<h3 id=\"整体流程\"><a href=\"#整体流程\" class=\"headerlink\" title=\"整体流程\"></a>整体流程</h3><p>首先调用store.dispatch将action作为参数传入，同时用调用getState获取当前的状态树state并注册subscribe的listener监听state变化，再调用combineReducers并将获取的state和action传入。combineReducers会将传入的state和action传给所有reducer，reducer会根据state的key值获取与自己对应的state，并根据action的type返回新的state，触发state树的更新，我们调用subscribe监听到state发生变化后用getState获取新的state数据。<br><strong>redux的state和react的state两者完全没有关系，除了名字一样。</strong></p>\n<h2 id=\"React-Redux\"><a href=\"#React-Redux\" class=\"headerlink\" title=\"React-Redux\"></a>React-Redux</h2><p>若只使用redux，流程是这样：</p>\n<blockquote>\n<p>component –&gt; dispatch(action) –&gt; reducer –&gt; subscribe –&gt; getState –&gt; component</p>\n</blockquote>\n<p>使用react-redux之后，流程：</p>\n<blockquote>\n<p>component –&gt; actionCreator(data) –&gt; reducer –&gt; component</p>\n</blockquote>\n<p>store的三大功能：dispatch，subscribe，getState都不需要手动来写了。react-redux帮我们做了这些，同时它提供了两个好基友Provider和connect。<br><strong>Provider</strong>是一个组件，它接受store作为props，然后通过context往下传，这样react中任何组件都可以通过contex获取store。也就意味着我们可以在任何一个组件里利用dispatch(action)来触发reducer改变state，并用subscribe监听state的变化，然后用getState获取变化后的值。但是并不推荐这样做，它会让数据流变的混乱，过度的耦合也会影响组件的复用，维护起来也更麻烦。<br><strong>Connect</strong> –connect(mapStateToProps, mapDispatchToProps, mergeProps, options)是一个函数，它接受四个参数并且再返回一个函数–wrapWithConnect，wrapWithConnect接受一个组件作为参数wrapWithConnect(component)，它内部定义一个新组件Connect(容器组件)并将传入的组件(ui组件)作为Connect的子组件然后return出去。</p>\n<p><strong>mapStateToProps(state, [ownProps])：</strong></p>\n<blockquote>\n<p>mapStateToProps 接受两个参数，store的state和自定义的props，并返回一个新的对象，这个对象会作为props的一部分传入ui组件。我们可以根据组件所需要的数据自定义返回一个对象。ownProps的变化也会触发mapStateToProps</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mapStateToProps</span>(<span class=\"params\">state</span>)</span>&#123;</span><br><span class=\"line\"> <span class=\"keyword\">return</span> &#123;<span class=\"attr\">todos</span>:state.todos&#125;;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>mapDispatchToProps(dispatch,[ownProps]):</strong></p>\n<blockquote>\n<p>mapDispatchToProps如果是对象，那么会和store绑定作为props的一部分传入ui组件。如果是个函数，它接受两个参数，bindActionCreators会将action和dispatch绑定并返回一个对象，这个对象会和ownProps一起作为props的一部分传入ui组件。所以不论mapDispatchToProps是对象还是函数，它最终都会返回一个对象，如果是函数，这个对象的key值是可以自定义的.</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mapDispatchToProps</span>(<span class=\"params\">dispatch</span>) </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      todoActions: bindActionCreators(todoActionCreators, dispatch),</span><br><span class=\"line\">      counterActions: bindActionCreators(counterActionCreators, dispatch)</span><br><span class=\"line\">   &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>mapDispatchToProps返回的对象其属性其实就是一个个actionCreator，因为已经和dispatch绑定，所以当调用actionCreator时会立即发送action，而不用手动dispatch。ownProps的变化也会触发mapDispatchToProps.</p>\n<p><strong>mergeProps(stateProps,dispatchProps,ownProps):</strong></p>\n<blockquote>\n<p>将mapStateToProps() 与 mapDispatchToProps()返回的对象和组件自身的props合并成新的props并传入组件。默认返回 Object.assign({}, ownProps, stateProps, dispatchProps) 的结果。</p>\n</blockquote>\n<p><strong>options:</strong></p>\n<blockquote>\n<p>pure = true 表示Connect容器组件将在shouldComponentUpdate中对store的state和ownProps进行浅对比，判断是否发生变化，优化性能。为false则不对比。</p>\n</blockquote>\n<h2 id=\"完整的react-redux-react流程\"><a href=\"#完整的react-redux-react流程\" class=\"headerlink\" title=\"完整的react-redux-react流程\"></a>完整的react-redux-react流程</h2><p>一、Provider组件接受redux的store作为props，然后通过context往下传。</p>\n<p>二、connect函数在初始化的时候会将mapDispatchToProps对象绑定到store，如果mapDispatchToProps是函数则在Connect组件获得store后，根据传入的store.dispatch和action通过bindActionCreators进行绑定，再将返回的对象绑定到store，connect函数会返回一个wrapWithConnect函数，同时wrapWithConnect会被调用且传入一个ui组件，wrapWithConnect内部使用class Connect extends Component定义了一个Connect组件，传入的ui组件就是Connect的子组件，然后Connect组件会通过context获得store，并通过store.getState获得完整的state对象，将state传入mapStateToProps返回stateProps对象、mapDispatchToProps对象或mapDispatchToProps函数会返回一个dispatchProps对象，stateProps、dispatchProps以及Connect组件的props三者通过Object.assign()，或者mergeProps合并为props传入ui组件。然后在ComponentDidMount中调用store.subscribe，注册了一个回调函数handleChange监听state的变化。</p>\n<p>三、此时ui组件就可以在props中找到actionCreator，当我们调用actionCreator时会自动调用dispatch，在dispatch中会调用getState获取整个state，同时注册一个listener监听state的变化，store将获得的state和action传给combineReducers，combineReducers会将state依据state的key值分别传给子reducer，并将action传给全部子reducer，reducer会被依次执行进行action.type的判断，如果有则返回一个新的state，如果没有则返回默认。combineReducers再次将子reducer返回的单个state进行合并成一个新的完整的state。此时state发生了变化。Connect组件中调用的subscribe会监听到state发生了变化，然后调用handleChange函数，handleChange函数内部首先调用getState获取新的state值并对新旧两个state进行浅对比，如果相同直接return，如果不同则调用mapStateToProps获取stateProps并将新旧两个stateProps进行浅对比，如果相同，直接return结束，不进行后续操作。如果不相同则调用this.setState()触发Connect组件的更新，传入ui组件，触发ui组件的更新，此时ui组件获得新的props，react –&gt; redux –&gt; react 的一次流程结束。</p>\n<h2 id=\"简化版流程\"><a href=\"#简化版流程\" class=\"headerlink\" title=\"简化版流程\"></a>简化版流程</h2><p>一、Provider组件接受redux的store作为props，然后通过context往下传。</p>\n<p>二、connect函数收到Provider传出的store，然后接受三个参数mapStateToProps，mapDispatchToProps和组件，并将state和actionCreator以props传入组件，这时组件就可以调用actionCreator函数来触发reducer函数返回新的state，connect监听到state变化调用setState更新组件并将新的state传入组件。</p>\n<p>connect可以写的非常简洁，mapStateToProps，mapDispatchToProps只不过是传入的回调函数，connect函数在必要的时候会调用它们，名字不是固定的，甚至可以不写名字。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">connect(<span class=\"function\"><span class=\"params\">state</span> =&gt;</span> state,action)(Component);</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"项目搭建\"><a href=\"#项目搭建\" class=\"headerlink\" title=\"项目搭建\"></a>项目搭建</h1><ol>\n<li>先引用react.js,redux,react-router等基本文件，用npm安装，直接在文件中引用。</li>\n<li>从react.js,redux,react-router 中引入所需要的对象和方法。</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React, &#123;Component, PropTypes&#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> ReactDOM, &#123;render&#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-dom'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;Provider, connect&#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-redux'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;createStore, combineReducers, applyMiddleware&#125; <span class=\"keyword\">from</span> <span class=\"string\">'redux'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Router, Route, Redirect, IndexRoute, browserHistory, hashHistory &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-router'</span>;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>根据需求创建顶层ui组件，每个顶层ui组件对应一个页面。</li>\n<li>创建actionCreators和reducers，并用combineReducers将所有的reducer合并成一个大的reduer。利用createStore创建store并引入combineReducers和applyMiddleware。</li>\n<li>利用connect将actionCreator，reuder和顶层的ui组件进行关联并返回一个新的组件。</li>\n<li>利用connect返回的新的组件配合react-router进行路由的部署，返回一个路由组件Router。</li>\n<li>将Router放入最顶层组件Provider，引入store作为Provider的属性。</li>\n<li>调用render渲染Provider组件且放入页面的标签中。<br>可以看到顶层的ui组件其实被套了四层组件，Provider，Router，Route，Connect，这四个组件并不会在视图上改变react，它们只是功能性的。</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"React\"><a href=\"#React\" class=\"headerlink\" title=\"React\"></a>React</h1><h2 id=\"react认识\"><a href=\"#react认识\" class=\"headerlink\" title=\"react认识\"></a>react认识</h2><p><strong>有一段解释很透彻：</strong><br>用脚本进行DOM操作的代价很昂贵。有个贴切的比喻，把DOM和JavaScript各自想象为一个岛屿，它们之间用收费桥梁连接，js每次访问DOM，都要途径这座桥，并交纳“过桥费”,访问DOM的次数越多，费用也就越高。 因此，推荐的做法是尽量减少过桥的次数，努力待在ECMAScript岛上。<br>因为这个原因react的虚拟dom就显得难能可贵了，它创造了<strong>虚拟dom</strong>并且将它们储存起来，每当状态发生变化的时候就会创造新的<strong>虚拟节点</strong>和以前的进行对比（Diff算法），让变化的部分进行渲染。整个过程没有对dom进行获取和操作，只有一个<strong>渲染</strong>的过程，所以react说是一个<strong>ui框架</strong>。</p>\n<h2 id=\"react组件化\"><a href=\"#react组件化\" class=\"headerlink\" title=\"react组件化\"></a>react组件化</h2><p>react的一个组件很明显的由<strong>dom视图</strong>和<strong>state数据</strong>组成，两个部分泾渭分明。<br>state是数据中心，它的状态决定着视图的状态。这时候发现似乎和我们一直推崇的MVC开发模式有点区别，没了Controller控制器，那用户交互怎么处理，数据变化谁来管理？然而这并不是react所要关心的事情，它只负责ui的渲染。与其他框架监听数据动态改变dom不同，react采用setState来控制视图的更新。setState会自动调用render函数，触发视图的重新渲染，如果仅仅只是state数据的变化而没有调用setState，并不会触发更新。<br>组件就是拥有独立功能的视图模块，许多小的组件组成一个大的组件，整个页面就是由一个个组件组合而成。它的好处是利于重复利用和维护。</p>\n<h2 id=\"react-diff算法\"><a href=\"#react-diff算法\" class=\"headerlink\" title=\"react diff算法\"></a>react diff算法</h2><p>eact的diff算法用在什么地方呢？当组件更新的时候，react会创建一个新的虚拟dom树并且会和之前储存的dom树进行比较，这个比较多过程就用到了diff算法，所以组件初始化的时候是用不到的。react提出了一种假设，相同的节点具有类似的结构，而不同的节点具有不同的结构。在这种假设之上进行逐层的比较，如果发现对应的节点是不同的，那就直接删除旧的节点以及它所包含的所有子节点然后替换成新的节点。如果是相同的节点，则只进行属性的更改。</p>\n<p>对于列表的diff算法稍有不同，因为列表通常具有相同的结构，在对列表节点进行删除，插入，排序的时候，单个节点的整体操作远比一个个对比一个个替换要好得多，所以在创建列表的时候需要设置key值，这样react才能分清谁是谁。当然不写key值也可以，但这样通常会报出警告，通知我们加上key值以提高react的性能。<br><img src=\"https://segmentfault.com/img/remote/1460000007642743?w=736&h=409\" alt=\"\"></p>\n<h2 id=\"react组件写法\"><a href=\"#react组件写法\" class=\"headerlink\" title=\"react组件写法\"></a>react组件写法</h2><p>组件的创造方法为React.createClass() ——创造一个类，react系统内部设计了一套类系统，利用它来创造react组件。但这并不是必须的，我们还可以用es6的class类来创造组件,这也是Facebook官方推荐的写法。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyComponent</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(props)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(props);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.state =&#123;</span><br><span class=\"line\">      params:<span class=\"string\">''</span>,</span><br><span class=\"line\">      MyList:[]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p>这两种写法实现的功能一样但是原理却是不同，es6的class类可以看作是构造函数的一个语法糖，可以把它当成构造函数来看，extends实现了类之间的继承 —— 定义一个类MyComponent继承React.Component所有的属性和方法，组件的生命周期函数就是从这来的。<br>constructor是构造器，在实例化对象时调用，super调用了父类的constructor创造了父类的实例对象this，然后用子类的构造函数进行修改。这和es5的原型继承是不同的，原型继承是先创造一个实例化对象this，然后再继承父级的原型方法。<br>当我们使用组件<MyComponent/>时，其实是对MyComponent类的实例化，只不过react对这个过程进行了封装，使其看起来像一个标签。<br>props访问父组件的属性<br>this.props.children 访问组件的孩子节点<br>可以用React.Children.map()遍历this.props.children</p>\n<h2 id=\"组件的生命周期\"><a href=\"#组件的生命周期\" class=\"headerlink\" title=\"组件的生命周期\"></a>组件的生命周期</h2><p><img src=\"https://segmentfault.com/img/remote/1460000007642745?w=2803&h=2945\" alt=\"\"></p>\n<h3 id=\"组件在初始化时会触发5个钩子函数：\"><a href=\"#组件在初始化时会触发5个钩子函数：\" class=\"headerlink\" title=\"组件在初始化时会触发5个钩子函数：\"></a>组件在初始化时会触发5个钩子函数：</h3><ol>\n<li>getDefaultProps() :😀设置，默认的props，也可以用defaultProps设置组件的默认属性。</li>\n<li>getInitialState() ：在使用es6的class语法时是没有这个钩子函数的，可以直接在constructor中定义this.state。此时可以访问this.props。</li>\n<li>componentWillMount()：件初始化时只调用，以后组件更新不调用，整个生命周期只调用一次，此时可以修改state。</li>\n<li>render() ：react最重要的步骤，创建虚拟dom，进行diff算法，更新dom树都在此进行。此时就不能更改state了。</li>\n<li>componentDidMount() ：组件渲染之后调用，可以通过this.getDOMNode()获取和操作dom节点，只调用一次。</li>\n</ol>\n<h3 id=\"组件在更新时也会触发5个钩子函数：\"><a href=\"#组件在更新时也会触发5个钩子函数：\" class=\"headerlink\" title=\"组件在更新时也会触发5个钩子函数：\"></a>组件在更新时也会触发5个钩子函数：</h3><p>1.componentWillReceiveProps(nextProps) :组件初始化时不调用，组件接受新的props时调用。<br>2. shouldComponentUpdate(nextProps,nextState) :<strong>react性能优化非常重要的一环</strong>。组件接受新的state或者props时调用，我们可以设置在此对比前后两个props和state是否相同，如果相同则返回false阻止更新，因为相同的属性状态一定会生成相同的dom树，这样就不需要创造新的dom树和旧的dom树进行diff算法对比，节省大量性能，尤其是在dom结构复杂的时候。不过调用this.forceUpdate会跳过此步骤。<br>3. componentWillUpdate(nextProps,nextState) :组件初始化时不调用，只有在组件将要更新时才调用，此时可以修改state<br>4. render()<br>5. componentDidUpdate() :组件初始化时不调用，组件更新完成后调用，此时可以获取dom节点。</p>\n<h2 id=\"继承React-Component的类的方法时遵循下面的顺序\"><a href=\"#继承React-Component的类的方法时遵循下面的顺序\" class=\"headerlink\" title=\"继承React.Component的类的方法时遵循下面的顺序\"></a>继承React.Component的类的方法时遵循下面的顺序</h2><ol>\n<li>constructor</li>\n<li>optional static methods</li>\n<li>getChildContext</li>\n<li>componentWillMount</li>\n<li>componentDidMount</li>\n<li>componentWillReceiveProps</li>\n<li>shouldComponentUpdate</li>\n<li>componentWillUpdate</li>\n<li>componentDidUpdate</li>\n<li>componentWillUnmount</li>\n<li>点击回调或者事件回调，比如onClickSubmit()或者onChangeDescription()</li>\n<li>render函数中的getter()方法，，比如getSelectReason()或者getFooterContent()</li>\n<li>可选的render方法</li>\n<li>render</li>\n</ol>\n<h2 id=\"react-router路由\"><a href=\"#react-router路由\" class=\"headerlink\" title=\"react-router路由\"></a>react-router路由</h2><p>Router就是react的一个组件，并不会被渲染，只是一个创建内部路由规则的配置对象，根据匹配的路由地址展现相应的组件。<br>Router则对路由地址和组件进行绑定，Router具有嵌套功能，表示路由地址的包含关系，这和组件的嵌套没有直接联系。<br>Router可以向绑定的组件传递7个属性：children，history，location，params，route，routeParams，routes，每个属性都包涵路由的相关的信息。比较常用的有children（以路由的包涵关系为区分的组件），location（包括地址，参数，地址切换方式，key值，hash值）。react-router提供Link标签，这只是对a标签的封装，值得注意的是，点击链接进行的跳转并不是默认的方式，react-router阻止了a标签的默认行为并用pushState进行hash值的转变。切换页面的过程是在点击Link标签或者后退前进按钮时，会先发生url地址的转变，Router监听到地址的改变根据Route的path属性匹配到对应的组件，将state值改成对应的组件并调用setState触发render函数重新渲染dom。<br>当页面比较多时，项目就会变得越来越大，尤其对于单页面应用来说，初次渲染的速度就会很慢，这时候就需要按需加载，只有切换到页面的时候才去加载对应的js文件。react配合webpack进行按需加载的方法很简单，Route的component改为getComponent，组件用require.ensure的方式获取，并在webpack中配置chunkFilename。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> chooseProducts = <span class=\"function\">(<span class=\"params\">location, cb</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">require</span>.ensure([], <span class=\"built_in\">require</span> =&gt; &#123;</span><br><span class=\"line\">        cb(<span class=\"literal\">null</span>, <span class=\"built_in\">require</span>(<span class=\"string\">'../Component/chooseProducts'</span>).default)</span><br><span class=\"line\">    &#125;,<span class=\"string\">'chooseProducts'</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> helpCenter = <span class=\"function\">(<span class=\"params\">location, cb</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">require</span>.ensure([], <span class=\"built_in\">require</span> =&gt; &#123;</span><br><span class=\"line\">        cb(<span class=\"literal\">null</span>, <span class=\"built_in\">require</span>(<span class=\"string\">'../Component/helpCenter'</span>).default)</span><br><span class=\"line\">    &#125;,<span class=\"string\">'helpCenter'</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> saleRecord = <span class=\"function\">(<span class=\"params\">location, cb</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">require</span>.ensure([], <span class=\"built_in\">require</span> =&gt; &#123;</span><br><span class=\"line\">        cb(<span class=\"literal\">null</span>, <span class=\"built_in\">require</span>(<span class=\"string\">'../Component/saleRecord'</span>).default)</span><br><span class=\"line\">    &#125;,<span class=\"string\">'saleRecord'</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> RouteConfig = (</span><br><span class=\"line\">    &lt;Router history=&#123;history&#125;&gt;</span><br><span class=\"line\">        &lt;Route path=<span class=\"string\">\"/\"</span> component=&#123;Roots&#125;&gt;</span><br><span class=\"line\">            &lt;IndexRoute component=&#123;index&#125; /&gt;<span class=\"comment\">//首页</span></span><br><span class=\"line\">            &lt;Route path=<span class=\"string\">\"index\"</span> component=&#123;index&#125; /&gt;</span><br><span class=\"line\">            &lt;Route path=<span class=\"string\">\"helpCenter\"</span> getComponent=&#123;helpCenter&#125; /&gt;<span class=\"comment\">//帮助中心</span></span><br><span class=\"line\">            &lt;Route path=<span class=\"string\">\"saleRecord\"</span> getComponent=&#123;saleRecord&#125; /&gt;<span class=\"comment\">//销售记录</span></span><br><span class=\"line\">            &lt;Redirect <span class=\"keyword\">from</span>=<span class=\"string\">'*'</span> to=<span class=\"string\">'/'</span>  /&gt;</span><br><span class=\"line\">        &lt;<span class=\"regexp\">/Route&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>Router&gt;</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"组件之间的通信\"><a href=\"#组件之间的通信\" class=\"headerlink\" title=\"组件之间的通信\"></a>组件之间的通信</h2><p>react推崇的是单向数据流，自上而下进行数据的传递，但是由下而上或者不在一条数据流上的组件之间的通信就会变的复杂。解决通信问题的方法很多，如果只是父子级关系，父级可以将一个回调函数当作属性传递给子级，子级可以直接调用函数从而和父级通信。</p>\n<p>组件层级嵌套到比较深，可以使用上下文getChildContext来传递信息，这样在不需要将函数一层层往下传，任何一层的子级都可以通过this.context直接访问。</p>\n<p>兄弟关系的组件之间无法直接通信，它们只能利用同一层的上级作为中转站。而如果兄弟组件都是最高层的组件，为了能够让它们进行通信，必须在它们外层再套一层组件，这个外层的组件起着保存数据，传递信息的作用，这其实就是redux所做的事情。</p>\n<p>组件之间的信息还可以通过全局事件来传递。不同页面可以通过参数传递数据，下个页面可以用location.param来获取。其实react本身很简单，难的在于如何优雅高效的实现组件之间数据的交流。</p>\n<h1 id=\"redux\"><a href=\"#redux\" class=\"headerlink\" title=\"redux\"></a>redux</h1><h2 id=\"redux作用\"><a href=\"#redux作用\" class=\"headerlink\" title=\"redux作用\"></a>redux作用</h2><p>首先，redux并不是必须的，它的作用相当于在顶层组件之上又加了一个组件，作用是进行逻辑运算、储存数据和实现组件尤其是顶层组件的通信。如果组件之间的交流不多，逻辑不复杂，只是单纯的进行视图的渲染，这时候用回调，context就行，没必要用redux，用了反而影响开发速度。但是如果组件交流特别频繁，逻辑很复杂，那redux的优势就特别明显了。<br>   Redux 的react绑定库是基于 <strong>容器组件和展示组件相分离</strong> 的开发思想。</p>\n<h2 id=\"redux和react如何配合\"><a href=\"#redux和react如何配合\" class=\"headerlink\" title=\"redux和react如何配合\"></a>redux和react如何配合</h2><p>react-redux提供了connect和Provider两个好基友，它们一个将组件与redux关联起来，一个将store传给组件。组件通过dispatch发出action，store根据action的type属性调用对应的reducer并传入state和这个action，reducer对state进行处理并返回一个新的state放入store，connect监听到store发生变化，调用setState更新组件，此时组件的props也就跟着变化。<br>流程如下：<br><img src=\"https://segmentfault.com/img/remote/1460000007642746?w=638&h=479\" alt=\"\"><br>connect，Provider，mapStateToProps,mapDispatchToProps是react-redux提供的，redux本身和react没有半毛钱关系，它只是数据处理中心，没有和react产生任何耦合，是react-redux让它们联系在一起<br><img src=\"https://segmentfault.com/img/remote/1460000007642747?w=1286&h=1246\" alt=\"\"><br>redux 主要由三部分组成：store，reducer，action</p>\n<h3 id=\"store\"><a href=\"#store\" class=\"headerlink\" title=\"store\"></a>store</h3><p>store是一个对象，有四个主要方法：</p>\n<ol>\n<li><p>dispatch：</p>\n<blockquote>\n<p>用于action的分发——在createStore中可以用middleware中间件对dispatch进行改造，比如当action传入dispatch会立即触发reducer，有些时候我们不希望它立即触发，而是等待异步操作完成之后再触发，这时候用redux-thunk对dispatch进行改造，以前只能传入一个对象，改造完成后可以传入一个函数，在这个函数里我们手动dispatch一个action对象，这个过程是可控的，就实现了异步。</p>\n</blockquote>\n</li>\n<li><p>subscribe：</p>\n<blockquote>\n<p>监听state的变化——这个函数在store调用dispatch时会注册一个listener监听state变化，当我们需要知道state是否变化时可以调用，它返回一个函数，调用这个返回的函数可以注销监听</p>\n</blockquote>\n</li>\n<li><p>getState：</p>\n<blockquote>\n<p>获取store中的state——当我们用action触发reducer改变了state时，需要再拿到新的state里的数据，毕竟数据才是我们想要的。getState主要在两个地方需要用到，一是在dispatch拿到action后store需要用它来获取state里的数据，并把这个数据传给reducer，这个过程是自动执行的，二是在我们利用subscribe监听到state发生变化后调用它来获取新的state数据，如果做到这一步，说明我们已经成功了</p>\n</blockquote>\n</li>\n<li><p>replaceReducer：</p>\n<blockquote>\n<p>替换reducer，改变state修改的逻辑</p>\n</blockquote>\n</li>\n</ol>\n<h3 id=\"action\"><a href=\"#action\" class=\"headerlink\" title=\"action\"></a>action</h3><p>action是一个对象，其中type属性是必须的，同时可以传入一些数据。action可以用actionCreator进行创造。dispatch就是把action对象发送出去。</p>\n<h3 id=\"reducer\"><a href=\"#reducer\" class=\"headerlink\" title=\"reducer\"></a>reducer</h3><p>官网上是这么定义的</p>\n<blockquote>\n<p><strong>Actions</strong> describe the fact that something happened, but don’t specify how the application’s state changes in response. This is the job of reducers.</p>\n</blockquote>\n<p>reducer是一个函数，它接受一个state和一个action，根据action的type返回一个新的state。根据业务逻辑可以分为很多个reducer，然后通过combineReducers将它们合并，state树中有很多对象，每个state对象对应一个reducer，state对象的名字可以在合并时定义。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const reducer &#x3D;combineReducers(&#123;</span><br><span class=\"line\"> a:doSometingWithA,</span><br><span class=\"line\"> b:processB,</span><br><span class=\"line\"> c:c</span><br><span class=\"line\"> &#125;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"comebineReducers\"><a href=\"#comebineReducers\" class=\"headerlink\" title=\"comebineReducers\"></a>comebineReducers</h3><p>其实它也是一个reducer，它接受整个state和一个action，然后将整个state拆分发送给对应的reducer进行处理，所有的reducer会收到相同的action，不过它们会根据action的type进行判断，有这个type就进行处理然后返回新的state，没有就返回默认值，然后这些分散的state又会整合在一起返回一个新的state树。</p>\n<h3 id=\"整体流程\"><a href=\"#整体流程\" class=\"headerlink\" title=\"整体流程\"></a>整体流程</h3><p>首先调用store.dispatch将action作为参数传入，同时用调用getState获取当前的状态树state并注册subscribe的listener监听state变化，再调用combineReducers并将获取的state和action传入。combineReducers会将传入的state和action传给所有reducer，reducer会根据state的key值获取与自己对应的state，并根据action的type返回新的state，触发state树的更新，我们调用subscribe监听到state发生变化后用getState获取新的state数据。<br><strong>redux的state和react的state两者完全没有关系，除了名字一样。</strong></p>\n<h2 id=\"React-Redux\"><a href=\"#React-Redux\" class=\"headerlink\" title=\"React-Redux\"></a>React-Redux</h2><p>若只使用redux，流程是这样：</p>\n<blockquote>\n<p>component –&gt; dispatch(action) –&gt; reducer –&gt; subscribe –&gt; getState –&gt; component</p>\n</blockquote>\n<p>使用react-redux之后，流程：</p>\n<blockquote>\n<p>component –&gt; actionCreator(data) –&gt; reducer –&gt; component</p>\n</blockquote>\n<p>store的三大功能：dispatch，subscribe，getState都不需要手动来写了。react-redux帮我们做了这些，同时它提供了两个好基友Provider和connect。<br><strong>Provider</strong>是一个组件，它接受store作为props，然后通过context往下传，这样react中任何组件都可以通过contex获取store。也就意味着我们可以在任何一个组件里利用dispatch(action)来触发reducer改变state，并用subscribe监听state的变化，然后用getState获取变化后的值。但是并不推荐这样做，它会让数据流变的混乱，过度的耦合也会影响组件的复用，维护起来也更麻烦。<br><strong>Connect</strong> –connect(mapStateToProps, mapDispatchToProps, mergeProps, options)是一个函数，它接受四个参数并且再返回一个函数–wrapWithConnect，wrapWithConnect接受一个组件作为参数wrapWithConnect(component)，它内部定义一个新组件Connect(容器组件)并将传入的组件(ui组件)作为Connect的子组件然后return出去。</p>\n<p><strong>mapStateToProps(state, [ownProps])：</strong></p>\n<blockquote>\n<p>mapStateToProps 接受两个参数，store的state和自定义的props，并返回一个新的对象，这个对象会作为props的一部分传入ui组件。我们可以根据组件所需要的数据自定义返回一个对象。ownProps的变化也会触发mapStateToProps</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mapStateToProps</span>(<span class=\"params\">state</span>)</span>&#123;</span><br><span class=\"line\"> <span class=\"keyword\">return</span> &#123;<span class=\"attr\">todos</span>:state.todos&#125;;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>mapDispatchToProps(dispatch,[ownProps]):</strong></p>\n<blockquote>\n<p>mapDispatchToProps如果是对象，那么会和store绑定作为props的一部分传入ui组件。如果是个函数，它接受两个参数，bindActionCreators会将action和dispatch绑定并返回一个对象，这个对象会和ownProps一起作为props的一部分传入ui组件。所以不论mapDispatchToProps是对象还是函数，它最终都会返回一个对象，如果是函数，这个对象的key值是可以自定义的.</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mapDispatchToProps</span>(<span class=\"params\">dispatch</span>) </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      todoActions: bindActionCreators(todoActionCreators, dispatch),</span><br><span class=\"line\">      counterActions: bindActionCreators(counterActionCreators, dispatch)</span><br><span class=\"line\">   &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>mapDispatchToProps返回的对象其属性其实就是一个个actionCreator，因为已经和dispatch绑定，所以当调用actionCreator时会立即发送action，而不用手动dispatch。ownProps的变化也会触发mapDispatchToProps.</p>\n<p><strong>mergeProps(stateProps,dispatchProps,ownProps):</strong></p>\n<blockquote>\n<p>将mapStateToProps() 与 mapDispatchToProps()返回的对象和组件自身的props合并成新的props并传入组件。默认返回 Object.assign({}, ownProps, stateProps, dispatchProps) 的结果。</p>\n</blockquote>\n<p><strong>options:</strong></p>\n<blockquote>\n<p>pure = true 表示Connect容器组件将在shouldComponentUpdate中对store的state和ownProps进行浅对比，判断是否发生变化，优化性能。为false则不对比。</p>\n</blockquote>\n<h2 id=\"完整的react-redux-react流程\"><a href=\"#完整的react-redux-react流程\" class=\"headerlink\" title=\"完整的react-redux-react流程\"></a>完整的react-redux-react流程</h2><p>一、Provider组件接受redux的store作为props，然后通过context往下传。</p>\n<p>二、connect函数在初始化的时候会将mapDispatchToProps对象绑定到store，如果mapDispatchToProps是函数则在Connect组件获得store后，根据传入的store.dispatch和action通过bindActionCreators进行绑定，再将返回的对象绑定到store，connect函数会返回一个wrapWithConnect函数，同时wrapWithConnect会被调用且传入一个ui组件，wrapWithConnect内部使用class Connect extends Component定义了一个Connect组件，传入的ui组件就是Connect的子组件，然后Connect组件会通过context获得store，并通过store.getState获得完整的state对象，将state传入mapStateToProps返回stateProps对象、mapDispatchToProps对象或mapDispatchToProps函数会返回一个dispatchProps对象，stateProps、dispatchProps以及Connect组件的props三者通过Object.assign()，或者mergeProps合并为props传入ui组件。然后在ComponentDidMount中调用store.subscribe，注册了一个回调函数handleChange监听state的变化。</p>\n<p>三、此时ui组件就可以在props中找到actionCreator，当我们调用actionCreator时会自动调用dispatch，在dispatch中会调用getState获取整个state，同时注册一个listener监听state的变化，store将获得的state和action传给combineReducers，combineReducers会将state依据state的key值分别传给子reducer，并将action传给全部子reducer，reducer会被依次执行进行action.type的判断，如果有则返回一个新的state，如果没有则返回默认。combineReducers再次将子reducer返回的单个state进行合并成一个新的完整的state。此时state发生了变化。Connect组件中调用的subscribe会监听到state发生了变化，然后调用handleChange函数，handleChange函数内部首先调用getState获取新的state值并对新旧两个state进行浅对比，如果相同直接return，如果不同则调用mapStateToProps获取stateProps并将新旧两个stateProps进行浅对比，如果相同，直接return结束，不进行后续操作。如果不相同则调用this.setState()触发Connect组件的更新，传入ui组件，触发ui组件的更新，此时ui组件获得新的props，react –&gt; redux –&gt; react 的一次流程结束。</p>\n<h2 id=\"简化版流程\"><a href=\"#简化版流程\" class=\"headerlink\" title=\"简化版流程\"></a>简化版流程</h2><p>一、Provider组件接受redux的store作为props，然后通过context往下传。</p>\n<p>二、connect函数收到Provider传出的store，然后接受三个参数mapStateToProps，mapDispatchToProps和组件，并将state和actionCreator以props传入组件，这时组件就可以调用actionCreator函数来触发reducer函数返回新的state，connect监听到state变化调用setState更新组件并将新的state传入组件。</p>\n<p>connect可以写的非常简洁，mapStateToProps，mapDispatchToProps只不过是传入的回调函数，connect函数在必要的时候会调用它们，名字不是固定的，甚至可以不写名字。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">connect(<span class=\"function\"><span class=\"params\">state</span> =&gt;</span> state,action)(Component);</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"项目搭建\"><a href=\"#项目搭建\" class=\"headerlink\" title=\"项目搭建\"></a>项目搭建</h1><ol>\n<li>先引用react.js,redux,react-router等基本文件，用npm安装，直接在文件中引用。</li>\n<li>从react.js,redux,react-router 中引入所需要的对象和方法。</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React, &#123;Component, PropTypes&#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> ReactDOM, &#123;render&#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-dom'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;Provider, connect&#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-redux'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;createStore, combineReducers, applyMiddleware&#125; <span class=\"keyword\">from</span> <span class=\"string\">'redux'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Router, Route, Redirect, IndexRoute, browserHistory, hashHistory &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-router'</span>;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>根据需求创建顶层ui组件，每个顶层ui组件对应一个页面。</li>\n<li>创建actionCreators和reducers，并用combineReducers将所有的reducer合并成一个大的reduer。利用createStore创建store并引入combineReducers和applyMiddleware。</li>\n<li>利用connect将actionCreator，reuder和顶层的ui组件进行关联并返回一个新的组件。</li>\n<li>利用connect返回的新的组件配合react-router进行路由的部署，返回一个路由组件Router。</li>\n<li>将Router放入最顶层组件Provider，引入store作为Provider的属性。</li>\n<li>调用render渲染Provider组件且放入页面的标签中。<br>可以看到顶层的ui组件其实被套了四层组件，Provider，Router，Route，Connect，这四个组件并不会在视图上改变react，它们只是功能性的。</li>\n</ol>\n"},{"title":"JS设计模式","date":"2017-04-20T16:00:00.000Z","_content":"\n\n# JS设计模式\n\n## 什么是模式\n\n模式是一种可复用的解决方案\n\n### 优点\n1. 已验证的解决方案\n2. 模式容易被复用\n3. 模式富有表达力\n\n## 模式状态测试、Proto模式及三法则\n\n成为有效模式\n适合性、实用性、适用性。\n\n## 设计模式的结构\n\n一种模式最初是以一种规则的形式呈现的，该规则建立下面这样的关系\n* 上下文\n* 上下文里产生的元件系统\n* 解决元件在上下文中自身问题的配置\n\n## 设计模式类别\n\n1. 创建型设计模式\n专注于处理对象创建机制，以适合给定情况的方式来创建对象。\n包括：Constructor(构造器)、Factory(工厂)、Abstract(抽象)、Prototype(原型)、Singleton(单例)和Builder(生成器)\n2. 结构型设计模式\n结构型设计模式与对象组合有关，通常可以用于找出在不同对象之间建立关系的简单方法。\n这种模式有助于确保系统某一部分发生变化时，系统整个结构不需要同时改变。\n包括：Decorator(装饰者)、Facade(外观)、Flyweight(享元)、Adapter(适配器)、Proxy(代理)\n3. 行为设计模式\n专注于改善或简化系统中不同对象之间的通信\n包括：Iterator(迭代器)、Mediator(中介者)、Observer(观察者)、Visitor(访问者)\n\n## js设计模式\n\n### Constructor模式\n\n#### 对象创建\n\n1. ’.‘语法\n2. 中括号语法\n3. Object.defineProperty\n\n#### 基本Constructor\n\n#### 带原型的Constructor\n\nsuch as :\nCar.prototype.functionName = function(){}\n\n### Module模式\n\njs中有几种用于实现模块的方法：\n* 对象字面量表示法\n* Module模式\n* AMD模块\n* CommonJS\n* ECMAScript Harmony 模块\n\n#### 对象字面量\n\n#### Module模式\n\n##### 私有\n\nModule模式使用闭包封装’私有‘状态和组织。提供了一种包装混合公有/私有方法和变量的方式，防止其泄露至全局作用域。\n在Module模式内，由于闭包的存在，声明的变量和方法只在该模式内部可用。但在返回对象上定义的变量和方法，则对外部使用者都是可用的。\n**Module模式模板**\n\n```javascript\nvar myNamespace =(function(){\n    //私有计数器变量\n    var myPrivateVar = 0;\n    var myPrivateMethod = function(foo){\n        console.log(foo);\n    };\n    return {\n        myPublicVar :'foo',\n        myPublicFunction:function(bar){\n            myPrivateVar++;\n            myPrivateMethod(bar);\n        }\n    };\n})();\n```\n\n### Module模块变化\n\n#### 引入混入\n\n全局变量可以作为参数传递给模块的匿名函数\n\n#### 引出\n\n#### 优点\n\n#### 缺点\n\n访问公有和私有成员的方式不同，想改变可见性时必须要修改每一个用过该成员的地方。\n\n###Singleton单例模式\n\n限制了类的实例化次数只能一次\n在该实例不存在的情况下，可以通过一个方法创建一个类来实现创建类的新实例；如果实例已经存在，它会简单返回该对象该对象的引用。\n在js中，Singleton充当共享资源命名空间，从全局命名空间中隔离出代码实现，从而为函数提供单一访问点。\n\n\n```javascript\nvar mySingleton =(function(){\n    //实例保持了singleton的一个引用\n    var instance;\n    function init(){\n        function privateMethod(){\n            console.log('I am private');\n        }\n        var privateVar = 'I am also private';\n        return {\n            publicMethod:function(){\n                console.log(\"the public can see me\");\n            },\n            publicProperty:\"I am also public\"\n        };\n    };\n    return{\n        getInstance:function(){\n            if(!instance){\n                instance = init();\n            }\n            return instance;\n        }\n    };\n})();\n```\nSingleton模式适用性的描述如下：\n* 当类只能有一个实例而且客户可以从一个众所周知的访问点访问\n* 该类的唯一实例应该是通过子类化可扩展的，并且客户应该无需更改代码就能使用一个扩展的实例时。\n\n### Observer观察者模式\n>一个或多个观察者对目标的状态感兴趣，它们通过将自己依附在目标对象上以便注册所感兴趣的内容。目标状态发生改变并且观察者可能对这些改变感兴趣，就会发送一个通知消息，调用每个观察者的更新方法。当观察者不再对目标状态感兴趣，他们可以简单地将自己从中分离。\n\n#### Observer模式和Publish/Subscribe模式的区别\n\n#### Observer优点\n\n是用于设计**解耦**性系统的最佳工具之一\n\n#### Publish/Subscribe实现\n\nECMAScript实现是由事件驱动的\n\n#### Publish/Subscribe实现\n\n####（例子1）用户界面通知\n一个负责显示实时股票信息的Web应用程序\n一个显示股票统计的网格和一个显示最后更新点计数器，当数据模型改变时，应用程序需要更新网格和计数器。\n**目标**：数据模型\n**观察者**：网格和计数器\n\n``` javascript\ndiv.onclick = function click(){\n    alert('click');\n}\n```\n只要订阅了div的click事件，当点击div的时候，function click就会被触发。\n\n### Mediator(中介者)模式\n行为设计模式\n通过一个中介者来连接两个对象的模式,封装对象之间的交互\n\n![](/Users/dongruining/Downloads/mediator.png)\nMVC模式中的Controller起到了中介者的作用，\n\n\n``` javascript\n var Participant = function(name) {\n     this.name = name;\n     this.chatroom = null;\n };\n Participant.prototype = {\n     send: function(message, to) {\n         this.chatroom.send(message, this, to);\n     },\n     receive: function(message, from) {\n         log.add(from.name + \" to \" + this.name + \": \" + message);\n     }\n };\n var Chatroom = function() {\n     var participants = {};\n     return {\n         register: function(participant) {\n             participants[participant.name] = participant;\n             participant.chatroom = this;\n         },\n         send: function(message, from, to) {\n             if (to) {                   \n                 to.receive(message, from);    \n             } else {                     \n                 for (key in participants) {   \n                     if (participants[key] !== from) {\n                         participants[key].receive(message, from);\n                     }\n                 }\n             }\n         }\n     };\n };\n var log = (function() {\n     var log = \"\";\n     return {\n         add: function(msg) { log += msg + \"\\n\"; },\n         show: function() { alert(log); log = \"\"; }\n     }\n })();\n function run() {\n     var yoko = new Participant(\"Yoko\");\n     var john = new Participant(\"John\");\n     var paul = new Participant(\"Paul\");\n     var ringo = new Participant(\"Ringo\");\n     var chatroom = new Chatroom();\n     chatroom.register(yoko);\n     chatroom.register(john);\n     chatroom.register(paul);\n     chatroom.register(ringo);\n     yoko.send(\"All you need is love.\");\n     yoko.send(\"I love you John.\");\n     john.send(\"Hey, no need to broadcast\", yoko);\n     paul.send(\"Ha, I heard that!\");\n     ringo.send(\"Paul, what do you think?\", paul);\n     log.show();\n }\n```\n\n聊天室起到了中介者的作用。\n\n### Prototype（原型）模式\n\n### Command（命令）模式\n此模式旨在将方法调用、请求或操作封装到单一对象中，从而根据我们不同的请求对客户进行参数化和传递可供执行的方法调用。\n将调用操作的对象与知道如何实现该操作的对象解耦，并在交换出具体类方面提供更大的整体灵活性。\n\n### Facade（外观）模式\n外观模式提供一个高层接口，这个接口使得客户端或子系统更加方便调用。\n可以对用户隐藏真正的细节，用户只关心最高层的接口。\n例如：\n\n``` javascript\nvar stopEvent = function(e){\n    e.stopPropagation();\n    e.preventDefault();\n}\n```\n### Factory工厂模式\n创建型模式，不显式地要求使用一个构造函数。简单工厂模式是由一个方法来决定到底要创建哪个类的实例，而这些实例经常都拥有相同的接口，这种模式主要用在所实例化的类型在编译期并不能确定，而是在执行期决定的情况。\n\n``` javascript\nfunction createObject(name,age,profession){//集中实例化的函数\n        var obj = new Object();\n        obj.name = name;\n        obj.age = age;\n        obj.profession = profession;\n        obj.move = function () {\n            return this.name + ' at ' + this.age + ' engaged in ' + this.profession;\n        };\n        return obj;\n    }\n    var test1 = createObject('trigkit4',22,'programmer');//第一个实例\n    var test2 = createObject('mike',25,'engineer');//第二个实例\n```\n\n工厂模式分为 简单工厂、抽象工厂、智能工厂\nFactory模式主要在以下场景使用：\n* 当对象或组件设计高复杂性时\n* 当需要根据所在的不同环境轻松生成对象的不同实例时\n* 当处理很多共享相同属性的小型对象或组件时\n\n### 装饰者模式\n装饰者模式用于**运行时动态为对象附加功能**。\n主要解决的问题是：将对象与可扩充的简单基本单元分离出来，按需增强该对象。\n通过两种方式：\n继承\n装饰列表\n### Flyweight(享元)模式\n结构型解决方案，用于优化重复、缓慢及数据共享效率低的代码。旨在通过与相关的对象共享尽可能多的数据来减少应用程序中内存的使用。\n两种方式：\n第一种用于数据层，处理内存中保存的大量数据\n第二种用于DOM层，Flyweight可以用作中央事件管理器，避免将事件处理程序附加到父节点的每个子节点上。\n例如：图书馆书籍管理\n\n``` javascript\n//书籍内部状态\nvar Book = function(title,author,pageCount,publisherID,ISBN){\n    this.title =title;\n    this.author=author;\n    this.pageCount = pageCount;\n    this.publisherID = publisherID;\n    this.ISBN=ISBN;\n};\n//基本工厂\nvar BookFactory = (function(){\n    var existingBooks={},existingBook;\n    return {\n        createBook:function(title,author,pageCount,publisherID,ISBN){\n            existingBook = existingBooks[ISBN];\n            if(!!existingBook){\n                return existingBook;\n            }else{\n                var book = new Book(title,author,pageCount,publisherID,IISBN);\n                existingBooks[ISBN] = book;\n                return book;\n            }\n        }\n    };\n});\n//管理外部状态\n//书籍记录管理器单例\nvar BookRecordManager = (function(){\n    var bookRecordDatabase ={};\n    return {\n        //添加新书到图书馆系统\n        addBookRecord :function(id,title,author,pageCount,publisherID,ISBN,checkoutDate,checkoutMember,dueReturnDate,availability){\n            var book = BookFactory.createBook(title,author,pageCount,publisherID,ISBN);\n            bookRecordDatabase[id] ={\n                checkoutMember:checkoutMember,\n                checkoutDate:checkoutDate,\n                dueReturnDate:dueReturnDate,\n                availability:availability,\n                book:book\n            };\n        },\n        updateCheckoutStatus :function(bookID,newStatus,checkoutDate,checkoutMember,newReturnDate){\n            var record = bookRecordDatabase[bookID];\n            record.availability = newStatus;\n            record.checkoutDate = checkoutDate;\n            record.checkoutMember = checkoutMember;\n            record.dueReturnDate = newReturnDate;\n        },\n        extendCheckoutPeriod :function(bookID,newReturnDate){\n            bookRecordDatabase[bookID].dueReturnDate = newReturnDate;\n        },\n        isPastDue:function(bookID){\n            var currentDate = new Date();\n            return currentDate.getTime() > Date.parse(bookRecordDatabase[bookID].dueReturnDate)\n        }\n    };\n});\n\n```\n\njQuery中，用户将初始化点击绑定到一个容器div的同时，使用了一个stateManager命名空间来封装我们的享元逻辑。\n\nHTML\n\n``` html\n<div id=\"container\">\n    <div class=\"toggle\" href=\"#\">\n        More Info (Address)\n        <span class=\"info\">\n            This is more information\n        </span>\n    </div>\n    <div class=\"toggle\" href=\"#\">\n        Even More Info (Map)\n        <span class=\"info\">\n            <iframe src=\"http://www.baidu.com\"></iframe>\n        </span>\n    </div>\n</div>\n```\nJS\n\n``` javascript\nvar stateManager ={\n    fly: function(){\n        var self = this;\n        $(\"#container\").unbind().on(\"click\",function(e){\n            var target = $(e.originalTarget || e.srcElement);\n            if(target.is(\"div.toggle\")){\n                self.handleClick(target);\n            }\n        });\n    },\n    handleClick:function(elem){\n        elem.find(\"span\").toggle(\"slow\");\n    }\n};\n\n```\n\n### MV*模式\n\n#### MVC模式\nView（视图）是应用程序数据的可视化表示\n#### MVP模式\n模型-视图-表示器\nModel-View-Presenter\n由View进行请求，表示器执行任何与用户请求有关的工作，并将数据回传给它们。\n#### MVVM模式\n模型-视图-视图模型\n视图是主动视图，有数据绑定\n**Model**:应用程序将会使用的特定领域数据信息\n**View**:与用户进行交互的应用程序的一部分\n**ViewModel**:一个专门的Controller，充当数据转换器。\n将Model信息转变为View信息，将命令从View传递到Model。\n是一个用于保存用户正在使用且尚未保存数据的层\nView 和 ViewModel之间通过数据绑定和事件进行通信。\nModel和ViewModel上的属性通过双向数据绑定进行同步和更新。\n\n### jquery中的设计模式\n\n\n### Composite组合模式\n部分整体模式,将所有对象组合成*树形结构*，使用户只需要操作最上层接口，就可以对所有成员做相同操作。\n### Adapter适配器模式\n*Adapter模式*将对象或类的接口interface，转变为与特定的系统兼容的接口。\n适配器模式经常用来适配两个接口，比如调用的js库中有一个根据id获取节点的方法$id(),但是jquery里的$()也可以根据id获取节点，可以用一个适配器来修改：\n``` javascript\n$id = function(id){\n    return jQuery(\"#\"+id)[0];\n```\n### Facade外观模式\n提供一个高层接口，使得客户端或子系统更加方便调用。\n\n\n``` javascript\n//非外观\nvar getName =function(){\n    return 'hahah';\n}\nvar getAge = function(){\n    return 22;\n}\n//外观模式\nvar getInfo = function(){\n var info = getName() + getAge();\n return info;\n }\n```\n\n### Iterator迭代器模式\neach()函数就是迭代器模式\n\n```javascript\neach:function(callback,args){\n    return jQuery.each(this,callback,args);\n}\n```\n### proxy代理模式\n代理模式就是把一个对象的访问，交给另一个代理对象来操作。\n\n### 策略模式\n定义一系列算法，把它们封装起来，并使他们可以相互替换。\n\n``` javascript\n$(div).animate({\"left:200px\"},1000,'linear');  //匀速运动\n$(div).animate({\"left:200px\"},1000,'cubic');   //三次方缓动 \n```\n\n``` javascript\nnameInput.addValidata({\n    notNull:true;\n    drityWords:true;\n    maxLength:30;\n})\nvalidataList ={\n    notNull:function(value){\n        return value !=='';\n    },\n    maxLength:function(value){\n        return value.length() >maxLen;\n    }\n}\n \n```\n### 备忘录模式\n备忘录模式常用于数据缓存\n\n``` javascript\nvar Page = function(){\n   var page = 1,\n      cache = {},\n      data;\n   return function( page ){\n      if ( cache[ page ] ){\n               data =  cache[ page ];\n               render( data );\n      }else{\n               Ajax.send( 'cgi.xx.com/xxx', function( data ){\n                   cache[ page ] = data;\n                   render( data );\n               })\n      }\n    }\n}()\n```\n\n### 职责链模式\n职责链模式是一个对象A向另一个对象B发起请求，如果B不处理，可以把请求转给C，如果C不处理，又可以把请求转给D。一直到有一个对象愿意处理这个请求为止。\n打个比方，客户让老板写个php程序。老板肯定不写，然后老板交给了部门经理。部门经理不愿意写，又交给项目经理。项目经理不会写，又交给程序员。最后由码农来完成。\n\n在这个假设里， 有几条职责链模式的特点。\n1 老板只跟部门经理打交道，部门经理只联系项目经理，项目经理只找码农的麻烦。\n2 如果码农也不写，这个项目将会流产。\n3 客户并不清楚这个程序最后是由谁写出来的。\njs中的事件冒泡就是作为一个职责链来实现的。一个事件在某个节点上被触发，然后向根节点传递， 直到被节点捕获。\n\n\n","source":"_posts/2017-04-21-JS设计模式.md","raw":"---\ntitle: JS设计模式\ndate: 2017-04-21\ncategories: \n- FE\n- design pattern\ntags:\n- FE\n---\n\n\n# JS设计模式\n\n## 什么是模式\n\n模式是一种可复用的解决方案\n\n### 优点\n1. 已验证的解决方案\n2. 模式容易被复用\n3. 模式富有表达力\n\n## 模式状态测试、Proto模式及三法则\n\n成为有效模式\n适合性、实用性、适用性。\n\n## 设计模式的结构\n\n一种模式最初是以一种规则的形式呈现的，该规则建立下面这样的关系\n* 上下文\n* 上下文里产生的元件系统\n* 解决元件在上下文中自身问题的配置\n\n## 设计模式类别\n\n1. 创建型设计模式\n专注于处理对象创建机制，以适合给定情况的方式来创建对象。\n包括：Constructor(构造器)、Factory(工厂)、Abstract(抽象)、Prototype(原型)、Singleton(单例)和Builder(生成器)\n2. 结构型设计模式\n结构型设计模式与对象组合有关，通常可以用于找出在不同对象之间建立关系的简单方法。\n这种模式有助于确保系统某一部分发生变化时，系统整个结构不需要同时改变。\n包括：Decorator(装饰者)、Facade(外观)、Flyweight(享元)、Adapter(适配器)、Proxy(代理)\n3. 行为设计模式\n专注于改善或简化系统中不同对象之间的通信\n包括：Iterator(迭代器)、Mediator(中介者)、Observer(观察者)、Visitor(访问者)\n\n## js设计模式\n\n### Constructor模式\n\n#### 对象创建\n\n1. ’.‘语法\n2. 中括号语法\n3. Object.defineProperty\n\n#### 基本Constructor\n\n#### 带原型的Constructor\n\nsuch as :\nCar.prototype.functionName = function(){}\n\n### Module模式\n\njs中有几种用于实现模块的方法：\n* 对象字面量表示法\n* Module模式\n* AMD模块\n* CommonJS\n* ECMAScript Harmony 模块\n\n#### 对象字面量\n\n#### Module模式\n\n##### 私有\n\nModule模式使用闭包封装’私有‘状态和组织。提供了一种包装混合公有/私有方法和变量的方式，防止其泄露至全局作用域。\n在Module模式内，由于闭包的存在，声明的变量和方法只在该模式内部可用。但在返回对象上定义的变量和方法，则对外部使用者都是可用的。\n**Module模式模板**\n\n```javascript\nvar myNamespace =(function(){\n    //私有计数器变量\n    var myPrivateVar = 0;\n    var myPrivateMethod = function(foo){\n        console.log(foo);\n    };\n    return {\n        myPublicVar :'foo',\n        myPublicFunction:function(bar){\n            myPrivateVar++;\n            myPrivateMethod(bar);\n        }\n    };\n})();\n```\n\n### Module模块变化\n\n#### 引入混入\n\n全局变量可以作为参数传递给模块的匿名函数\n\n#### 引出\n\n#### 优点\n\n#### 缺点\n\n访问公有和私有成员的方式不同，想改变可见性时必须要修改每一个用过该成员的地方。\n\n###Singleton单例模式\n\n限制了类的实例化次数只能一次\n在该实例不存在的情况下，可以通过一个方法创建一个类来实现创建类的新实例；如果实例已经存在，它会简单返回该对象该对象的引用。\n在js中，Singleton充当共享资源命名空间，从全局命名空间中隔离出代码实现，从而为函数提供单一访问点。\n\n\n```javascript\nvar mySingleton =(function(){\n    //实例保持了singleton的一个引用\n    var instance;\n    function init(){\n        function privateMethod(){\n            console.log('I am private');\n        }\n        var privateVar = 'I am also private';\n        return {\n            publicMethod:function(){\n                console.log(\"the public can see me\");\n            },\n            publicProperty:\"I am also public\"\n        };\n    };\n    return{\n        getInstance:function(){\n            if(!instance){\n                instance = init();\n            }\n            return instance;\n        }\n    };\n})();\n```\nSingleton模式适用性的描述如下：\n* 当类只能有一个实例而且客户可以从一个众所周知的访问点访问\n* 该类的唯一实例应该是通过子类化可扩展的，并且客户应该无需更改代码就能使用一个扩展的实例时。\n\n### Observer观察者模式\n>一个或多个观察者对目标的状态感兴趣，它们通过将自己依附在目标对象上以便注册所感兴趣的内容。目标状态发生改变并且观察者可能对这些改变感兴趣，就会发送一个通知消息，调用每个观察者的更新方法。当观察者不再对目标状态感兴趣，他们可以简单地将自己从中分离。\n\n#### Observer模式和Publish/Subscribe模式的区别\n\n#### Observer优点\n\n是用于设计**解耦**性系统的最佳工具之一\n\n#### Publish/Subscribe实现\n\nECMAScript实现是由事件驱动的\n\n#### Publish/Subscribe实现\n\n####（例子1）用户界面通知\n一个负责显示实时股票信息的Web应用程序\n一个显示股票统计的网格和一个显示最后更新点计数器，当数据模型改变时，应用程序需要更新网格和计数器。\n**目标**：数据模型\n**观察者**：网格和计数器\n\n``` javascript\ndiv.onclick = function click(){\n    alert('click');\n}\n```\n只要订阅了div的click事件，当点击div的时候，function click就会被触发。\n\n### Mediator(中介者)模式\n行为设计模式\n通过一个中介者来连接两个对象的模式,封装对象之间的交互\n\n![](/Users/dongruining/Downloads/mediator.png)\nMVC模式中的Controller起到了中介者的作用，\n\n\n``` javascript\n var Participant = function(name) {\n     this.name = name;\n     this.chatroom = null;\n };\n Participant.prototype = {\n     send: function(message, to) {\n         this.chatroom.send(message, this, to);\n     },\n     receive: function(message, from) {\n         log.add(from.name + \" to \" + this.name + \": \" + message);\n     }\n };\n var Chatroom = function() {\n     var participants = {};\n     return {\n         register: function(participant) {\n             participants[participant.name] = participant;\n             participant.chatroom = this;\n         },\n         send: function(message, from, to) {\n             if (to) {                   \n                 to.receive(message, from);    \n             } else {                     \n                 for (key in participants) {   \n                     if (participants[key] !== from) {\n                         participants[key].receive(message, from);\n                     }\n                 }\n             }\n         }\n     };\n };\n var log = (function() {\n     var log = \"\";\n     return {\n         add: function(msg) { log += msg + \"\\n\"; },\n         show: function() { alert(log); log = \"\"; }\n     }\n })();\n function run() {\n     var yoko = new Participant(\"Yoko\");\n     var john = new Participant(\"John\");\n     var paul = new Participant(\"Paul\");\n     var ringo = new Participant(\"Ringo\");\n     var chatroom = new Chatroom();\n     chatroom.register(yoko);\n     chatroom.register(john);\n     chatroom.register(paul);\n     chatroom.register(ringo);\n     yoko.send(\"All you need is love.\");\n     yoko.send(\"I love you John.\");\n     john.send(\"Hey, no need to broadcast\", yoko);\n     paul.send(\"Ha, I heard that!\");\n     ringo.send(\"Paul, what do you think?\", paul);\n     log.show();\n }\n```\n\n聊天室起到了中介者的作用。\n\n### Prototype（原型）模式\n\n### Command（命令）模式\n此模式旨在将方法调用、请求或操作封装到单一对象中，从而根据我们不同的请求对客户进行参数化和传递可供执行的方法调用。\n将调用操作的对象与知道如何实现该操作的对象解耦，并在交换出具体类方面提供更大的整体灵活性。\n\n### Facade（外观）模式\n外观模式提供一个高层接口，这个接口使得客户端或子系统更加方便调用。\n可以对用户隐藏真正的细节，用户只关心最高层的接口。\n例如：\n\n``` javascript\nvar stopEvent = function(e){\n    e.stopPropagation();\n    e.preventDefault();\n}\n```\n### Factory工厂模式\n创建型模式，不显式地要求使用一个构造函数。简单工厂模式是由一个方法来决定到底要创建哪个类的实例，而这些实例经常都拥有相同的接口，这种模式主要用在所实例化的类型在编译期并不能确定，而是在执行期决定的情况。\n\n``` javascript\nfunction createObject(name,age,profession){//集中实例化的函数\n        var obj = new Object();\n        obj.name = name;\n        obj.age = age;\n        obj.profession = profession;\n        obj.move = function () {\n            return this.name + ' at ' + this.age + ' engaged in ' + this.profession;\n        };\n        return obj;\n    }\n    var test1 = createObject('trigkit4',22,'programmer');//第一个实例\n    var test2 = createObject('mike',25,'engineer');//第二个实例\n```\n\n工厂模式分为 简单工厂、抽象工厂、智能工厂\nFactory模式主要在以下场景使用：\n* 当对象或组件设计高复杂性时\n* 当需要根据所在的不同环境轻松生成对象的不同实例时\n* 当处理很多共享相同属性的小型对象或组件时\n\n### 装饰者模式\n装饰者模式用于**运行时动态为对象附加功能**。\n主要解决的问题是：将对象与可扩充的简单基本单元分离出来，按需增强该对象。\n通过两种方式：\n继承\n装饰列表\n### Flyweight(享元)模式\n结构型解决方案，用于优化重复、缓慢及数据共享效率低的代码。旨在通过与相关的对象共享尽可能多的数据来减少应用程序中内存的使用。\n两种方式：\n第一种用于数据层，处理内存中保存的大量数据\n第二种用于DOM层，Flyweight可以用作中央事件管理器，避免将事件处理程序附加到父节点的每个子节点上。\n例如：图书馆书籍管理\n\n``` javascript\n//书籍内部状态\nvar Book = function(title,author,pageCount,publisherID,ISBN){\n    this.title =title;\n    this.author=author;\n    this.pageCount = pageCount;\n    this.publisherID = publisherID;\n    this.ISBN=ISBN;\n};\n//基本工厂\nvar BookFactory = (function(){\n    var existingBooks={},existingBook;\n    return {\n        createBook:function(title,author,pageCount,publisherID,ISBN){\n            existingBook = existingBooks[ISBN];\n            if(!!existingBook){\n                return existingBook;\n            }else{\n                var book = new Book(title,author,pageCount,publisherID,IISBN);\n                existingBooks[ISBN] = book;\n                return book;\n            }\n        }\n    };\n});\n//管理外部状态\n//书籍记录管理器单例\nvar BookRecordManager = (function(){\n    var bookRecordDatabase ={};\n    return {\n        //添加新书到图书馆系统\n        addBookRecord :function(id,title,author,pageCount,publisherID,ISBN,checkoutDate,checkoutMember,dueReturnDate,availability){\n            var book = BookFactory.createBook(title,author,pageCount,publisherID,ISBN);\n            bookRecordDatabase[id] ={\n                checkoutMember:checkoutMember,\n                checkoutDate:checkoutDate,\n                dueReturnDate:dueReturnDate,\n                availability:availability,\n                book:book\n            };\n        },\n        updateCheckoutStatus :function(bookID,newStatus,checkoutDate,checkoutMember,newReturnDate){\n            var record = bookRecordDatabase[bookID];\n            record.availability = newStatus;\n            record.checkoutDate = checkoutDate;\n            record.checkoutMember = checkoutMember;\n            record.dueReturnDate = newReturnDate;\n        },\n        extendCheckoutPeriod :function(bookID,newReturnDate){\n            bookRecordDatabase[bookID].dueReturnDate = newReturnDate;\n        },\n        isPastDue:function(bookID){\n            var currentDate = new Date();\n            return currentDate.getTime() > Date.parse(bookRecordDatabase[bookID].dueReturnDate)\n        }\n    };\n});\n\n```\n\njQuery中，用户将初始化点击绑定到一个容器div的同时，使用了一个stateManager命名空间来封装我们的享元逻辑。\n\nHTML\n\n``` html\n<div id=\"container\">\n    <div class=\"toggle\" href=\"#\">\n        More Info (Address)\n        <span class=\"info\">\n            This is more information\n        </span>\n    </div>\n    <div class=\"toggle\" href=\"#\">\n        Even More Info (Map)\n        <span class=\"info\">\n            <iframe src=\"http://www.baidu.com\"></iframe>\n        </span>\n    </div>\n</div>\n```\nJS\n\n``` javascript\nvar stateManager ={\n    fly: function(){\n        var self = this;\n        $(\"#container\").unbind().on(\"click\",function(e){\n            var target = $(e.originalTarget || e.srcElement);\n            if(target.is(\"div.toggle\")){\n                self.handleClick(target);\n            }\n        });\n    },\n    handleClick:function(elem){\n        elem.find(\"span\").toggle(\"slow\");\n    }\n};\n\n```\n\n### MV*模式\n\n#### MVC模式\nView（视图）是应用程序数据的可视化表示\n#### MVP模式\n模型-视图-表示器\nModel-View-Presenter\n由View进行请求，表示器执行任何与用户请求有关的工作，并将数据回传给它们。\n#### MVVM模式\n模型-视图-视图模型\n视图是主动视图，有数据绑定\n**Model**:应用程序将会使用的特定领域数据信息\n**View**:与用户进行交互的应用程序的一部分\n**ViewModel**:一个专门的Controller，充当数据转换器。\n将Model信息转变为View信息，将命令从View传递到Model。\n是一个用于保存用户正在使用且尚未保存数据的层\nView 和 ViewModel之间通过数据绑定和事件进行通信。\nModel和ViewModel上的属性通过双向数据绑定进行同步和更新。\n\n### jquery中的设计模式\n\n\n### Composite组合模式\n部分整体模式,将所有对象组合成*树形结构*，使用户只需要操作最上层接口，就可以对所有成员做相同操作。\n### Adapter适配器模式\n*Adapter模式*将对象或类的接口interface，转变为与特定的系统兼容的接口。\n适配器模式经常用来适配两个接口，比如调用的js库中有一个根据id获取节点的方法$id(),但是jquery里的$()也可以根据id获取节点，可以用一个适配器来修改：\n``` javascript\n$id = function(id){\n    return jQuery(\"#\"+id)[0];\n```\n### Facade外观模式\n提供一个高层接口，使得客户端或子系统更加方便调用。\n\n\n``` javascript\n//非外观\nvar getName =function(){\n    return 'hahah';\n}\nvar getAge = function(){\n    return 22;\n}\n//外观模式\nvar getInfo = function(){\n var info = getName() + getAge();\n return info;\n }\n```\n\n### Iterator迭代器模式\neach()函数就是迭代器模式\n\n```javascript\neach:function(callback,args){\n    return jQuery.each(this,callback,args);\n}\n```\n### proxy代理模式\n代理模式就是把一个对象的访问，交给另一个代理对象来操作。\n\n### 策略模式\n定义一系列算法，把它们封装起来，并使他们可以相互替换。\n\n``` javascript\n$(div).animate({\"left:200px\"},1000,'linear');  //匀速运动\n$(div).animate({\"left:200px\"},1000,'cubic');   //三次方缓动 \n```\n\n``` javascript\nnameInput.addValidata({\n    notNull:true;\n    drityWords:true;\n    maxLength:30;\n})\nvalidataList ={\n    notNull:function(value){\n        return value !=='';\n    },\n    maxLength:function(value){\n        return value.length() >maxLen;\n    }\n}\n \n```\n### 备忘录模式\n备忘录模式常用于数据缓存\n\n``` javascript\nvar Page = function(){\n   var page = 1,\n      cache = {},\n      data;\n   return function( page ){\n      if ( cache[ page ] ){\n               data =  cache[ page ];\n               render( data );\n      }else{\n               Ajax.send( 'cgi.xx.com/xxx', function( data ){\n                   cache[ page ] = data;\n                   render( data );\n               })\n      }\n    }\n}()\n```\n\n### 职责链模式\n职责链模式是一个对象A向另一个对象B发起请求，如果B不处理，可以把请求转给C，如果C不处理，又可以把请求转给D。一直到有一个对象愿意处理这个请求为止。\n打个比方，客户让老板写个php程序。老板肯定不写，然后老板交给了部门经理。部门经理不愿意写，又交给项目经理。项目经理不会写，又交给程序员。最后由码农来完成。\n\n在这个假设里， 有几条职责链模式的特点。\n1 老板只跟部门经理打交道，部门经理只联系项目经理，项目经理只找码农的麻烦。\n2 如果码农也不写，这个项目将会流产。\n3 客户并不清楚这个程序最后是由谁写出来的。\njs中的事件冒泡就是作为一个职责链来实现的。一个事件在某个节点上被触发，然后向根节点传递， 直到被节点捕获。\n\n\n","slug":"2017-04-21-JS设计模式","published":1,"updated":"2020-03-01T12:09:37.512Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckreo13q7003sytt5dj8t5qf2","content":"<h1 id=\"JS设计模式\"><a href=\"#JS设计模式\" class=\"headerlink\" title=\"JS设计模式\"></a>JS设计模式</h1><h2 id=\"什么是模式\"><a href=\"#什么是模式\" class=\"headerlink\" title=\"什么是模式\"></a>什么是模式</h2><p>模式是一种可复用的解决方案</p>\n<h3 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h3><ol>\n<li>已验证的解决方案</li>\n<li>模式容易被复用</li>\n<li>模式富有表达力</li>\n</ol>\n<h2 id=\"模式状态测试、Proto模式及三法则\"><a href=\"#模式状态测试、Proto模式及三法则\" class=\"headerlink\" title=\"模式状态测试、Proto模式及三法则\"></a>模式状态测试、Proto模式及三法则</h2><p>成为有效模式<br>适合性、实用性、适用性。</p>\n<h2 id=\"设计模式的结构\"><a href=\"#设计模式的结构\" class=\"headerlink\" title=\"设计模式的结构\"></a>设计模式的结构</h2><p>一种模式最初是以一种规则的形式呈现的，该规则建立下面这样的关系</p>\n<ul>\n<li>上下文</li>\n<li>上下文里产生的元件系统</li>\n<li>解决元件在上下文中自身问题的配置</li>\n</ul>\n<h2 id=\"设计模式类别\"><a href=\"#设计模式类别\" class=\"headerlink\" title=\"设计模式类别\"></a>设计模式类别</h2><ol>\n<li>创建型设计模式<br>专注于处理对象创建机制，以适合给定情况的方式来创建对象。<br>包括：Constructor(构造器)、Factory(工厂)、Abstract(抽象)、Prototype(原型)、Singleton(单例)和Builder(生成器)</li>\n<li>结构型设计模式<br>结构型设计模式与对象组合有关，通常可以用于找出在不同对象之间建立关系的简单方法。<br>这种模式有助于确保系统某一部分发生变化时，系统整个结构不需要同时改变。<br>包括：Decorator(装饰者)、Facade(外观)、Flyweight(享元)、Adapter(适配器)、Proxy(代理)</li>\n<li>行为设计模式<br>专注于改善或简化系统中不同对象之间的通信<br>包括：Iterator(迭代器)、Mediator(中介者)、Observer(观察者)、Visitor(访问者)</li>\n</ol>\n<h2 id=\"js设计模式\"><a href=\"#js设计模式\" class=\"headerlink\" title=\"js设计模式\"></a>js设计模式</h2><h3 id=\"Constructor模式\"><a href=\"#Constructor模式\" class=\"headerlink\" title=\"Constructor模式\"></a>Constructor模式</h3><h4 id=\"对象创建\"><a href=\"#对象创建\" class=\"headerlink\" title=\"对象创建\"></a>对象创建</h4><ol>\n<li>’.‘语法</li>\n<li>中括号语法</li>\n<li>Object.defineProperty</li>\n</ol>\n<h4 id=\"基本Constructor\"><a href=\"#基本Constructor\" class=\"headerlink\" title=\"基本Constructor\"></a>基本Constructor</h4><h4 id=\"带原型的Constructor\"><a href=\"#带原型的Constructor\" class=\"headerlink\" title=\"带原型的Constructor\"></a>带原型的Constructor</h4><p>such as :<br>Car.prototype.functionName = function(){}</p>\n<h3 id=\"Module模式\"><a href=\"#Module模式\" class=\"headerlink\" title=\"Module模式\"></a>Module模式</h3><p>js中有几种用于实现模块的方法：</p>\n<ul>\n<li>对象字面量表示法</li>\n<li>Module模式</li>\n<li>AMD模块</li>\n<li>CommonJS</li>\n<li>ECMAScript Harmony 模块</li>\n</ul>\n<h4 id=\"对象字面量\"><a href=\"#对象字面量\" class=\"headerlink\" title=\"对象字面量\"></a>对象字面量</h4><h4 id=\"Module模式-1\"><a href=\"#Module模式-1\" class=\"headerlink\" title=\"Module模式\"></a>Module模式</h4><h5 id=\"私有\"><a href=\"#私有\" class=\"headerlink\" title=\"私有\"></a>私有</h5><p>Module模式使用闭包封装’私有‘状态和组织。提供了一种包装混合公有/私有方法和变量的方式，防止其泄露至全局作用域。<br>在Module模式内，由于闭包的存在，声明的变量和方法只在该模式内部可用。但在返回对象上定义的变量和方法，则对外部使用者都是可用的。<br><strong>Module模式模板</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> myNamespace =(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//私有计数器变量</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> myPrivateVar = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> myPrivateMethod = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">foo</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(foo);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        myPublicVar :<span class=\"string\">'foo'</span>,</span><br><span class=\"line\">        myPublicFunction:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">bar</span>)</span>&#123;</span><br><span class=\"line\">            myPrivateVar++;</span><br><span class=\"line\">            myPrivateMethod(bar);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Module模块变化\"><a href=\"#Module模块变化\" class=\"headerlink\" title=\"Module模块变化\"></a>Module模块变化</h3><h4 id=\"引入混入\"><a href=\"#引入混入\" class=\"headerlink\" title=\"引入混入\"></a>引入混入</h4><p>全局变量可以作为参数传递给模块的匿名函数</p>\n<h4 id=\"引出\"><a href=\"#引出\" class=\"headerlink\" title=\"引出\"></a>引出</h4><h4 id=\"优点-1\"><a href=\"#优点-1\" class=\"headerlink\" title=\"优点\"></a>优点</h4><h4 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h4><p>访问公有和私有成员的方式不同，想改变可见性时必须要修改每一个用过该成员的地方。</p>\n<p>###Singleton单例模式</p>\n<p>限制了类的实例化次数只能一次<br>在该实例不存在的情况下，可以通过一个方法创建一个类来实现创建类的新实例；如果实例已经存在，它会简单返回该对象该对象的引用。<br>在js中，Singleton充当共享资源命名空间，从全局命名空间中隔离出代码实现，从而为函数提供单一访问点。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> mySingleton =(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//实例保持了singleton的一个引用</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> instance;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">init</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">privateMethod</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'I am private'</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> privateVar = <span class=\"string\">'I am also private'</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">            publicMethod:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">\"the public can see me\"</span>);</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            publicProperty:<span class=\"string\">\"I am also public\"</span></span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>&#123;</span><br><span class=\"line\">        getInstance:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!instance)&#123;</span><br><span class=\"line\">                instance = init();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n<p>Singleton模式适用性的描述如下：</p>\n<ul>\n<li>当类只能有一个实例而且客户可以从一个众所周知的访问点访问</li>\n<li>该类的唯一实例应该是通过子类化可扩展的，并且客户应该无需更改代码就能使用一个扩展的实例时。</li>\n</ul>\n<h3 id=\"Observer观察者模式\"><a href=\"#Observer观察者模式\" class=\"headerlink\" title=\"Observer观察者模式\"></a>Observer观察者模式</h3><blockquote>\n<p>一个或多个观察者对目标的状态感兴趣，它们通过将自己依附在目标对象上以便注册所感兴趣的内容。目标状态发生改变并且观察者可能对这些改变感兴趣，就会发送一个通知消息，调用每个观察者的更新方法。当观察者不再对目标状态感兴趣，他们可以简单地将自己从中分离。</p>\n</blockquote>\n<h4 id=\"Observer模式和Publish-Subscribe模式的区别\"><a href=\"#Observer模式和Publish-Subscribe模式的区别\" class=\"headerlink\" title=\"Observer模式和Publish/Subscribe模式的区别\"></a>Observer模式和Publish/Subscribe模式的区别</h4><h4 id=\"Observer优点\"><a href=\"#Observer优点\" class=\"headerlink\" title=\"Observer优点\"></a>Observer优点</h4><p>是用于设计<strong>解耦</strong>性系统的最佳工具之一</p>\n<h4 id=\"Publish-Subscribe实现\"><a href=\"#Publish-Subscribe实现\" class=\"headerlink\" title=\"Publish/Subscribe实现\"></a>Publish/Subscribe实现</h4><p>ECMAScript实现是由事件驱动的</p>\n<h4 id=\"Publish-Subscribe实现-1\"><a href=\"#Publish-Subscribe实现-1\" class=\"headerlink\" title=\"Publish/Subscribe实现\"></a>Publish/Subscribe实现</h4><p>####（例子1）用户界面通知<br>一个负责显示实时股票信息的Web应用程序<br>一个显示股票统计的网格和一个显示最后更新点计数器，当数据模型改变时，应用程序需要更新网格和计数器。<br><strong>目标</strong>：数据模型<br><strong>观察者</strong>：网格和计数器</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">div.onclick = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">click</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    alert(<span class=\"string\">'click'</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>只要订阅了div的click事件，当点击div的时候，function click就会被触发。</p>\n<h3 id=\"Mediator-中介者-模式\"><a href=\"#Mediator-中介者-模式\" class=\"headerlink\" title=\"Mediator(中介者)模式\"></a>Mediator(中介者)模式</h3><p>行为设计模式<br>通过一个中介者来连接两个对象的模式,封装对象之间的交互</p>\n<p><img src=\"/Users/dongruining/Downloads/mediator.png\" alt=\"\"><br>MVC模式中的Controller起到了中介者的作用，</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Participant = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.chatroom = <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">Participant.prototype = &#123;</span><br><span class=\"line\">    send: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">message, to</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.chatroom.send(message, <span class=\"keyword\">this</span>, to);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    receive: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">message, from</span>) </span>&#123;</span><br><span class=\"line\">        log.add(<span class=\"keyword\">from</span>.name + <span class=\"string\">\" to \"</span> + <span class=\"keyword\">this</span>.name + <span class=\"string\">\": \"</span> + message);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> Chatroom = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> participants = &#123;&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        register: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">participant</span>) </span>&#123;</span><br><span class=\"line\">            participants[participant.name] = participant;</span><br><span class=\"line\">            participant.chatroom = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        send: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">message, from, to</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (to) &#123;                   </span><br><span class=\"line\">                to.receive(message, <span class=\"keyword\">from</span>);    </span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;                     </span><br><span class=\"line\">                <span class=\"keyword\">for</span> (key <span class=\"keyword\">in</span> participants) &#123;   </span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (participants[key] !== <span class=\"keyword\">from</span>) &#123;</span><br><span class=\"line\">                        participants[key].receive(message, <span class=\"keyword\">from</span>);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> log = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> log = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        add: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">msg</span>) </span>&#123; log += msg + <span class=\"string\">\"\\n\"</span>; &#125;,</span><br><span class=\"line\">        show: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; alert(log); log = <span class=\"string\">\"\"</span>; &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">run</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> yoko = <span class=\"keyword\">new</span> Participant(<span class=\"string\">\"Yoko\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> john = <span class=\"keyword\">new</span> Participant(<span class=\"string\">\"John\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> paul = <span class=\"keyword\">new</span> Participant(<span class=\"string\">\"Paul\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> ringo = <span class=\"keyword\">new</span> Participant(<span class=\"string\">\"Ringo\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> chatroom = <span class=\"keyword\">new</span> Chatroom();</span><br><span class=\"line\">    chatroom.register(yoko);</span><br><span class=\"line\">    chatroom.register(john);</span><br><span class=\"line\">    chatroom.register(paul);</span><br><span class=\"line\">    chatroom.register(ringo);</span><br><span class=\"line\">    yoko.send(<span class=\"string\">\"All you need is love.\"</span>);</span><br><span class=\"line\">    yoko.send(<span class=\"string\">\"I love you John.\"</span>);</span><br><span class=\"line\">    john.send(<span class=\"string\">\"Hey, no need to broadcast\"</span>, yoko);</span><br><span class=\"line\">    paul.send(<span class=\"string\">\"Ha, I heard that!\"</span>);</span><br><span class=\"line\">    ringo.send(<span class=\"string\">\"Paul, what do you think?\"</span>, paul);</span><br><span class=\"line\">    log.show();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>聊天室起到了中介者的作用。</p>\n<h3 id=\"Prototype（原型）模式\"><a href=\"#Prototype（原型）模式\" class=\"headerlink\" title=\"Prototype（原型）模式\"></a>Prototype（原型）模式</h3><h3 id=\"Command（命令）模式\"><a href=\"#Command（命令）模式\" class=\"headerlink\" title=\"Command（命令）模式\"></a>Command（命令）模式</h3><p>此模式旨在将方法调用、请求或操作封装到单一对象中，从而根据我们不同的请求对客户进行参数化和传递可供执行的方法调用。<br>将调用操作的对象与知道如何实现该操作的对象解耦，并在交换出具体类方面提供更大的整体灵活性。</p>\n<h3 id=\"Facade（外观）模式\"><a href=\"#Facade（外观）模式\" class=\"headerlink\" title=\"Facade（外观）模式\"></a>Facade（外观）模式</h3><p>外观模式提供一个高层接口，这个接口使得客户端或子系统更加方便调用。<br>可以对用户隐藏真正的细节，用户只关心最高层的接口。<br>例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> stopEvent = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;</span><br><span class=\"line\">    e.stopPropagation();</span><br><span class=\"line\">    e.preventDefault();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Factory工厂模式\"><a href=\"#Factory工厂模式\" class=\"headerlink\" title=\"Factory工厂模式\"></a>Factory工厂模式</h3><p>创建型模式，不显式地要求使用一个构造函数。简单工厂模式是由一个方法来决定到底要创建哪个类的实例，而这些实例经常都拥有相同的接口，这种模式主要用在所实例化的类型在编译期并不能确定，而是在执行期决定的情况。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createObject</span>(<span class=\"params\">name,age,profession</span>)</span>&#123;<span class=\"comment\">//集中实例化的函数</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> obj = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</span><br><span class=\"line\">        obj.name = name;</span><br><span class=\"line\">        obj.age = age;</span><br><span class=\"line\">        obj.profession = profession;</span><br><span class=\"line\">        obj.move = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name + <span class=\"string\">' at '</span> + <span class=\"keyword\">this</span>.age + <span class=\"string\">' engaged in '</span> + <span class=\"keyword\">this</span>.profession;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> obj;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> test1 = createObject(<span class=\"string\">'trigkit4'</span>,<span class=\"number\">22</span>,<span class=\"string\">'programmer'</span>);<span class=\"comment\">//第一个实例</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> test2 = createObject(<span class=\"string\">'mike'</span>,<span class=\"number\">25</span>,<span class=\"string\">'engineer'</span>);<span class=\"comment\">//第二个实例</span></span><br></pre></td></tr></table></figure>\n\n<p>工厂模式分为 简单工厂、抽象工厂、智能工厂<br>Factory模式主要在以下场景使用：</p>\n<ul>\n<li>当对象或组件设计高复杂性时</li>\n<li>当需要根据所在的不同环境轻松生成对象的不同实例时</li>\n<li>当处理很多共享相同属性的小型对象或组件时</li>\n</ul>\n<h3 id=\"装饰者模式\"><a href=\"#装饰者模式\" class=\"headerlink\" title=\"装饰者模式\"></a>装饰者模式</h3><p>装饰者模式用于<strong>运行时动态为对象附加功能</strong>。<br>主要解决的问题是：将对象与可扩充的简单基本单元分离出来，按需增强该对象。<br>通过两种方式：<br>继承<br>装饰列表</p>\n<h3 id=\"Flyweight-享元-模式\"><a href=\"#Flyweight-享元-模式\" class=\"headerlink\" title=\"Flyweight(享元)模式\"></a>Flyweight(享元)模式</h3><p>结构型解决方案，用于优化重复、缓慢及数据共享效率低的代码。旨在通过与相关的对象共享尽可能多的数据来减少应用程序中内存的使用。<br>两种方式：<br>第一种用于数据层，处理内存中保存的大量数据<br>第二种用于DOM层，Flyweight可以用作中央事件管理器，避免将事件处理程序附加到父节点的每个子节点上。<br>例如：图书馆书籍管理</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//书籍内部状态</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> Book = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">title,author,pageCount,publisherID,ISBN</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.title =title;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.author=author;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.pageCount = pageCount;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.publisherID = publisherID;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.ISBN=ISBN;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">//基本工厂</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> BookFactory = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> existingBooks=&#123;&#125;,existingBook;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        createBook:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">title,author,pageCount,publisherID,ISBN</span>)</span>&#123;</span><br><span class=\"line\">            existingBook = existingBooks[ISBN];</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!!existingBook)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> existingBook;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> book = <span class=\"keyword\">new</span> Book(title,author,pageCount,publisherID,IISBN);</span><br><span class=\"line\">                existingBooks[ISBN] = book;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> book;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">//管理外部状态</span></span><br><span class=\"line\"><span class=\"comment\">//书籍记录管理器单例</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> BookRecordManager = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> bookRecordDatabase =&#123;&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//添加新书到图书馆系统</span></span><br><span class=\"line\">        addBookRecord :<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">id,title,author,pageCount,publisherID,ISBN,checkoutDate,checkoutMember,dueReturnDate,availability</span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> book = BookFactory.createBook(title,author,pageCount,publisherID,ISBN);</span><br><span class=\"line\">            bookRecordDatabase[id] =&#123;</span><br><span class=\"line\">                checkoutMember:checkoutMember,</span><br><span class=\"line\">                checkoutDate:checkoutDate,</span><br><span class=\"line\">                dueReturnDate:dueReturnDate,</span><br><span class=\"line\">                availability:availability,</span><br><span class=\"line\">                book:book</span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        updateCheckoutStatus :<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">bookID,newStatus,checkoutDate,checkoutMember,newReturnDate</span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> record = bookRecordDatabase[bookID];</span><br><span class=\"line\">            record.availability = newStatus;</span><br><span class=\"line\">            record.checkoutDate = checkoutDate;</span><br><span class=\"line\">            record.checkoutMember = checkoutMember;</span><br><span class=\"line\">            record.dueReturnDate = newReturnDate;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        extendCheckoutPeriod :<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">bookID,newReturnDate</span>)</span>&#123;</span><br><span class=\"line\">            bookRecordDatabase[bookID].dueReturnDate = newReturnDate;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        isPastDue:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">bookID</span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> currentDate = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> currentDate.getTime() &gt; <span class=\"built_in\">Date</span>.parse(bookRecordDatabase[bookID].dueReturnDate)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>jQuery中，用户将初始化点击绑定到一个容器div的同时，使用了一个stateManager命名空间来封装我们的享元逻辑。</p>\n<p>HTML</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"toggle\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span>&gt;</span></span><br><span class=\"line\">        More Info (Address)</span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"info\"</span>&gt;</span></span><br><span class=\"line\">            This is more information</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"toggle\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span>&gt;</span></span><br><span class=\"line\">        Even More Info (Map)</span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"info\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">iframe</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://www.baidu.com\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">iframe</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>JS</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> stateManager =&#123;</span><br><span class=\"line\">    fly: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        $(<span class=\"string\">\"#container\"</span>).unbind().on(<span class=\"string\">\"click\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> target = $(e.originalTarget || e.srcElement);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(target.is(<span class=\"string\">\"div.toggle\"</span>))&#123;</span><br><span class=\"line\">                self.handleClick(target);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    handleClick:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">elem</span>)</span>&#123;</span><br><span class=\"line\">        elem.find(<span class=\"string\">\"span\"</span>).toggle(<span class=\"string\">\"slow\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"MV-模式\"><a href=\"#MV-模式\" class=\"headerlink\" title=\"MV*模式\"></a>MV*模式</h3><h4 id=\"MVC模式\"><a href=\"#MVC模式\" class=\"headerlink\" title=\"MVC模式\"></a>MVC模式</h4><p>View（视图）是应用程序数据的可视化表示</p>\n<h4 id=\"MVP模式\"><a href=\"#MVP模式\" class=\"headerlink\" title=\"MVP模式\"></a>MVP模式</h4><p>模型-视图-表示器<br>Model-View-Presenter<br>由View进行请求，表示器执行任何与用户请求有关的工作，并将数据回传给它们。</p>\n<h4 id=\"MVVM模式\"><a href=\"#MVVM模式\" class=\"headerlink\" title=\"MVVM模式\"></a>MVVM模式</h4><p>模型-视图-视图模型<br>视图是主动视图，有数据绑定<br><strong>Model</strong>:应用程序将会使用的特定领域数据信息<br><strong>View</strong>:与用户进行交互的应用程序的一部分<br><strong>ViewModel</strong>:一个专门的Controller，充当数据转换器。<br>将Model信息转变为View信息，将命令从View传递到Model。<br>是一个用于保存用户正在使用且尚未保存数据的层<br>View 和 ViewModel之间通过数据绑定和事件进行通信。<br>Model和ViewModel上的属性通过双向数据绑定进行同步和更新。</p>\n<h3 id=\"jquery中的设计模式\"><a href=\"#jquery中的设计模式\" class=\"headerlink\" title=\"jquery中的设计模式\"></a>jquery中的设计模式</h3><h3 id=\"Composite组合模式\"><a href=\"#Composite组合模式\" class=\"headerlink\" title=\"Composite组合模式\"></a>Composite组合模式</h3><p>部分整体模式,将所有对象组合成<em>树形结构</em>，使用户只需要操作最上层接口，就可以对所有成员做相同操作。</p>\n<h3 id=\"Adapter适配器模式\"><a href=\"#Adapter适配器模式\" class=\"headerlink\" title=\"Adapter适配器模式\"></a>Adapter适配器模式</h3><p><em>Adapter模式</em>将对象或类的接口interface，转变为与特定的系统兼容的接口。<br>适配器模式经常用来适配两个接口，比如调用的js库中有一个根据id获取节点的方法$id(),但是jquery里的$()也可以根据id获取节点，可以用一个适配器来修改：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$id = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">id</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> jQuery(<span class=\"string\">\"#\"</span>+id)[<span class=\"number\">0</span>];</span><br></pre></td></tr></table></figure>\n<h3 id=\"Facade外观模式\"><a href=\"#Facade外观模式\" class=\"headerlink\" title=\"Facade外观模式\"></a>Facade外观模式</h3><p>提供一个高层接口，使得客户端或子系统更加方便调用。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//非外观</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> getName =<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'hahah'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> getAge = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">22</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//外观模式</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> getInfo = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"> <span class=\"keyword\">var</span> info = getName() + getAge();</span><br><span class=\"line\"> <span class=\"keyword\">return</span> info;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Iterator迭代器模式\"><a href=\"#Iterator迭代器模式\" class=\"headerlink\" title=\"Iterator迭代器模式\"></a>Iterator迭代器模式</h3><p>each()函数就是迭代器模式</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">each:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">callback,args</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> jQuery.each(<span class=\"keyword\">this</span>,callback,args);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"proxy代理模式\"><a href=\"#proxy代理模式\" class=\"headerlink\" title=\"proxy代理模式\"></a>proxy代理模式</h3><p>代理模式就是把一个对象的访问，交给另一个代理对象来操作。</p>\n<h3 id=\"策略模式\"><a href=\"#策略模式\" class=\"headerlink\" title=\"策略模式\"></a>策略模式</h3><p>定义一系列算法，把它们封装起来，并使他们可以相互替换。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(div).animate(&#123;<span class=\"string\">\"left:200px\"</span>&#125;,<span class=\"number\">1000</span>,<span class=\"string\">'linear'</span>);  <span class=\"comment\">//匀速运动</span></span><br><span class=\"line\">$(div).animate(&#123;<span class=\"string\">\"left:200px\"</span>&#125;,<span class=\"number\">1000</span>,<span class=\"string\">'cubic'</span>);   <span class=\"comment\">//三次方缓动</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nameInput.addValidata(&#123;</span><br><span class=\"line\">    notNull:<span class=\"literal\">true</span>;</span><br><span class=\"line\">    drityWords:<span class=\"literal\">true</span>;</span><br><span class=\"line\">    maxLength:<span class=\"number\">30</span>;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">validataList =&#123;</span><br><span class=\"line\">    notNull:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> value !==<span class=\"string\">''</span>;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    maxLength:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> value.length() &gt;maxLen;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"备忘录模式\"><a href=\"#备忘录模式\" class=\"headerlink\" title=\"备忘录模式\"></a>备忘录模式</h3><p>备忘录模式常用于数据缓存</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Page = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">var</span> page = <span class=\"number\">1</span>,</span><br><span class=\"line\">      cache = &#123;&#125;,</span><br><span class=\"line\">      data;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> page </span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> ( cache[ page ] )&#123;</span><br><span class=\"line\">               data =  cache[ page ];</span><br><span class=\"line\">               render( data );</span><br><span class=\"line\">      &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">               Ajax.send( <span class=\"string\">'cgi.xx.com/xxx'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> data </span>)</span>&#123;</span><br><span class=\"line\">                   cache[ page ] = data;</span><br><span class=\"line\">                   render( data );</span><br><span class=\"line\">               &#125;)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;()</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"职责链模式\"><a href=\"#职责链模式\" class=\"headerlink\" title=\"职责链模式\"></a>职责链模式</h3><p>职责链模式是一个对象A向另一个对象B发起请求，如果B不处理，可以把请求转给C，如果C不处理，又可以把请求转给D。一直到有一个对象愿意处理这个请求为止。<br>打个比方，客户让老板写个php程序。老板肯定不写，然后老板交给了部门经理。部门经理不愿意写，又交给项目经理。项目经理不会写，又交给程序员。最后由码农来完成。</p>\n<p>在这个假设里， 有几条职责链模式的特点。<br>1 老板只跟部门经理打交道，部门经理只联系项目经理，项目经理只找码农的麻烦。<br>2 如果码农也不写，这个项目将会流产。<br>3 客户并不清楚这个程序最后是由谁写出来的。<br>js中的事件冒泡就是作为一个职责链来实现的。一个事件在某个节点上被触发，然后向根节点传递， 直到被节点捕获。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"JS设计模式\"><a href=\"#JS设计模式\" class=\"headerlink\" title=\"JS设计模式\"></a>JS设计模式</h1><h2 id=\"什么是模式\"><a href=\"#什么是模式\" class=\"headerlink\" title=\"什么是模式\"></a>什么是模式</h2><p>模式是一种可复用的解决方案</p>\n<h3 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h3><ol>\n<li>已验证的解决方案</li>\n<li>模式容易被复用</li>\n<li>模式富有表达力</li>\n</ol>\n<h2 id=\"模式状态测试、Proto模式及三法则\"><a href=\"#模式状态测试、Proto模式及三法则\" class=\"headerlink\" title=\"模式状态测试、Proto模式及三法则\"></a>模式状态测试、Proto模式及三法则</h2><p>成为有效模式<br>适合性、实用性、适用性。</p>\n<h2 id=\"设计模式的结构\"><a href=\"#设计模式的结构\" class=\"headerlink\" title=\"设计模式的结构\"></a>设计模式的结构</h2><p>一种模式最初是以一种规则的形式呈现的，该规则建立下面这样的关系</p>\n<ul>\n<li>上下文</li>\n<li>上下文里产生的元件系统</li>\n<li>解决元件在上下文中自身问题的配置</li>\n</ul>\n<h2 id=\"设计模式类别\"><a href=\"#设计模式类别\" class=\"headerlink\" title=\"设计模式类别\"></a>设计模式类别</h2><ol>\n<li>创建型设计模式<br>专注于处理对象创建机制，以适合给定情况的方式来创建对象。<br>包括：Constructor(构造器)、Factory(工厂)、Abstract(抽象)、Prototype(原型)、Singleton(单例)和Builder(生成器)</li>\n<li>结构型设计模式<br>结构型设计模式与对象组合有关，通常可以用于找出在不同对象之间建立关系的简单方法。<br>这种模式有助于确保系统某一部分发生变化时，系统整个结构不需要同时改变。<br>包括：Decorator(装饰者)、Facade(外观)、Flyweight(享元)、Adapter(适配器)、Proxy(代理)</li>\n<li>行为设计模式<br>专注于改善或简化系统中不同对象之间的通信<br>包括：Iterator(迭代器)、Mediator(中介者)、Observer(观察者)、Visitor(访问者)</li>\n</ol>\n<h2 id=\"js设计模式\"><a href=\"#js设计模式\" class=\"headerlink\" title=\"js设计模式\"></a>js设计模式</h2><h3 id=\"Constructor模式\"><a href=\"#Constructor模式\" class=\"headerlink\" title=\"Constructor模式\"></a>Constructor模式</h3><h4 id=\"对象创建\"><a href=\"#对象创建\" class=\"headerlink\" title=\"对象创建\"></a>对象创建</h4><ol>\n<li>’.‘语法</li>\n<li>中括号语法</li>\n<li>Object.defineProperty</li>\n</ol>\n<h4 id=\"基本Constructor\"><a href=\"#基本Constructor\" class=\"headerlink\" title=\"基本Constructor\"></a>基本Constructor</h4><h4 id=\"带原型的Constructor\"><a href=\"#带原型的Constructor\" class=\"headerlink\" title=\"带原型的Constructor\"></a>带原型的Constructor</h4><p>such as :<br>Car.prototype.functionName = function(){}</p>\n<h3 id=\"Module模式\"><a href=\"#Module模式\" class=\"headerlink\" title=\"Module模式\"></a>Module模式</h3><p>js中有几种用于实现模块的方法：</p>\n<ul>\n<li>对象字面量表示法</li>\n<li>Module模式</li>\n<li>AMD模块</li>\n<li>CommonJS</li>\n<li>ECMAScript Harmony 模块</li>\n</ul>\n<h4 id=\"对象字面量\"><a href=\"#对象字面量\" class=\"headerlink\" title=\"对象字面量\"></a>对象字面量</h4><h4 id=\"Module模式-1\"><a href=\"#Module模式-1\" class=\"headerlink\" title=\"Module模式\"></a>Module模式</h4><h5 id=\"私有\"><a href=\"#私有\" class=\"headerlink\" title=\"私有\"></a>私有</h5><p>Module模式使用闭包封装’私有‘状态和组织。提供了一种包装混合公有/私有方法和变量的方式，防止其泄露至全局作用域。<br>在Module模式内，由于闭包的存在，声明的变量和方法只在该模式内部可用。但在返回对象上定义的变量和方法，则对外部使用者都是可用的。<br><strong>Module模式模板</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> myNamespace =(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//私有计数器变量</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> myPrivateVar = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> myPrivateMethod = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">foo</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(foo);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        myPublicVar :<span class=\"string\">'foo'</span>,</span><br><span class=\"line\">        myPublicFunction:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">bar</span>)</span>&#123;</span><br><span class=\"line\">            myPrivateVar++;</span><br><span class=\"line\">            myPrivateMethod(bar);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Module模块变化\"><a href=\"#Module模块变化\" class=\"headerlink\" title=\"Module模块变化\"></a>Module模块变化</h3><h4 id=\"引入混入\"><a href=\"#引入混入\" class=\"headerlink\" title=\"引入混入\"></a>引入混入</h4><p>全局变量可以作为参数传递给模块的匿名函数</p>\n<h4 id=\"引出\"><a href=\"#引出\" class=\"headerlink\" title=\"引出\"></a>引出</h4><h4 id=\"优点-1\"><a href=\"#优点-1\" class=\"headerlink\" title=\"优点\"></a>优点</h4><h4 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h4><p>访问公有和私有成员的方式不同，想改变可见性时必须要修改每一个用过该成员的地方。</p>\n<p>###Singleton单例模式</p>\n<p>限制了类的实例化次数只能一次<br>在该实例不存在的情况下，可以通过一个方法创建一个类来实现创建类的新实例；如果实例已经存在，它会简单返回该对象该对象的引用。<br>在js中，Singleton充当共享资源命名空间，从全局命名空间中隔离出代码实现，从而为函数提供单一访问点。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> mySingleton =(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//实例保持了singleton的一个引用</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> instance;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">init</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">privateMethod</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'I am private'</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> privateVar = <span class=\"string\">'I am also private'</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">            publicMethod:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">\"the public can see me\"</span>);</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            publicProperty:<span class=\"string\">\"I am also public\"</span></span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>&#123;</span><br><span class=\"line\">        getInstance:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!instance)&#123;</span><br><span class=\"line\">                instance = init();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n<p>Singleton模式适用性的描述如下：</p>\n<ul>\n<li>当类只能有一个实例而且客户可以从一个众所周知的访问点访问</li>\n<li>该类的唯一实例应该是通过子类化可扩展的，并且客户应该无需更改代码就能使用一个扩展的实例时。</li>\n</ul>\n<h3 id=\"Observer观察者模式\"><a href=\"#Observer观察者模式\" class=\"headerlink\" title=\"Observer观察者模式\"></a>Observer观察者模式</h3><blockquote>\n<p>一个或多个观察者对目标的状态感兴趣，它们通过将自己依附在目标对象上以便注册所感兴趣的内容。目标状态发生改变并且观察者可能对这些改变感兴趣，就会发送一个通知消息，调用每个观察者的更新方法。当观察者不再对目标状态感兴趣，他们可以简单地将自己从中分离。</p>\n</blockquote>\n<h4 id=\"Observer模式和Publish-Subscribe模式的区别\"><a href=\"#Observer模式和Publish-Subscribe模式的区别\" class=\"headerlink\" title=\"Observer模式和Publish/Subscribe模式的区别\"></a>Observer模式和Publish/Subscribe模式的区别</h4><h4 id=\"Observer优点\"><a href=\"#Observer优点\" class=\"headerlink\" title=\"Observer优点\"></a>Observer优点</h4><p>是用于设计<strong>解耦</strong>性系统的最佳工具之一</p>\n<h4 id=\"Publish-Subscribe实现\"><a href=\"#Publish-Subscribe实现\" class=\"headerlink\" title=\"Publish/Subscribe实现\"></a>Publish/Subscribe实现</h4><p>ECMAScript实现是由事件驱动的</p>\n<h4 id=\"Publish-Subscribe实现-1\"><a href=\"#Publish-Subscribe实现-1\" class=\"headerlink\" title=\"Publish/Subscribe实现\"></a>Publish/Subscribe实现</h4><p>####（例子1）用户界面通知<br>一个负责显示实时股票信息的Web应用程序<br>一个显示股票统计的网格和一个显示最后更新点计数器，当数据模型改变时，应用程序需要更新网格和计数器。<br><strong>目标</strong>：数据模型<br><strong>观察者</strong>：网格和计数器</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">div.onclick = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">click</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    alert(<span class=\"string\">'click'</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>只要订阅了div的click事件，当点击div的时候，function click就会被触发。</p>\n<h3 id=\"Mediator-中介者-模式\"><a href=\"#Mediator-中介者-模式\" class=\"headerlink\" title=\"Mediator(中介者)模式\"></a>Mediator(中介者)模式</h3><p>行为设计模式<br>通过一个中介者来连接两个对象的模式,封装对象之间的交互</p>\n<p><img src=\"/Users/dongruining/Downloads/mediator.png\" alt=\"\"><br>MVC模式中的Controller起到了中介者的作用，</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Participant = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.chatroom = <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">Participant.prototype = &#123;</span><br><span class=\"line\">    send: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">message, to</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.chatroom.send(message, <span class=\"keyword\">this</span>, to);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    receive: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">message, from</span>) </span>&#123;</span><br><span class=\"line\">        log.add(<span class=\"keyword\">from</span>.name + <span class=\"string\">\" to \"</span> + <span class=\"keyword\">this</span>.name + <span class=\"string\">\": \"</span> + message);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> Chatroom = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> participants = &#123;&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        register: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">participant</span>) </span>&#123;</span><br><span class=\"line\">            participants[participant.name] = participant;</span><br><span class=\"line\">            participant.chatroom = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        send: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">message, from, to</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (to) &#123;                   </span><br><span class=\"line\">                to.receive(message, <span class=\"keyword\">from</span>);    </span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;                     </span><br><span class=\"line\">                <span class=\"keyword\">for</span> (key <span class=\"keyword\">in</span> participants) &#123;   </span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (participants[key] !== <span class=\"keyword\">from</span>) &#123;</span><br><span class=\"line\">                        participants[key].receive(message, <span class=\"keyword\">from</span>);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> log = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> log = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        add: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">msg</span>) </span>&#123; log += msg + <span class=\"string\">\"\\n\"</span>; &#125;,</span><br><span class=\"line\">        show: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; alert(log); log = <span class=\"string\">\"\"</span>; &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">run</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> yoko = <span class=\"keyword\">new</span> Participant(<span class=\"string\">\"Yoko\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> john = <span class=\"keyword\">new</span> Participant(<span class=\"string\">\"John\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> paul = <span class=\"keyword\">new</span> Participant(<span class=\"string\">\"Paul\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> ringo = <span class=\"keyword\">new</span> Participant(<span class=\"string\">\"Ringo\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> chatroom = <span class=\"keyword\">new</span> Chatroom();</span><br><span class=\"line\">    chatroom.register(yoko);</span><br><span class=\"line\">    chatroom.register(john);</span><br><span class=\"line\">    chatroom.register(paul);</span><br><span class=\"line\">    chatroom.register(ringo);</span><br><span class=\"line\">    yoko.send(<span class=\"string\">\"All you need is love.\"</span>);</span><br><span class=\"line\">    yoko.send(<span class=\"string\">\"I love you John.\"</span>);</span><br><span class=\"line\">    john.send(<span class=\"string\">\"Hey, no need to broadcast\"</span>, yoko);</span><br><span class=\"line\">    paul.send(<span class=\"string\">\"Ha, I heard that!\"</span>);</span><br><span class=\"line\">    ringo.send(<span class=\"string\">\"Paul, what do you think?\"</span>, paul);</span><br><span class=\"line\">    log.show();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>聊天室起到了中介者的作用。</p>\n<h3 id=\"Prototype（原型）模式\"><a href=\"#Prototype（原型）模式\" class=\"headerlink\" title=\"Prototype（原型）模式\"></a>Prototype（原型）模式</h3><h3 id=\"Command（命令）模式\"><a href=\"#Command（命令）模式\" class=\"headerlink\" title=\"Command（命令）模式\"></a>Command（命令）模式</h3><p>此模式旨在将方法调用、请求或操作封装到单一对象中，从而根据我们不同的请求对客户进行参数化和传递可供执行的方法调用。<br>将调用操作的对象与知道如何实现该操作的对象解耦，并在交换出具体类方面提供更大的整体灵活性。</p>\n<h3 id=\"Facade（外观）模式\"><a href=\"#Facade（外观）模式\" class=\"headerlink\" title=\"Facade（外观）模式\"></a>Facade（外观）模式</h3><p>外观模式提供一个高层接口，这个接口使得客户端或子系统更加方便调用。<br>可以对用户隐藏真正的细节，用户只关心最高层的接口。<br>例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> stopEvent = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;</span><br><span class=\"line\">    e.stopPropagation();</span><br><span class=\"line\">    e.preventDefault();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Factory工厂模式\"><a href=\"#Factory工厂模式\" class=\"headerlink\" title=\"Factory工厂模式\"></a>Factory工厂模式</h3><p>创建型模式，不显式地要求使用一个构造函数。简单工厂模式是由一个方法来决定到底要创建哪个类的实例，而这些实例经常都拥有相同的接口，这种模式主要用在所实例化的类型在编译期并不能确定，而是在执行期决定的情况。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createObject</span>(<span class=\"params\">name,age,profession</span>)</span>&#123;<span class=\"comment\">//集中实例化的函数</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> obj = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</span><br><span class=\"line\">        obj.name = name;</span><br><span class=\"line\">        obj.age = age;</span><br><span class=\"line\">        obj.profession = profession;</span><br><span class=\"line\">        obj.move = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name + <span class=\"string\">' at '</span> + <span class=\"keyword\">this</span>.age + <span class=\"string\">' engaged in '</span> + <span class=\"keyword\">this</span>.profession;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> obj;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> test1 = createObject(<span class=\"string\">'trigkit4'</span>,<span class=\"number\">22</span>,<span class=\"string\">'programmer'</span>);<span class=\"comment\">//第一个实例</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> test2 = createObject(<span class=\"string\">'mike'</span>,<span class=\"number\">25</span>,<span class=\"string\">'engineer'</span>);<span class=\"comment\">//第二个实例</span></span><br></pre></td></tr></table></figure>\n\n<p>工厂模式分为 简单工厂、抽象工厂、智能工厂<br>Factory模式主要在以下场景使用：</p>\n<ul>\n<li>当对象或组件设计高复杂性时</li>\n<li>当需要根据所在的不同环境轻松生成对象的不同实例时</li>\n<li>当处理很多共享相同属性的小型对象或组件时</li>\n</ul>\n<h3 id=\"装饰者模式\"><a href=\"#装饰者模式\" class=\"headerlink\" title=\"装饰者模式\"></a>装饰者模式</h3><p>装饰者模式用于<strong>运行时动态为对象附加功能</strong>。<br>主要解决的问题是：将对象与可扩充的简单基本单元分离出来，按需增强该对象。<br>通过两种方式：<br>继承<br>装饰列表</p>\n<h3 id=\"Flyweight-享元-模式\"><a href=\"#Flyweight-享元-模式\" class=\"headerlink\" title=\"Flyweight(享元)模式\"></a>Flyweight(享元)模式</h3><p>结构型解决方案，用于优化重复、缓慢及数据共享效率低的代码。旨在通过与相关的对象共享尽可能多的数据来减少应用程序中内存的使用。<br>两种方式：<br>第一种用于数据层，处理内存中保存的大量数据<br>第二种用于DOM层，Flyweight可以用作中央事件管理器，避免将事件处理程序附加到父节点的每个子节点上。<br>例如：图书馆书籍管理</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//书籍内部状态</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> Book = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">title,author,pageCount,publisherID,ISBN</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.title =title;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.author=author;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.pageCount = pageCount;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.publisherID = publisherID;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.ISBN=ISBN;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">//基本工厂</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> BookFactory = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> existingBooks=&#123;&#125;,existingBook;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        createBook:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">title,author,pageCount,publisherID,ISBN</span>)</span>&#123;</span><br><span class=\"line\">            existingBook = existingBooks[ISBN];</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!!existingBook)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> existingBook;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> book = <span class=\"keyword\">new</span> Book(title,author,pageCount,publisherID,IISBN);</span><br><span class=\"line\">                existingBooks[ISBN] = book;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> book;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">//管理外部状态</span></span><br><span class=\"line\"><span class=\"comment\">//书籍记录管理器单例</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> BookRecordManager = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> bookRecordDatabase =&#123;&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//添加新书到图书馆系统</span></span><br><span class=\"line\">        addBookRecord :<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">id,title,author,pageCount,publisherID,ISBN,checkoutDate,checkoutMember,dueReturnDate,availability</span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> book = BookFactory.createBook(title,author,pageCount,publisherID,ISBN);</span><br><span class=\"line\">            bookRecordDatabase[id] =&#123;</span><br><span class=\"line\">                checkoutMember:checkoutMember,</span><br><span class=\"line\">                checkoutDate:checkoutDate,</span><br><span class=\"line\">                dueReturnDate:dueReturnDate,</span><br><span class=\"line\">                availability:availability,</span><br><span class=\"line\">                book:book</span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        updateCheckoutStatus :<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">bookID,newStatus,checkoutDate,checkoutMember,newReturnDate</span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> record = bookRecordDatabase[bookID];</span><br><span class=\"line\">            record.availability = newStatus;</span><br><span class=\"line\">            record.checkoutDate = checkoutDate;</span><br><span class=\"line\">            record.checkoutMember = checkoutMember;</span><br><span class=\"line\">            record.dueReturnDate = newReturnDate;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        extendCheckoutPeriod :<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">bookID,newReturnDate</span>)</span>&#123;</span><br><span class=\"line\">            bookRecordDatabase[bookID].dueReturnDate = newReturnDate;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        isPastDue:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">bookID</span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> currentDate = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> currentDate.getTime() &gt; <span class=\"built_in\">Date</span>.parse(bookRecordDatabase[bookID].dueReturnDate)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>jQuery中，用户将初始化点击绑定到一个容器div的同时，使用了一个stateManager命名空间来封装我们的享元逻辑。</p>\n<p>HTML</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"toggle\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span>&gt;</span></span><br><span class=\"line\">        More Info (Address)</span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"info\"</span>&gt;</span></span><br><span class=\"line\">            This is more information</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"toggle\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span>&gt;</span></span><br><span class=\"line\">        Even More Info (Map)</span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"info\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">iframe</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://www.baidu.com\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">iframe</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>JS</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> stateManager =&#123;</span><br><span class=\"line\">    fly: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        $(<span class=\"string\">\"#container\"</span>).unbind().on(<span class=\"string\">\"click\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> target = $(e.originalTarget || e.srcElement);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(target.is(<span class=\"string\">\"div.toggle\"</span>))&#123;</span><br><span class=\"line\">                self.handleClick(target);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    handleClick:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">elem</span>)</span>&#123;</span><br><span class=\"line\">        elem.find(<span class=\"string\">\"span\"</span>).toggle(<span class=\"string\">\"slow\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"MV-模式\"><a href=\"#MV-模式\" class=\"headerlink\" title=\"MV*模式\"></a>MV*模式</h3><h4 id=\"MVC模式\"><a href=\"#MVC模式\" class=\"headerlink\" title=\"MVC模式\"></a>MVC模式</h4><p>View（视图）是应用程序数据的可视化表示</p>\n<h4 id=\"MVP模式\"><a href=\"#MVP模式\" class=\"headerlink\" title=\"MVP模式\"></a>MVP模式</h4><p>模型-视图-表示器<br>Model-View-Presenter<br>由View进行请求，表示器执行任何与用户请求有关的工作，并将数据回传给它们。</p>\n<h4 id=\"MVVM模式\"><a href=\"#MVVM模式\" class=\"headerlink\" title=\"MVVM模式\"></a>MVVM模式</h4><p>模型-视图-视图模型<br>视图是主动视图，有数据绑定<br><strong>Model</strong>:应用程序将会使用的特定领域数据信息<br><strong>View</strong>:与用户进行交互的应用程序的一部分<br><strong>ViewModel</strong>:一个专门的Controller，充当数据转换器。<br>将Model信息转变为View信息，将命令从View传递到Model。<br>是一个用于保存用户正在使用且尚未保存数据的层<br>View 和 ViewModel之间通过数据绑定和事件进行通信。<br>Model和ViewModel上的属性通过双向数据绑定进行同步和更新。</p>\n<h3 id=\"jquery中的设计模式\"><a href=\"#jquery中的设计模式\" class=\"headerlink\" title=\"jquery中的设计模式\"></a>jquery中的设计模式</h3><h3 id=\"Composite组合模式\"><a href=\"#Composite组合模式\" class=\"headerlink\" title=\"Composite组合模式\"></a>Composite组合模式</h3><p>部分整体模式,将所有对象组合成<em>树形结构</em>，使用户只需要操作最上层接口，就可以对所有成员做相同操作。</p>\n<h3 id=\"Adapter适配器模式\"><a href=\"#Adapter适配器模式\" class=\"headerlink\" title=\"Adapter适配器模式\"></a>Adapter适配器模式</h3><p><em>Adapter模式</em>将对象或类的接口interface，转变为与特定的系统兼容的接口。<br>适配器模式经常用来适配两个接口，比如调用的js库中有一个根据id获取节点的方法$id(),但是jquery里的$()也可以根据id获取节点，可以用一个适配器来修改：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$id = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">id</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> jQuery(<span class=\"string\">\"#\"</span>+id)[<span class=\"number\">0</span>];</span><br></pre></td></tr></table></figure>\n<h3 id=\"Facade外观模式\"><a href=\"#Facade外观模式\" class=\"headerlink\" title=\"Facade外观模式\"></a>Facade外观模式</h3><p>提供一个高层接口，使得客户端或子系统更加方便调用。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//非外观</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> getName =<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'hahah'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> getAge = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">22</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//外观模式</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> getInfo = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"> <span class=\"keyword\">var</span> info = getName() + getAge();</span><br><span class=\"line\"> <span class=\"keyword\">return</span> info;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Iterator迭代器模式\"><a href=\"#Iterator迭代器模式\" class=\"headerlink\" title=\"Iterator迭代器模式\"></a>Iterator迭代器模式</h3><p>each()函数就是迭代器模式</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">each:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">callback,args</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> jQuery.each(<span class=\"keyword\">this</span>,callback,args);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"proxy代理模式\"><a href=\"#proxy代理模式\" class=\"headerlink\" title=\"proxy代理模式\"></a>proxy代理模式</h3><p>代理模式就是把一个对象的访问，交给另一个代理对象来操作。</p>\n<h3 id=\"策略模式\"><a href=\"#策略模式\" class=\"headerlink\" title=\"策略模式\"></a>策略模式</h3><p>定义一系列算法，把它们封装起来，并使他们可以相互替换。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(div).animate(&#123;<span class=\"string\">\"left:200px\"</span>&#125;,<span class=\"number\">1000</span>,<span class=\"string\">'linear'</span>);  <span class=\"comment\">//匀速运动</span></span><br><span class=\"line\">$(div).animate(&#123;<span class=\"string\">\"left:200px\"</span>&#125;,<span class=\"number\">1000</span>,<span class=\"string\">'cubic'</span>);   <span class=\"comment\">//三次方缓动</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nameInput.addValidata(&#123;</span><br><span class=\"line\">    notNull:<span class=\"literal\">true</span>;</span><br><span class=\"line\">    drityWords:<span class=\"literal\">true</span>;</span><br><span class=\"line\">    maxLength:<span class=\"number\">30</span>;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">validataList =&#123;</span><br><span class=\"line\">    notNull:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> value !==<span class=\"string\">''</span>;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    maxLength:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> value.length() &gt;maxLen;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"备忘录模式\"><a href=\"#备忘录模式\" class=\"headerlink\" title=\"备忘录模式\"></a>备忘录模式</h3><p>备忘录模式常用于数据缓存</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Page = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">var</span> page = <span class=\"number\">1</span>,</span><br><span class=\"line\">      cache = &#123;&#125;,</span><br><span class=\"line\">      data;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> page </span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> ( cache[ page ] )&#123;</span><br><span class=\"line\">               data =  cache[ page ];</span><br><span class=\"line\">               render( data );</span><br><span class=\"line\">      &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">               Ajax.send( <span class=\"string\">'cgi.xx.com/xxx'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> data </span>)</span>&#123;</span><br><span class=\"line\">                   cache[ page ] = data;</span><br><span class=\"line\">                   render( data );</span><br><span class=\"line\">               &#125;)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;()</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"职责链模式\"><a href=\"#职责链模式\" class=\"headerlink\" title=\"职责链模式\"></a>职责链模式</h3><p>职责链模式是一个对象A向另一个对象B发起请求，如果B不处理，可以把请求转给C，如果C不处理，又可以把请求转给D。一直到有一个对象愿意处理这个请求为止。<br>打个比方，客户让老板写个php程序。老板肯定不写，然后老板交给了部门经理。部门经理不愿意写，又交给项目经理。项目经理不会写，又交给程序员。最后由码农来完成。</p>\n<p>在这个假设里， 有几条职责链模式的特点。<br>1 老板只跟部门经理打交道，部门经理只联系项目经理，项目经理只找码农的麻烦。<br>2 如果码农也不写，这个项目将会流产。<br>3 客户并不清楚这个程序最后是由谁写出来的。<br>js中的事件冒泡就是作为一个职责链来实现的。一个事件在某个节点上被触发，然后向根节点传递， 直到被节点捕获。</p>\n"},{"title":"front-end--面试题整理","date":"2017-03-05T16:00:00.000Z","_content":"\n### Doctype作用？标准模式与兼容模式各有什么区别?\n\n（1）、<!DOCTYPE>声明位于位于HTML文档中的第一行，处于 <html> 标签之前。告知浏览器的解析器用什么文档标准解析这个文档。DOCTYPE不存在或格式不正确会导致文档以兼容模式呈现。\n\n（2）、标准模式的排版 和JS运作模式都是以该浏览器支持的最高标准运行。在兼容模式中，页面以宽松的向后兼容的方式显示,模拟老式浏览器的行为以防止站点无法工作。\nHTML5 为什么只需要写 <!DOCTYPE HTML>？\n\n HTML5 不基于 SGML，因此不需要对DTD进行引用，但是需要doctype来规范浏览器的行为（让浏览器按照它们应该的方式来运行）；\n\n 而HTML4.01基于SGML,所以需要对DTD进行引用，才能告知浏览器文档所使用的文档类型。\n<!-- more -->\n行内元素有哪些？块级元素有哪些？ 空(void)元素有那些？\n\n首先：CSS规范规定，每个元素都有display属性，确定该元素的类型，每个元素都有默认的display值，如div的display默认值为“block”，则为“块级”元素；span默认display属性值为“inline”，是“行内”元素。\n\n#### （1）行内元素有：\n  a b span img input select strong（强调的语气）\n#### （2）块级元素有：\n   div ul ol li dl dt dd h1 h2 h3 h4…p\n#### （3）常见的空元素：\n    <br> <hr> <img> <input> <link> <meta>\n    鲜为人知的是：\n    <area> <base> <col> <command> <embed> <keygen> <param> <source> <track> <wbr>\n### 页面导入样式时，使用link和@import有什么区别？\n\n（1）link属于XHTML标签，除了加载CSS外，还能用于定义RSS, 定义rel连接属性等作用；而@import是CSS提供的，只能用于加载CSS;\n\n（2）页面被加载的时，link会同时被加载，而@import引用的CSS会等到页面被加载完再加载;\n\n（3）import是CSS2.1 提出的，只在IE5以上才能被识别，而link是XHTML标签，无兼容问题;\n### 介绍一下你对浏览器内核的理解？\n\n主要分成两部分：渲染引擎(layout engineer或Rendering Engine)和JS引擎。\n\n**渲染引擎**：负责取得网页的内容（HTML、XML、图像等等）、整理讯息（例如加入CSS等），以及计算网页的显示方式，然后会输出至显示器或打印机。浏览器的内核的不同对于网页的语法解释会有不同，所以渲染的效果也不相同。所有网页浏览器、电子邮件客户端以及其它需要编辑、显示网络内容的应用程序都需要内核。\n\n**JS引擎**：解析和执行javascript来实现网页的动态效果。\n\n最开始渲染引擎和JS引擎并没有区分的很明确，后来JS引擎越来越独立，内核就倾向于只指渲染引擎。\n\n#### 常见的浏览器内核有哪些？\n\nTrident内核：IE,MaxThon,TT,The World,360,搜狗浏览器等。[又称MSHTML]\nGecko内核：Netscape6及以上版本，FF,MozillaSuite/SeaMonkey等\nPresto内核：Opera7及以上。      [Opera内核原为：Presto，现为：Blink;]\nWebkit内核：Safari,Chrome等。   [ Chrome的：Blink（WebKit的分支）]\n\n### html5有哪些新特性、移除了那些元素？如何处理HTML5新标签的浏览器兼容问题？如何区分 HTML 和 HTML5？\n\n* HTML5 现在已经不是 SGML 的子集，主要是关于图像，位置，存储，多任务等功能的增加。\n      绘画 canvas;\n      用于媒介回放的 video 和 audio 元素;\n      本地离线存储 localStorage 长期存储数据，浏览器关闭后数据不丢失;\n      sessionStorage 的数据在浏览器关闭后自动删除;\n      语意化更好的内容元素，比如 article、footer、header、nav、section;\n      表单控件，calendar、date、time、email、url、search;\n      新的技术webworker, websocket, Geolocation;\n\n  移除的元素：\n      纯表现的元素：basefont，big，center，font, s，strike，tt，u;\n      对可用性产生负面影响的元素：frame，frameset，noframes；\n\n* 支持HTML5新标签：\n     IE8/IE7/IE6支持通过document.createElement方法产生的标签，\n     可以利用这一特性让这些浏览器支持HTML5新标签，\n     浏览器支持新标签后，还需要添加标签默认的样式。\n\n     当然也可以直接使用成熟的框架、比如html5shim;\n     <!--[if lt IE 9]>\n        <script> src=\"http://html5shim.googlecode.com/svn/trunk/html5.js\"</script>\n     <![endif]-->\n\n* 如何区分HTML5： DOCTYPE声明\\新增的结构元素\\功能元素\n简述一下你对HTML语义化的理解？\n\n用正确的标签做正确的事情。\nhtml语义化让页面的内容结构化，结构更清晰，便于对浏览器、搜索引擎解析;\n即使在没有样式CSS情况下也以一种文档格式显示，并且是容易阅读的;\n搜索引擎的爬虫也依赖于HTML标记来确定上下文和各个关键字的权重，利于SEO;\n使阅读源代码的人对网站更容易将网站分块，便于阅读维护理解。\nHTML5的离线储存怎么使用，工作原理能不能解释一下？\n\n在用户没有与因特网连接时，可以正常访问站点或应用，在用户与因特网连接时，更新用户机器上的缓存文件。\n原理：HTML5的离线存储是基于一个新建的.appcache文件的缓存机制(不是存储技术)，通过这个文件上的解析清单离线存储资源，这些资源就会像cookie一样被存储了下来。之后当网络在处于离线状态下时，浏览器会通过被离线存储的数据进行页面展示。\n\n\n如何使用：\n1、页面头部像下面一样加入一个manifest的属性；\n2、在cache.manifest文件的编写离线存储的资源；\n    CACHE MANIFEST\n    #v0.11\n    CACHE:\n    js/app.js\n    css/style.css\n    NETWORK:\n    resourse/logo.png\n    FALLBACK:\n    / /offline.html\n3、在离线状态时，操作window.applicationCache进行需求实现。\n详细的使用请参考：[有趣的HTML5：离线存储](https://segmentfault.com/a/1190000000732617)\n\n### 浏览器是怎么对HTML5的离线储存资源进行管理和加载的呢？\n\n在线的情况下，浏览器发现html头部有manifest属性，它会请求manifest文件，如果是第一次访问app，那么浏览器就会根据manifest文件的内容下载相应的资源并且进行离线存储。如果已经访问过app并且资源已经离线存储了，那么浏览器就会使用离线的资源加载页面，然后浏览器会对比新的manifest文件与旧的manifest文件，如果文件没有发生改变，就不做任何操作，如果文件改变了，那么就会重新下载文件中的资源并进行离线存储。\n离线的情况下，浏览器就直接使用离线存储的资源。\n详细的使用请参考：有趣的HTML5：离线存储\n\n### 请描述一下 cookies，sessionStorage 和 localStorage 的区别？\n\ncookie是网站为了标示用户身份而储存在用户本地终端（Client Side）上的数据（通常经过加密）。\ncookie数据始终在同源的http请求中携带（即使不需要），记会在浏览器和服务器间来回传递。\nsessionStorage和localStorage不会自动把数据发给服务器，仅在本地保存。\n\n* 存储大小：\n    cookie数据大小不能超过4k。\n    sessionStorage和localStorage 虽然也有存储大小的限制，但比cookie大得多，可以达到5M或更大。\n\n* 有期时间：\n    localStorage    存储持久数据，浏览器关闭后数据不丢失除非主动删除数据；\n    sessionStorage  数据在当前浏览器窗口关闭后自动删除。\n    cookie          设置的cookie过期时间之前一直有效，即使窗口或浏览器关闭。\n### iframe有哪些缺点？\n\n1. iframe会阻塞主页面的Onload事件；\n2. 搜索引擎的检索程序无法解读这种页面，不利于SEO;\n3. iframe和主页面共享连接池，而浏览器对相同域的连接有限制，所以会影响页面的并行加载。\n4. 使用iframe之前需要考虑这两个缺点。如果需要使用iframe，最好是通过javascript\n动态给iframe添加src属性值，这样可以绕开以上两个问题。\n\n### Label的作用是什么？是怎么用的？\n\nlabel标签来定义表单控制间的关系,当用户选择该标签时，浏览器会自动将焦点转到和标签相关的表单控件上。\n\n`<label for=\"Name\">Number:</label>\n<input type=“text“name=\"Name\" id=\"Name\"/>`\n\n`<label>Date:<input type=\"text\" name=\"B\"/></label>`\n### HTML5的form如何关闭自动完成功能？\n\n给不想要提示的 form 或某个 input 设置为 autocomplete=off。\n\n### 如何实现浏览器内多个标签页之间的通信? (阿里)\n\nWebSocket、SharedWorker；\n也可以调用localstorge、cookies等本地存储方式；\n\nlocalstorge另一个浏览上下文里被添加、修改或删除时，它都会触发一个事件，\n我们通过监听事件，控制它的值来进行页面信息通信；\n注意quirks：Safari 在无痕模式下设置localstorge值时会抛出 QuotaExceededError 的异常；\n\n### webSocket如何兼容低浏览器？(阿里)\n\nAdobe Flash Socket 、\nActiveX HTMLFile (IE) 、\n基于 multipart 编码发送 XHR 、\n基于长轮询的 XHR\n页面可见性（Page Visibility API） 可以有哪些用途？\n\n通过 visibilityState 的值检测页面当前是否可见，以及打开网页的时间等;\n在页面被切换到其他后台进程的时候，自动暂停音乐或视频的播放；\n\n### 如何在页面上实现一个圆形的可点击区域？\n\n1、map+area或者svg\n2、border-radius\n3、纯js实现 需要求一个点在不在圆上简单算法、获取鼠标坐标等等\n实现不使用 border 画出1px高的线，在不同浏览器的标准模式与怪异模式下都能保持一致的效果。\n\n`<div style=\"height:1px;overflow:hidden;background:red\"></div>`\n\n### 网页验证码是干嘛的，是为了解决什么安全问题。\n\n区分用户是计算机还是人的公共全自动程序。可以防止恶意破解密码、刷票、论坛灌水；\n有效防止黑客对某一个特定注册用户用特定程序暴力破解方式进行不断的登陆尝试。\n\n### title与h1的区别、b与strong的区别、i与em的区别？\n\ntitle属性没有明确意义只表示是个标题，H1则表示层次明确的标题，对页面信息的抓取也有很大的影响；\n\nstrong是标明重点内容，有语气加强的含义，使用阅读设备阅读网络时：<strong>会重读，而<B>是展示强调内容。\n\ni内容展示为斜体，em表示强调的文本；\n\nPhysical Style Elements -- 自然样式标签\nb, i, u, s, pre\nSemantic Style Elements -- 语义样式标签\nstrong, em, ins, del, code\n应该准确使用语义样式标签, 但不能滥用, 如果不能确定时首选使用自然样式标签。\nCSS\n\n### 介绍一下标准的CSS的盒子模型？低版本IE的盒子模型有什么不同的？\n\n（1）有两种， IE 盒子模型、W3C 盒子模型；\n（2）盒模型： 内容(content)、填充(padding)、边界(margin)、 边框(border)；\n（3）区  别： IE的content部分把 border 和 padding计算了进去;\n#### CSS选择符有哪些？哪些属性可以继承？\n\n*   1.id选择器（ # myid）\n    2.类选择器（.myclassname）\n    3.标签选择器（div, h1, p）\n    4.相邻选择器（h1 + p）\n    5.子选择器（ul > li）\n    6.后代选择器（li a）\n    7.通配符选择器（ * ）\n    8.属性选择器（a[rel = \"external\"]）\n    9.伪类选择器（a:hover, li:nth-child）\n\n*   可继承的样式： font-size font-family color, UL LI DL DD DT;\n\n*   不可继承的样式：border padding margin width height ;\nCSS优先级算法如何计算？\n\n*   优先级就近原则，同权重情况下样式定义最近者为准;\n\n*   载入样式以最后载入的定位为准;\n\n优先级为:\n   !important >  id > class > tag\n    important 比 内联优先级高\n### CSS3新增伪类有那些？\n\n    举例：\n    p:first-of-type 选择属于其父元素的首个 <p> 元素的每个 <p> 元素。\n    p:last-of-type  选择属于其父元素的最后 <p> 元素的每个 <p> 元素。\n    p:only-of-type  选择属于其父元素唯一的 <p> 元素的每个 <p> 元素。\n    p:only-child        选择属于其父元素的唯一子元素的每个 <p> 元素。\n    p:nth-child(2)  选择属于其父元素的第二个子元素的每个 <p> 元素。\n\n    :after          在元素之前添加内容,也可以用来做清除浮动。\n    :before         在元素之后添加内容\n    :enabled        \n    :disabled       控制表单控件的禁用状态。\n    :checked        单选框或复选框被选中。\n### 如何居中div？如何居中一个浮动元素？如何让绝对定位的div居中？\n\n给div设置一个宽度，然后添加margin:0 auto属性\n```css\ndiv{\n    width:200px;\n    margin:0 auto;\n }\n ```\n#### 居中一个浮动元素\n\n  确定容器的宽高 宽500 高 300 的层\n  设置层的外边距\n```css\n .div {\n      width:500px ; height:300px;//高度可以不设\n      margin: -150px 0 0 -250px;\n      position:relative;         //相对定位\n      background-color:pink;     //方便看效果\n      left:50%;\n      top:50%;\n }\n ```\n#### 让绝对定位的div居中\n```css\n  .div{\n    position: absolute;\n    width: 1200px;\n    background: none;\n    margin: 0 auto;\n    top: 0;\n    left: 0;\n    bottom: 0;\n    right: 0;\n  }\n  ```\n### display有哪些值？说明他们的作用。\n\n  block         象块类型元素一样显示。\n  none          缺省值。象行内元素类型一样显示。\n  inline-block  象行内元素一样显示，但其内容象块类型元素一样显示。\n  list-item     象块类型元素一样显示，并添加样式列表标记。\n  table         此元素会作为块级表格来显示\n  inherit       规定应该从父元素继承 display 属性的值\n\n### position的值relative和absolute定位原点是？\n\n  absolute\n    生成绝对定位的元素，相对于值不为 static的第一个父元素进行定位。\n\n  fixed （老IE不支持）\n    生成绝对定位的元素，相对于浏览器窗口进行定位。\n\n  relative\n    生成相对定位的元素，相对于其正常位置进行定位。\n\n  static\n    默认值。没有定位，元素出现在正常的流中（忽略 top, bottom, left, right z-index 声明）。\n\n  inherit\n    规定从父元素继承 position 属性的值。\n\n### CSS3有哪些新特性？\n\n  新增各种CSS选择器  （: not(.input)：所有 class 不是“input”的节点）\n  圆角           （border-radius:8px）\n  多列布局        （multi-column layout）\n  阴影和反射        （Shadow\\Reflect）\n  文字特效      （text-shadow、）\n  文字渲染      （Text-decoration）\n  线性渐变      （gradient）\n  旋转          （transform）\n  增加了旋转,缩放,定位,倾斜,动画，多背景\n  transform:\\scale(0.85,0.90)\\ translate(0px,-30px)\\ skew(-9deg,0deg)\\Animation:\n请解释一下CSS3的Flexbox（弹性盒布局模型）,以及适用场景？\n\n .\n### 用纯CSS创建一个三角形的原理是什么？\n\n把上、左、右三条边隐藏掉（颜色设为 transparent）\n```css\n#demo {\n  width: 0;\n  height: 0;\n  border-width: 20px;\n  border-style: solid;\n  border-color: transparent transparent red transparent;\n}\n```\n### 一个满屏 品 字布局 如何设计?\n\n简单的方式：\n    上面的div宽100%，\n    下面的两个div分别宽50%，\n    然后用float或者inline使其不换行即可\n\n### 经常遇到的浏览器的兼容性有哪些？原因，解决方法是什么，常用hack的技巧 ？\n\n* png24位的图片在iE6浏览器上出现背景，解决方案是做成PNG8.\n\n* 浏览器默认的margin和padding不同。解决方案是加一个全局的*{margin:0;padding:0;}来统一。\n\n* IE6双边距bug:块属性标签float后，又有横行的margin情况下，在ie6显示margin比设置的大。\n\n  浮动ie产生的双倍距离 #box{ float:left; width:10px; margin:0 0 0 100px;}\n\n  这种情况之下IE会产生20px的距离，解决方案是在float的标签样式控制中加入 ——_display:inline;将其转化为行内属性。(_这个符号只有ie6会识别)\n\n  渐进识别的方式，从总体中逐渐排除局部。\n\n  首先，巧妙的使用“\\9”这一标记，将IE游览器从所有情况中分离出来。\n  接着，再次使用“+”将IE8和IE7、IE6分离开来，这样IE8已经独立识别。\n\n  css\n      .bb{\n          background-color:#f1ee18;/*所有识别*/\n          .background-color:#00deff\\9; /*IE6、7、8识别*/\n          +background-color:#a200ff;/*IE6、7识别*/\n          _background-color:#1e0bd1;/*IE6识别*/\n      }\n\n*  IE下,可以使用获取常规属性的方法来获取自定义属性,\n   也可以使用getAttribute()获取自定义属性;\n   Firefox下,只能使用getAttribute()获取自定义属性。\n   解决方法:统一通过getAttribute()获取自定义属性。\n\n*  IE下,even对象有x,y属性,但是没有pageX,pageY属性;\n   Firefox下,event对象有pageX,pageY属性,但是没有x,y属性。\n\n*  解决方法：（条件注释）缺点是在IE浏览器下可能会增加额外的HTTP请求数。\n\n*  Chrome 中文界面下默认会将小于 12px 的文本强制按照 12px 显示,\n   可通过加入 CSS 属性 -webkit-text-size-adjust: none; 解决。\n\n### 超链接访问过后hover样式就不出现了 被点击访问过的超链接样式不在具有hover和active了解决方法是改变CSS属性的排列顺序:\n\nL-V-H-A :  a:link {} a:visited {} a:hover {} a:active {}\n\n### li与li之间有看不见的空白间隔是什么原因引起的？有什么解决办法？\n\n行框的排列会受到中间空白（回车\\空格）等的影响，因为空格也属于字符,这些空白也会被应用样式，占据空间，所以会有间隔，把字符大小设为0，就没有空格了。\n\n### 为什么要初始化CSS样式。\n\n- 因为浏览器的兼容问题，不同浏览器对有些标签的默认值是不同的，如果没对CSS初始化往往会出现浏览器之间的页面显示差异。\n\n- 当然，初始化样式会对SEO有一定的影响，但鱼和熊掌不可兼得，但力求影响最小的情况下初始化。\n\n最简单的初始化方法： * {padding: 0; margin: 0;} （强烈不建议）\n\n淘宝的样式初始化代码：\n```css\nbody, h1, h2, h3, h4, h5, h6, hr, p, blockquote, dl, dt, dd, ul, ol, li, pre, form, fieldset, legend, button, input, textarea, th, td { margin:0; padding:0; }\nbody, button, input, select, textarea { font:12px/1.5tahoma, arial, \\5b8b\\4f53; }\nh1, h2, h3, h4, h5, h6{ font-size:100%; }\naddress, cite, dfn, em, var { font-style:normal; }\ncode, kbd, pre, samp { font-family:couriernew, courier, monospace; }\nsmall{ font-size:12px; }\nul, ol { list-style:none; }\na { text-decoration:none; }\na:hover { text-decoration:underline; }\nsup { vertical-align:text-top; }\nsub{ vertical-align:text-bottom; }\nlegend { color:#000; }\nfieldset, img { border:0; }\nbutton, input, select, textarea { font-size:100%; }\ntable { border-collapse:collapse; border-spacing:0; }\n```\n### absolute的containing block(容器块)计算方式跟正常流有什么不同？\n\n无论属于哪种，都要先找到其祖先元素中最近的 position 值不为 static 的元素，然后再判断：\n1、若此元素为 inline 元素，则 containing block 为能够包含这个元素生成的第一个和最后一个 inline box 的 padding box (除 margin, border 外的区域) 的最小矩形；\n2、否则,则由这个祖先元素的 padding box 构成。\n如果都找不到，则为 initial containing block。\n\n补充：\n1. static(默认的)/relative：简单说就是它的父元素的内容框（即去掉padding的部分）\n2. absolute: 向上找最近的定位为absolute/relative的元素\n3. fixed: 它的containing block一律为根元素(html/body)，根元素也是initial containing block\n\n### CSS里的visibility属性有个collapse属性值是干嘛用的？在不同浏览器下以后什么区别？\n\nposition跟display、margin collapse、overflow、float这些特性相互叠加后会怎么样？\n\n对BFC规范(块级格式化上下文：block formatting context)的理解？\n\n（W3C CSS 2.1 规范中的一个概念,它是一个独立容器，决定了元素如何对其内容进行定位,以及与其他元素的关系和相互作用。）\n 一个页面是由很多个 Box 组成的,元素的类型和 display 属性,决定了这个 Box 的类型。\n 不同类型的 Box,会参与不同的 Formatting Context（决定如何渲染文档的容器）,因此Box内的元素会以不同的方式渲染,也就是说BFC内部的元素和外部的元素不会互相影响。\ncss定义的权重\n\n以下是权重的规则：标签的权重为1，class的权重为10，id的权重为100，以下例子是演示各种定义的权重值：\n\n/*权重为1*/\ndiv{\n}\n/*权重为10*/\n.class1{\n}\n/*权重为100*/\n#id1{\n}\n/*权重为100+1=101*/\n#id1 div{\n}\n/*权重为10+1=11*/\n.class1 div{\n}\n/*权重为10+10+1=21*/\n.class1 .class2 div{\n}\n\n如果权重相同，则最后定义的样式会起作用，但是应该避免这种情况出现\n请解释一下为什么会出现浮动和什么时候需要清除浮动？清除浮动的方式\n\n移动端的布局用过媒体查询吗？\n\n使用 CSS 预处理器吗？喜欢那个？\n\nSASS (SASS、LESS没有本质区别，只因为团队前端都是用的SASS)\nCSS优化、提高性能的方法有哪些？\n\n浏览器是怎样解析CSS选择器的？\n\n在网页中的应该使用奇数还是偶数的字体？为什么呢？\n\nmargin和padding分别适合什么场景使用？\n\n抽离样式模块怎么写，说出思路，有无实践经验？[阿里航旅的面试题]\n\n元素竖向的百分比设定是相对于容器的高度吗？\n\n### 全屏滚动的原理是什么？用到了CSS的那些属性？\n\n### 什么是响应式设计？响应式设计的基本原理是什么？如何兼容低版本的IE？\n\n视差滚动效果，如何给每页做不同的动画？（回到顶部，向下滑动要再次出现，和只出现一次分别怎么做？）\n\n::before 和 :after中双冒号和单冒号 有什么区别？解释一下这2个伪元素的作用。\n\n如何修改chrome记住密码后自动填充表单的黄色背景 ？\n\n你对line-height是如何理解的？\n\n设置元素浮动后，该元素的display值是多少？（自动变成display:block）\n\n怎么让Chrome支持小于12px 的文字？\n\n让页面里的字体变清晰，变细用CSS怎么做？（-webkit-font-smoothing: antialiased;）\n\nfont-style属性可以让它赋值为“oblique” oblique是什么意思？\n\nposition:fixed;在android下无效怎么处理？\n\n如果需要手动写动画，你认为最小时间间隔是多久，为什么？（阿里）\n\n多数显示器默认频率是60Hz，即1秒刷新60次，所以理论上最小间隔为1/60＊1000ms ＝ 16.7ms\ndisplay:inline-block 什么时候会显示间隙？(携程)\n\n移除空格、使用margin负值、使用font-size:0、letter-spacing、word-spacing\noverflow: scroll时不能平滑滚动的问题怎么处理？\n\n有一个高度自适应的div，里面有两个div，一个高度100px，希望另一个填满剩下的高度。\n\npng、jpg、gif 这些图片格式解释一下，分别什么时候用。有没有了解过webp？\n\n### 什么是Cookie 隔离？（或者说：请求资源的时候不要让它带cookie怎么做）\n\n如果静态文件都放在主域名下，那静态文件请求的时候都带有的cookie的数据提交给server的，非常浪费流量，\n所以不如隔离开。\n\n因为cookie有域的限制，因此不能跨域提交请求，故使用非主要域名的时候，请求头中就不会带有cookie数据，\n这样可以降低请求头的大小，降低请求时间，从而达到降低整体请求延时的目的。\n\n同时这种方式不会将cookie传入Web Server，也减少了Web Server对cookie的处理分析环节，\n提高了webserver的http请求的解析速度。\nstyle标签写在body后与body前有什么区别？\n\n### 什么是CSS 预处理器 / 后处理器？\n\n- 预处理器例如：LESS、Sass、Stylus，用来预编译Sass或less，增强了css代码的复用性，\n  还有层级、mixin、变量、循环、函数等，具有很方便的UI组件模块化开发能力，极大的提高工作效率。\n\n- 后处理器例如：PostCSS，通常被视为在完成的样式表中根据CSS规范处理CSS，让其更有效；目前最常做的\n  是给CSS属性添加浏览器私有前缀，实现跨浏览器兼容性的问题。\nJavaScript\n\n### 介绍js的基本数据类型\n\n Undefined、Null、Boolean、Number、String、Symbol(new in ECMAScript 2015)\n### 介绍js有哪些内置对象？\n\nObject 是 JavaScript 中所有对象的父对象\n\n数据封装类对象：Object、Array、Boolean、Number 和 String\n\n其他对象：Function、Arguments、Math、Date、RegExp、Error\n\n### 说几条写JavaScript的基本规范？\n\n1.不要在同一行声明多个变量。\n2.请使用 ===/!==来比较true/false或者数值\n3.使用对象字面量替代new Array这种形式\n4.不要使用全局函数。\n5.Switch语句必须带有default分支\n6.函数不应该有时候有返回值，有时候没有返回值。\n7.For循环必须使用大括号\n8.If语句必须使用大括号\n9.for-in循环中的变量 应该使用var关键字明确限定作用域，从而避免作用域污染。\n### JavaScript原型，原型链 ? 有什么特点？\n\n每个对象都会在其内部初始化一个属性，就是prototype(原型)，当我们访问一个对象的属性时，\n如果这个对象内部不存在这个属性，那么他就会去prototype里找这个属性，这个prototype又会有自己的prototype，\n于是就这样一直找下去，也就是我们平时所说的原型链的概念。\n关系：instance.constructor.prototype = instance.__proto__\n\n特点：\nJavaScript对象是通过引用来传递的，我们创建的每个新对象实体中并没有一份属于自己的原型副本。当我们修改原型时，与之相关的对象也会继承这一改变。\n\n\n 当我们需要一个属性的时，Javascript引擎会先看当前对象中是否有这个属性， 如果没有的话，\n 就会查找他的Prototype对象是否有这个属性，如此递推下去，一直检索到 Object 内建对象。\n    function Func(){}\n    Func.prototype.name = \"Sean\";\n    Func.prototype.getInfo = function() {\n      return this.name;\n    }\n    var person = new Func();//现在可以参考var person = Object.create(oldObject);\n    console.log(person.getInfo());//它拥有了Func的属性和方法\n    //\"Sean\"\n    console.log(Func.prototype);\n    // Func { name=\"Sean\", getInfo=function()}\n\n### JavaScript有几种类型的值？，你能画一下他们的内存图吗？\n\n栈：原始数据类型（Undefined，Null，Boolean，Number、String） \n堆：引用数据类型（对象、数组和函数）\n\n两种类型的区别是：存储位置不同；\n原始数据类型直接存储在栈(stack)中的简单数据段，占据空间小、大小固定，属于被频繁使用数据，所以放入栈中存储；\n引用数据类型存储在堆(heap)中的对象,占据空间大、大小不固定,如果存储在栈中，将会影响程序运行的性能；引用数据类型在栈中存储了指针，该指针指向堆中该实体的起始地址。当解释器寻找引用值时，会首先检索其\n在栈中的地址，取得地址后从堆中获得实体\nStated Clearly Image\n\n### Javascript如何实现继承？\n\n1、构造继承\n2、原型继承\n3、实例继承\n4、拷贝继承\n\n原型prototype机制或apply和call方法去实现较简单，建议使用构造函数与原型混合方式。\n        function Parent(){\n            this.name = 'wang';\n        }\n\n        function Child(){\n            this.age = 28;\n        }\n        Child.prototype = new Parent();//继承了Parent，通过原型\n\n        var demo = new Child();\n        alert(demo.age);\n        alert(demo.name);//得到被继承的属性\n\n### JavaScript继承的几种实现方式？\n\n参考：构造函数的继承，非构造函数的继承；\n\n### javascript创建对象的几种方式？\n\njavascript创建对象简单的说,无非就是使用内置对象或各种自定义对象，当然还可以用JSON；但写法有很多种，也能混合使用。\n\n\n1. 对象字面量的方式  \n\n```javascript\n    person={\n        firstname:\"Mark\",\n        lastname:\"Yun\",\n        age:25,\n        eyecolor:\"black\"\n        };\n ```\n\n2. 用function来模拟无参的构造函数\n```javascript\n    function Person(){}\n    var person=new Person();//定义一个function，如果使用new\"实例化\",该function可以看作是一个Class\n    person.name=\"Mark\";\n    person.age=\"25\";\n    person.work=function(){\n    alert(person.name+\" hello...\");\n    }\n    person.work();\n```\n\n3. 用function来模拟参构造函数来实现（用this关键字定义构造的上下文属性）\n```javascript\n    function Pet(name,age,hobby){\n       this.name=name;//this作用域：当前对象\n       this.age=age;\n       this.hobby=hobby;\n       this.eat=function(){\n          alert(\"我叫\"+this.name+\",我喜欢\"+this.hobby+\",是个程序员\");\n       }\n    }\n    var maidou =new Pet(\"麦兜\",25,\"coding\");//实例化、创建对象\n    maidou.eat();//调用eat方法\n```\n\n4. 用工厂方式来创建（内置对象）\n```javascript\n     var wcDog =new Object();\n     wcDog.name=\"旺财\";\n     wcDog.age=3;\n     wcDog.work=function(){\n       alert(\"我是\"+wcDog.name+\",汪汪汪......\");\n     }\n     wcDog.work();\n```\n\n5. 用原型方式来创建\n```javascript\n    function Dog(){\n     }\n     Dog.prototype.name=\"旺财\";\n     Dog.prototype.eat=function(){\n     alert(this.name+\"是个吃货\");\n     }\n     var wangcai =new Dog();\n     wangcai.eat();\n```\n\n6. 用混合方式来创建\n```javascript\n    function Car(name,price){\n      this.name=name;\n      this.price=price; \n    }\n     Car.prototype.sell=function(){\n       alert(\"我是\"+this.name+\"，我现在卖\"+this.price+\"万元\");\n      }\n    var camry =new Car(\"凯美瑞\",27);\n    camry.sell(); \n```\n### Javascript作用链域?\n\n全局函数无法查看局部函数的内部细节，但局部函数可以查看其上层的函数细节，直至全局细节。\n当需要从局部函数查找某一属性或方法时，如果当前作用域没有找到，就会上溯到上层作用域查找，\n直至全局函数，这种组织形式就是作用域链。\n谈谈This对象的理解。\n\nthis总是指向函数的直接调用者（而非间接调用者）；\n如果有new关键字，this指向new出来的那个对象；\n在事件中，this指向触发这个事件的对象，特殊的是，IE中的attachEvent中的this总是指向全局对象Window；\n### eval是做什么的？\n\n它的功能是把对应的字符串解析成JS代码并运行；\n应该避免使用eval，不安全，非常耗性能（2次，一次解析成js语句，一次执行）。\n由JSON字符串转换为JSON对象的时候可以用eval，var obj =eval('('+ str +')');\n### 什么是window对象? 什么是document对象?\n\n### null，undefined 的区别？\n\nnull        表示一个对象被定义了，值为“空值”；\nundefined   表示不存在这个值。\n\n\ntypeof undefined\n    //\"undefined\"\n    undefined :是一个表示\"无\"的原始值或者说表示\"缺少值\"，就是此处应该有一个值，但是还没有定义。当尝试读取时会返回 undefined； \n    例如变量被声明了，但没有赋值时，就等于undefined\n\ntypeof null\n    //\"object\"\n    null : 是一个对象(空对象, 没有任何属性和方法)；\n    例如作为函数的参数，表示该函数的参数不是对象；\n\n注意：\n    在验证null时，一定要使用　=== ，因为 == 无法分别 null 和　undefined\n\n\n再来一个例子：\n\n    null\n    Q：有张三这个人么？\n    A：有！\n    Q：张三有房子么？\n    A：没有！\n\n    undefined\n    Q：有张三这个人么？\n    A：没有！\n参考阅读：undefined与null的区别\n\n### 写一个通用的事件侦听器函数。\n```javascript\n    // event(事件)工具集，来源：github.com/markyun\n    markyun.Event = {\n        // 页面加载完成后\n        readyEvent : function(fn) {\n            if (fn==null) {\n                fn=document;\n            }\n            var oldonload = window.onload;\n            if (typeof window.onload != 'function') {\n                window.onload = fn;\n            } else {\n                window.onload = function() {\n                    oldonload();\n                    fn();\n                };\n            }\n        },\n        // 视能力分别使用dom0||dom2||IE方式 来绑定事件\n        // 参数： 操作的元素,事件名称 ,事件处理程序\n        addEvent : function(element, type, handler) {\n            if (element.addEventListener) {\n                //事件类型、需要执行的函数、是否捕捉\n                element.addEventListener(type, handler, false);\n            } else if (element.attachEvent) {\n                element.attachEvent('on' + type, function() {\n                    handler.call(element);\n                });\n            } else {\n                element['on' + type] = handler;\n            }\n        },\n        // 移除事件\n        removeEvent : function(element, type, handler) {\n            if (element.removeEventListener) {\n                element.removeEventListener(type, handler, false);\n            } else if (element.datachEvent) {\n                element.detachEvent('on' + type, handler);\n            } else {\n                element['on' + type] = null;\n            }\n        },\n        // 阻止事件 (主要是事件冒泡，因为IE不支持事件捕获)\n        stopPropagation : function(ev) {\n            if (ev.stopPropagation) {\n                ev.stopPropagation();\n            } else {\n                ev.cancelBubble = true;\n            }\n        },\n        // 取消事件的默认行为\n        preventDefault : function(event) {\n            if (event.preventDefault) {\n                event.preventDefault();\n            } else {\n                event.returnValue = false;\n            }\n        },\n        // 获取事件目标\n        getTarget : function(event) {\n            return event.target || event.srcElement;\n        },\n        // 获取event对象的引用，取到事件的所有信息，确保随时能使用event；\n        getEvent : function(e) {\n            var ev = e || window.event;\n            if (!ev) {\n                var c = this.getEvent.caller;\n                while (c) {\n                    ev = c.arguments[0];\n                    if (ev && Event == ev.constructor) {\n                        break;\n                    }\n                    c = c.caller;\n                }\n            }\n            return ev;\n        }\n    };\n```\n\n[\"1\", \"2\", \"3\"].map(parseInt) 答案是多少？\n\n [1, NaN, NaN] 因为 parseInt 需要两个参数 (val, radix)，\n 其中 radix 表示解析时用的基数。\n map 传了 3 个 (element, index, array)，对应的 radix 不合法导致解析失败。\n### 事件是？IE与火狐的事件机制有什么区别？ 如何阻止冒泡？\n\n 1. 我们在网页中的某个操作（有的操作对应多个事件）。例如：当我们点击一个按钮就会产生一个事件。是可以被 JavaScript 侦测到的行为。\n 2. 事件处理机制：IE是事件冒泡、Firefox同时支持两种事件模型，也就是：捕获型事件和冒泡型事件；\n 3. ev.stopPropagation();（旧ie的方法 ev.cancelBubble = true;）\n\n### 什么是闭包（closure），为什么要用它？\n\n闭包是指有权访问另一个函数作用域中变量的函数，创建闭包的最常见的方式就是在一个函数内创建另一个函数，通过另一个函数访问这个函数的局部变量,利用闭包可以突破作用链域，将函数内部的变量和方法传递到外部。\n\n闭包的特性：\n\n1.函数内再嵌套函数\n2.内部函数可以引用外层的参数和变量\n3.参数和变量不会被垃圾回收机制回收\n\n//li节点的onclick事件都能正确的弹出当前被点击的li索引\n <ul id=\"testUL\">\n    <li> index = 0</li>\n    <li> index = 1</li>\n    <li> index = 2</li>\n    <li> index = 3</li>\n</ul>\n<script type=\"text/javascript\">\n    var nodes = document.getElementsByTagName(\"li\");\n    for(i = 0;i<nodes.length;i+= 1){\n        nodes[i].onclick = function(){\n            console.log(i+1);//不用闭包的话，值每次都是4\n        }(i);\n    }\n</script>\n\n\n执行say667()后,say667()闭包内部变量会存在,而闭包内部函数的内部变量不会存在\n使得Javascript的垃圾回收机制GC不会收回say667()所占用的资源\n因为say667()的内部函数的执行需要依赖say667()中的变量\n这是对闭包作用的非常直白的描述\n\n  function say667() {\n    // Local variable that ends up within closure\n    var num = 666;\n    var sayAlert = function() {\n        alert(num);\n    }\n    num++;\n    return sayAlert;\n}\n\n var sayAlert = say667();\n sayAlert()//执行结果应该弹出的667\njavascript 代码中的\"use strict\";是什么意思 ? 使用它区别是什么？\n\nuse strict是一种ECMAscript 5 添加的（严格）运行模式,这种模式使得 Javascript 在更严格的条件下运行,\n\n使JS编码更加规范化的模式,消除Javascript语法的一些不合理、不严谨之处，减少一些怪异行为。\n默认支持的糟糕特性都会被禁用，比如不能用with，也不能在意外的情况下给全局变量赋值;\n全局变量的显示声明,函数必须声明在顶层，不允许在非函数代码块内声明函数,arguments.callee也不允许使用；\n消除代码运行的一些不安全之处，保证代码运行的安全,限制函数中的arguments修改，严格模式下的eval函数的行为和非严格模式的也不相同;\n\n提高编译器效率，增加运行速度；\n为未来新版本的Javascript标准化做铺垫。\n如何判断一个对象是否属于某个类？\n\n  使用instanceof （待完善）\n   if(a instanceof Person){\n       alert('yes');\n   }\nnew操作符具体干了什么呢?\n\n     1、创建一个空对象，并且 this 变量引用该对象，同时还继承了该函数的原型。\n     2、属性和方法被加入到 this 引用的对象中。\n     3、新创建的对象由 this 所引用，并且最后隐式的返回 this 。\n\nvar obj  = {};\nobj.__proto__ = Base.prototype;\nBase.call(obj);\n用原生JavaScript的实现过什么功能吗？\n\n### Javascript中，有一个函数，执行时对象查找时，永远不会去查找原型，这个函数是？\n\nhasOwnProperty\n\njavaScript中hasOwnProperty函数方法是返回一个布尔值，指出一个对象是否具有指定名称的属性。此方法无法检查该对象的原型链中是否具有该属性；该属性必须是对象本身的一个成员。\n使用方法：\nobject.hasOwnProperty(proName)\n其中参数object是必选项。一个对象的实例。\nproName是必选项。一个属性名称的字符串值。\n\n如果 object 具有指定名称的属性，那么JavaScript中hasOwnProperty函数方法返回 true，反之则返回 false。\n### JSON 的了解？\n\nJSON(JavaScript Object Notation) 是一种轻量级的数据交换格式。\n它是基于JavaScript的一个子集。数据格式简单, 易于读写, 占用带宽小\n如：{\"age\":\"12\", \"name\":\"back\"}\n\nJSON字符串转换为JSON对象:\nvar obj =eval('('+ str +')');\nvar obj = str.parseJSON();\nvar obj = JSON.parse(str);\n\nJSON对象转换为JSON字符串：\nvar last=obj.toJSONString();\nvar last=JSON.stringify(obj);\n[].forEach.call($$(\"*\"),function(a){a.style.outline=\"1px solid #\"+(~~(Math.random()*(1<<24))).toString(16)}) 能解释一下这段代码的意思吗？\n\n### js延迟加载的方式有哪些？\n\ndefer和async、动态创建DOM方式（用得最多）、按需异步载入js\nAjax 是什么? 如何创建一个Ajax？\n\najax的全称：Asynchronous Javascript And XML。\n异步传输+js+xml。\n所谓异步，在这里简单地解释就是：向服务器发送请求的时候，我们不必等待结果，而是可以同时做其他的事情，等到有了结果它自己会根据设定进行后续操作，与此同时，页面是不会发生整页刷新的，提高了用户体验。\n\n(1)创建XMLHttpRequest对象,也就是创建一个异步调用对象\n(2)创建一个新的HTTP请求,并指定该HTTP请求的方法、URL及验证信息\n(3)设置响应HTTP请求状态变化的函数\n(4)发送HTTP请求\n(5)获取异步调用返回的数据\n(6)使用JavaScript和DOM实现局部刷新\n同步和异步的区别?\n\n同步的概念应该是来自于OS中关于同步的概念:不同进程为协同完成某项工作而在先后次序上调整(通过阻塞,唤醒等方式).同步强调的是顺序性.谁先谁后.异步则不存在这种顺序性.\n\n同步：浏览器访问服务器请求，用户看得到页面刷新，重新发请求,等请求完，页面刷新，新内容出现，用户看到新内容,进行下一步操作。\n\n异步：浏览器访问服务器请求，用户正常操作，浏览器后端进行请求。等请求完，页面不刷新，新内容也会出现，用户看到新内容。\n\n\n### 如何解决跨域问题?\n\njsonp、 iframe、window.name、window.postMessage、服务器上设置代理页面\n页面编码和被请求的资源编码如果不一致如何处理？\n\n### 模块化开发怎么做？\n\n立即执行函数,不暴露私有成员\n\n    var module1 = (function(){\n    　　　　var _count = 0;\n    　　　　var m1 = function(){\n    　　　　　　//...\n    　　　　};\n    　　　　var m2 = function(){\n    　　　　　　//...\n    　　　　};\n    　　　　return {\n    　　　　　　m1 : m1,\n    　　　　　　m2 : m2\n    　　　　};\n    　　})();\n（待完善）\n\n### AMD（Modules/Asynchronous-Definition）、CMD（Common Module Definition）规范区别？\n\nAMD 规范在这里：https://github.com/amdjs/amdjs-api/wiki/AMD\n\nCMD 规范在这里：https://github.com/seajs/seajs/issues/242\nAsynchronous Module Definition，异步模块定义，所有的模块将被异步加载，模块加载不影响后面语句运行。所有依赖某些模块的语句均放置在回调函数中。\n\n 区别：\n\n    1. 对于依赖的模块，AMD 是提前执行，CMD 是延迟执行。不过 RequireJS 从 2.0 开始，也改成可以延迟执行（根据写法不同，处理方式不同）。CMD 推崇 as lazy as possible.\n    2. CMD 推崇依赖就近，AMD 推崇依赖前置。看代码：\n\n// CMD\ndefine(function(require, exports, module) {\n    var a = require('./a')\n    a.doSomething()\n    // 此处略去 100 行\n    var b = require('./b') // 依赖可以就近书写\n    b.doSomething()\n    // ...\n})\n\n// AMD 默认推荐\ndefine(['./a', './b'], function(a, b) { // 依赖必须一开始就写好\n    a.doSomething()\n    // 此处略去 100 行\n    b.doSomething()\n    // ...\n})\n### requireJS的核心原理是什么？（如何动态加载的？如何避免多次加载的？如何 缓存的？）\n\n谈一谈你对ECMAScript6的了解？\n\nECMAScript6 怎么写class么，为什么会出现class这种东西?\n\n异步加载JS的方式有哪些？\n\n  (1) defer，只支持IE\n\n  (2) async：\n\n  (3) 创建script，插入到DOM中，加载完毕后callBack\ndocumen.write和 innerHTML的区别\n\ndocument.write只能重绘整个页面\n\ninnerHTML可以重绘页面的一部分\nDOM操作——怎样添加、移除、移动、复制、创建和查找节点?\n\n（1）创建新节点\n  createDocumentFragment()    //创建一个DOM片段\n  createElement()   //创建一个具体的元素\n  createTextNode()   //创建一个文本节点\n（2）添加、移除、替换、插入\n  appendChild()\n  removeChild()\n  replaceChild()\n  insertBefore() //在已有的子节点前插入一个新的子节点\n（3）查找\n  getElementsByTagName()    //通过标签名称\n  getElementsByName()    //通过元素的Name属性的值(IE容错能力较强，会得到一个数组，其中包括id等于name值的)\n  getElementById()    //通过元素Id，唯一性\n.call() 和 .apply() 的区别？\n\n  例子中用 add 来替换 sub，add.call(sub,3,1) == add(3,1) ，所以运行结果为：alert(4);\n\n  注意：js 中的函数其实是对象，函数名是对 Function 对象的引用。\n\n    function add(a,b)\n    {\n        alert(a+b);\n    }\n\n    function sub(a,b)\n    {\n        alert(a-b);\n    }\n\n    add.call(sub,3,1);\n数组和对象有哪些原生方法，列举一下？\n\nJS 怎么实现一个类。怎么实例化这个类\n\nJavaScript中的作用域与变量声明提升？\n\n### 如何编写高性能的Javascript？\n\n### 那些操作会造成内存泄漏？\n\n### JQuery的源码看过吗？能不能简单概况一下它的实现原理？\n\njQuery.fn的init方法返回的this指的是什么对象？为什么要返回this？\n\njquery中如何将数组转化为json字符串，然后再转化回来？\n\njQuery 的属性拷贝(extend)的实现原理是什么，如何实现深拷贝？\n\njquery.extend 与 jquery.fn.extend的区别？\n\njQuery 的队列是如何实现的？队列可以用在哪些地方？\n\n谈一下Jquery中的bind(),live(),delegate(),on()的区别？\n\nJQuery一个对象可以同时绑定多个事件，这是如何实现的？\n\n是否知道自定义事件。jQuery里的fire函数是什么意思，什么时候用？\n\njQuery 是通过哪个方法和 Sizzle 选择器结合的？（jQuery.fn.find()进入Sizzle）\n\n针对 jQuery性能的优化方法？\n\nJquery与jQuery UI 有啥区别？\n\n*jQuery是一个js库，主要提供的功能是选择器，属性修改和事件绑定等等。\n\n*jQuery UI则是在jQuery的基础上，利用jQuery的扩展性，设计的插件。\n 提供了一些常用的界面元素，诸如对话框、拖动行为、改变大小行为等等\nJQuery的源码看过吗？能不能简单说一下它的实现原理？\n\njquery 中如何将数组转化为json字符串，然后再转化回来？\n\njQuery中没有提供这个功能，所以你需要先编写两个jQuery的扩展：\n\n    $.fn.stringifyArray = function(array) {\n        return JSON.stringify(array)\n    }\n\n    $.fn.parseArray = function(array) {\n        return JSON.parse(array)\n    }\n\n    然后调用：\n    $(\"\").stringifyArray(array)\njQuery和Zepto的区别？各自的使用场景？\n\n针对 jQuery 的优化方法？\n\n*基于Class的选择性的性能相对于Id选择器开销很大，因为需遍历所有DOM元素。\n\n*频繁操作的DOM，先缓存起来再操作。用Jquery的链式调用更好。\n 比如：var str=$(\"a\").attr(\"href\");\n\n*for (var i = size; i < arr.length; i++) {}\n for 循环每一次循环都查找了数组 (arr) 的.length 属性，在开始循环的时候设置一个变量来存储这个数字，可以让循环跑得更快：\n for (var i = size, length = arr.length; i < length; i++) {}\nZepto的点透问题如何解决？\n\njQueryUI如何自定义组件?\n\n需求：实现一个页面操作不会整页刷新的网站，并且能在浏览器前进、后退时正确响应。给出你的技术实现方案？\n\n如何判断当前脚本运行在浏览器还是node环境中？（阿里）\n\n通过判断Global对象是否为window，如果不为window，当前脚本没有运行在浏览器中\n移动端最小触控区域是多大？\n\njQuery 的 slideUp动画 ，如果目标元素是被外部事件驱动, 当鼠标快速地连续触发外部元素事件, 动画会滞后的反复执行，该如何处理呢?\n\n把 Script 标签 放在页面的最底部的body封闭之前 和封闭之后有什么区别？浏览器会如何解析它们？\n\n移动端的点击事件的有延迟，时间是多久，为什么会有？ 怎么解决这个延时？（click 有 300ms 延迟,为了实现safari的双击事件的设计，浏览器要知道你是不是要双击操作。）\n\n知道各种JS框架(Angular, Backbone, Ember, React, Meteor, Knockout...)么? 能讲出他们各自的优点和缺点么?\n\nUnderscore 对哪些 JS 原生对象进行了扩展以及提供了哪些好用的函数方法？\n\n解释JavaScript中的作用域与变量声明提升？\n\n那些操作会造成内存泄漏？\n\n内存泄漏指任何对象在您不再拥有或需要它之后仍然存在。\n垃圾回收器定期扫描对象，并计算引用了每个对象的其他对象的数量。如果一个对象的引用数量为 0（没有其他对象引用过该对象），或对该对象的惟一引用是循环的，那么该对象的内存即可回收。\n\nsetTimeout 的第一个参数使用字符串而非函数的话，会引发内存泄漏。\n闭包、控制台日志、循环（在两个对象彼此引用且彼此保留时，就会产生一个循环）\nJQuery一个对象可以同时绑定多个事件，这是如何实现的？\n\nNode.js的适用场景？\n\n(如果会用node)知道route, middleware, cluster, nodemon, pm2, server-side rendering么?\n\n解释一下 Backbone 的 MVC 实现方式？\n\n什么是“前端路由”?什么时候适合使用“前端路由”? “前端路由”有哪些优点和缺点?\n\n知道什么是webkit么? 知道怎么用浏览器的各种工具来调试和debug代码么?\n\n如何测试前端代码么? 知道BDD, TDD, Unit Test么? 知道怎么测试你的前端工程么(mocha, sinon, jasmin, qUnit..)?\n\n前端templating(Mustache, underscore, handlebars)是干嘛的, 怎么用?\n\n简述一下 Handlebars 的基本用法？\n\n简述一下 Handlerbars 的对模板的基本处理流程， 如何编译的？如何缓存的？\n\n用js实现千位分隔符?(来源：前端农民工，提示：正则+replace)\n\nfunction commafy(num) {\n     num = num + '';\n     var reg = /(-?d+)(d{3})/;\n\n    if(reg.test(num)){\n     num = num.replace(reg, '$1,$2');\n    }\n    return num;\n}\n检测浏览器版本版本有哪些方式？\n\n功能检测、userAgent特征检测\n\n比如：navigator.userAgent\n//\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_2) AppleWebKit/537.36\n  (KHTML, like Gecko) Chrome/41.0.2272.101 Safari/537.36\"\nWhat is a Polyfill?\n\npolyfill 是“在旧版浏览器上复制标准 API 的 JavaScript 补充”,可以动态地加载 JavaScript 代码或库，在不支持这些标准 API 的浏览器中模拟它们。\n例如，geolocation（地理位置）polyfill 可以在 navigator 对象上添加全局的 geolocation 对象，还能添加 getCurrentPosition 函数以及“坐标”回调对象，\n所有这些都是 W3C 地理位置 API 定义的对象和函数。因为 polyfill 模拟标准 API，所以能够以一种面向所有浏览器未来的方式针对这些 API 进行开发，\n一旦对这些 API 的支持变成绝对大多数，则可以方便地去掉 polyfill，无需做任何额外工作。\n做的项目中，有没有用过或自己实现一些 polyfill 方案（兼容性处理方案）？\n\n比如： html5shiv、Geolocation、Placeholder \n我们给一个dom同时绑定两个点击事件，一个用捕获，一个用冒泡。会执行几次事件，会先执行冒泡还是捕获？\n\nECMAScript6 相关\n\nObject.is() 与原来的比较操作符“ ===”、“ ==”的区别？\n\n两等号判等，会在比较时进行类型转换；\n三等号判等(判断严格)，比较时不进行隐式类型转换,（类型不同则会返回false）； \n\nObject.is 在三等号判等的基础上特别处理了 NaN 、-0 和 +0 ，保证 -0 和 +0 不再相同，\n但 Object.is(NaN, NaN) 会返回 true.\n\nObject.is 应被认为有其特殊的用途，而不能用它认为它比其它的相等对比更宽松或严格。\n前端框架相关\n\nreact-router 路由系统的实现原理？\n\nReact中如何解决第三方类库的问题?\n\n其他问题\n\n原来公司工作流程是怎么样的，如何与其他人协作的？如何夸部门合作的？\n\n### 你遇到过比较难的技术问题是？你是如何解决的？\n\n设计模式 知道什么是singleton, factory, strategy, decrator么?\n\n常使用的库有哪些？常用的前端开发工具？开发过什么应用或组件？\n\n### 页面重构怎么操作？\n\n网站重构：在不改变外部行为的前提下，简化结构、添加可读性，而在网站前端保持一致的行为。\n也就是说是在不改变UI的情况下，对网站进行优化，在扩展的同时保持一致的UI。\n\n### 对于传统的网站来说重构通常是：\n\n表格(table)布局改为DIV+CSS\n使网站前端兼容于现代浏览器(针对于不合规范的CSS、如对IE6有效的)\n对于移动平台的优化\n针对于SEO进行优化\n深层次的网站重构应该考虑的方面\n\n减少代码间的耦合\n让代码保持弹性\n严格按规范编写代码\n设计可扩展的API\n代替旧有的框架、语言(如VB)\n增强用户体验\n通常来说对于速度的优化也包含在重构中\n\n压缩JS、CSS、image等前端资源(通常是由服务器来解决)\n程序的性能优化(如数据读写)\n采用CDN来加速资源加载\n对于JS DOM的优化\nHTTP服务器的文件缓存\n列举IE与其他浏览器不一样的特性？\n\n1、事件不同之处：\n\n    触发事件的元素被认为是目标（target）。而在 IE 中，目标包含在 event 对象的 srcElement 属性；\n\n    获取字符代码、如果按键代表一个字符（shift、ctrl、alt除外），IE 的 keyCode 会返回字符代码（Unicode），DOM 中按键的代码和字符是分离的，要获取字符代码，需要使用 charCode 属性；\n\n    阻止某个事件的默认行为，IE 中阻止某个事件的默认行为，必须将 returnValue 属性设置为 false，Mozilla 中，需要调用 preventDefault() 方法；\n\n    停止事件冒泡，IE 中阻止事件进一步冒泡，需要设置 cancelBubble 为 true，Mozzilla 中，需要调用 stopPropagation()；\n99%的网站都需要被重构是那本书上写的？\n\n网站重构：应用web标准进行设计（第2版）\n什么叫优雅降级和渐进增强？\n\n优雅降级：Web站点在所有新式浏览器中都能正常工作，如果用户使用的是老式浏览器，则代码会针对旧版本的IE进行降级处理了,使之在旧式浏览器上以某种形式降级体验却不至于完全不能用。\n如：border-shadow\n\n渐进增强：从被所有浏览器支持的基本功能开始，逐步地添加那些只有新版本浏览器才支持的功能,向页面增加不影响基础浏览器的额外样式和功能的。当浏览器支持时，它们会自动地呈现出来并发挥作用。\n如：默认使用flash上传，但如果浏览器支持 HTML5 的文件上传功能，则使用HTML5实现更好的体验；\n是否了解公钥加密和私钥加密。\n\n一般情况下是指私钥用于对数据进行签名，公钥用于对签名进行验证;\nHTTP网站在浏览器端用公钥加密敏感数据，然后在服务器端再用私钥解密。\nWEB应用从服务器主动推送Data到客户端有那些方式？\n\nhtml5提供的Websocket\n不可见的iframe\nWebSocket通过Flash\nXHR长时间连接\nXHR Multipart Streaming\n`<script>`标签的长时间连接(可跨域)\n对Node的优点和缺点提出了自己的看法？\n\n*（优点）因为Node是基于事件驱动和无阻塞的，所以非常适合处理并发请求，\n  因此构建在Node上的代理服务器相比其他技术实现（如Ruby）的服务器表现要好得多。\n  此外，与Node代理服务器交互的客户端代码是由javascript语言编写的，\n  因此客户端和服务器端都用同一种语言编写，这是非常美妙的事情。\n\n*（缺点）Node是一个相对新的开源项目，所以不太稳定，它总是一直在变，\n  而且缺少足够多的第三方库支持。看起来，就像是Ruby/Rails当年的样子。\n\n### 你有用过哪些前端性能优化的方法？\n\n  （1） 减少http请求次数：CSS Sprites, JS、CSS源码压缩、图片大小控制合适；网页Gzip，CDN托管，data缓存 ，图片服务器。\n\n  （2） 前端模板 JS+数据，减少由于HTML标签导致的带宽浪费，前端用变量保存AJAX请求结果，每次操作本地变量，不用请求，减少请求次数\n\n  （3） 用innerHTML代替DOM操作，减少DOM操作次数，优化javascript性能。\n\n  （4） 当需要设置的样式很多时设置className而不是直接操作style。\n\n  （5） 少用全局变量、缓存DOM节点查找的结果。减少IO读取操作。\n\n  （6） 避免使用CSS Expression（css表达式)又称Dynamic properties(动态属性)。\n\n  （7） 图片预加载，将样式表放在顶部，将脚本放在底部  加上时间戳。\n\n  （8） 避免在页面的主体布局中使用table，table要等其中的内容完全下载之后才会显示出来，显示比div+css布局慢。\n  对普通的网站有一个统一的思路，就是尽量向前端优化、减少数据库操作、减少磁盘IO。向前端优化指的是，在不影响功能和体验的情况下，能在浏览器执行的不要在服务端执行，能在缓存服务器上直接返回的不要到应用服务器，程序能直接取得的结果不要到外部取得，本机内能取得的数据不要到远程取，内存能取到的不要到磁盘取，缓存中有的不要去数据库查询。减少数据库操作指减少更新次数、缓存结果减少查询次数、将数据库执行的操作尽可能的让你的程序完成（例如join查询），减少磁盘IO指尽量不使用文件系统作为缓存、减少读写文件次数等。程序优化永远要优化慢的部分，换语言是无法“优化”的。\n\n### http状态码有那些？分别代表是什么意思？\n\n    简单版\n    [\n        100  Continue   继续，一般在发送post请求时，已发送了http header之后服务端将返回此信息，表示确认，之后发送具体参数信息\n        200  OK         正常返回信息\n        201  Created    请求成功并且服务器创建了新的资源\n        202  Accepted   服务器已接受请求，但尚未处理\n        301  Moved Permanently  请求的网页已永久移动到新位置。\n        302 Found       临时性重定向。\n        303 See Other   临时性重定向，且总是使用 GET 请求新的 URI。\n        304  Not Modified 自从上次请求后，请求的网页未修改过。\n\n        400 Bad Request  服务器无法理解请求的格式，客户端不应当尝试再次使用相同的内容发起请求。\n        401 Unauthorized 请求未授权。\n        403 Forbidden   禁止访问。\n        404 Not Found   找不到如何与 URI 相匹配的资源。\n\n        500 Internal Server Error  最常见的服务器端错误。\n        503 Service Unavailable 服务器端暂时无法处理请求（可能是过载或维护）。\n    ]\n\n  完整版\n  1**(信息类)：表示接收到请求并且继续处理\n    100——客户必须继续发出请求\n    101——客户要求服务器根据请求转换HTTP协议版本\n\n  2**(响应成功)：表示动作被成功接收、理解和接受\n    200——表明该请求被成功地完成，所请求的资源发送回客户端\n    201——提示知道新文件的URL\n    202——接受和处理、但处理未完成\n    203——返回信息不确定或不完整\n    204——请求收到，但返回信息为空\n    205——服务器完成了请求，用户代理必须复位当前已经浏览过的文件\n    206——服务器已经完成了部分用户的GET请求\n\n  3**(重定向类)：为了完成指定的动作，必须接受进一步处理\n    300——请求的资源可在多处得到\n    301——本网页被永久性转移到另一个URL\n    302——请求的网页被转移到一个新的地址，但客户访问仍继续通过原始URL地址，重定向，新的URL会在response中的Location中返回，浏览器将会使用新的URL发出新的Request。\n    303——建议客户访问其他URL或访问方式\n    304——自从上次请求后，请求的网页未修改过，服务器返回此响应时，不会返回网页内容，代表上次的文档已经被缓存了，还可以继续使用\n    305——请求的资源必须从服务器指定的地址得到\n    306——前一版本HTTP中使用的代码，现行版本中不再使用\n    307——申明请求的资源临时性删除\n\n  4**(客户端错误类)：请求包含错误语法或不能正确执行\n    400——客户端请求有语法错误，不能被服务器所理解\n    401——请求未经授权，这个状态代码必须和WWW-Authenticate报头域一起使用\n    HTTP 401.1 - 未授权：登录失败\n    　　HTTP 401.2 - 未授权：服务器配置问题导致登录失败\n    　　HTTP 401.3 - ACL 禁止访问资源\n    　　HTTP 401.4 - 未授权：授权被筛选器拒绝\n    HTTP 401.5 - 未授权：ISAPI 或 CGI 授权失败\n    402——保留有效ChargeTo头响应\n    403——禁止访问，服务器收到请求，但是拒绝提供服务\n    HTTP 403.1 禁止访问：禁止可执行访问\n    　　HTTP 403.2 - 禁止访问：禁止读访问\n    　　HTTP 403.3 - 禁止访问：禁止写访问\n    　　HTTP 403.4 - 禁止访问：要求 SSL\n    　　HTTP 403.5 - 禁止访问：要求 SSL 128\n    　　HTTP 403.6 - 禁止访问：IP 地址被拒绝\n    　　HTTP 403.7 - 禁止访问：要求客户证书\n    　　HTTP 403.8 - 禁止访问：禁止站点访问\n    　　HTTP 403.9 - 禁止访问：连接的用户过多\n    　　HTTP 403.10 - 禁止访问：配置无效\n    　　HTTP 403.11 - 禁止访问：密码更改\n    　　HTTP 403.12 - 禁止访问：映射器拒绝访问\n    　　HTTP 403.13 - 禁止访问：客户证书已被吊销\n    　　HTTP 403.15 - 禁止访问：客户访问许可过多\n    　　HTTP 403.16 - 禁止访问：客户证书不可信或者无效\n    HTTP 403.17 - 禁止访问：客户证书已经到期或者尚未生效\n    404——一个404错误表明可连接服务器，但服务器无法取得所请求的网页，请求资源不存在。eg：输入了错误的URL\n    405——用户在Request-Line字段定义的方法不允许\n    406——根据用户发送的Accept拖，请求资源不可访问\n    407——类似401，用户必须首先在代理服务器上得到授权\n    408——客户端没有在用户指定的饿时间内完成请求\n    409——对当前资源状态，请求不能完成\n    410——服务器上不再有此资源且无进一步的参考地址\n    411——服务器拒绝用户定义的Content-Length属性请求\n    412——一个或多个请求头字段在当前请求中错误\n    413——请求的资源大于服务器允许的大小\n    414——请求的资源URL长于服务器允许的长度\n    415——请求资源不支持请求项目格式\n    416——请求中包含Range请求头字段，在当前请求资源范围内没有range指示值，请求也不包含If-Range请求头字段\n    417——服务器不满足请求Expect头字段指定的期望值，如果是代理服务器，可能是下一级服务器不能满足请求长。\n\n  5**(服务端错误类)：服务器不能正确执行一个正确的请求\n    HTTP 500 - 服务器遇到错误，无法完成请求\n    　　HTTP 500.100 - 内部服务器错误 - ASP 错误\n    　　HTTP 500-11 服务器关闭\n    　　HTTP 500-12 应用程序重新启动\n    　　HTTP 500-13 - 服务器太忙\n    　　HTTP 500-14 - 应用程序无效\n    　　HTTP 500-15 - 不允许请求 global.asa\n    　　Error 501 - 未实现\n  HTTP 502 - 网关错误\n  HTTP 503：由于超载或停机维护，服务器目前无法使用，一段时间后可能恢复正常\n\n### 一个页面从输入 URL 到页面加载显示完成，这个过程中都发生了什么？（流程说的越详细越好）\n\n  注：这题胜在区分度高，知识点覆盖广，再不懂的人，也能答出几句，\n  而高手可以根据自己擅长的领域自由发挥，从URL规范、HTTP协议、DNS、CDN、数据库查询、\n  到浏览器流式解析、CSS规则构建、layout、paint、onload/domready、JS执行、JS API绑定等等；\n\n  详细版：\n    1、浏览器会开启一个线程来处理这个请求，对 URL 分析判断如果是 http 协议就按照 Web 方式来处理;\n    2、调用浏览器内核中的对应方法，比如 WebView 中的 loadUrl 方法;\n    3、通过DNS解析获取网址的IP地址，设置 UA 等信息发出第二个GET请求;\n    4、进行HTTP协议会话，客户端发送报头(请求报头);\n    5、进入到web服务器上的 Web Server，如 Apache、Tomcat、Node.JS 等服务器;\n    6、进入部署好的后端应用，如 PHP、Java、JavaScript、Python 等，找到对应的请求处理;\n    7、处理结束回馈报头，此处如果浏览器访问过，缓存上有对应资源，会与服务器最后修改时间对比，一致则返回304;\n    8、浏览器开始下载html文档(响应报头，状态码200)，同时使用缓存;\n    9、文档树建立，根据标记请求所需指定MIME类型的文件（比如css、js）,同时设置了cookie;\n    10、页面开始渲染DOM，JS根据DOM API操作DOM,执行事件绑定等，页面显示完成。\n\n  简洁版：\n    浏览器根据请求的URL交给DNS域名解析，找到真实IP，向服务器发起请求；\n    服务器交给后台处理完成后返回数据，浏览器接收文件（HTML、JS、CSS、图象等）；\n    浏览器对加载到的资源（HTML、JS、CSS等）进行语法解析，建立相应的内部数据结构（如HTML的DOM）；\n    载入解析到的资源文件，渲染页面，完成。\n### 部分地区用户反应网站很卡，请问有哪些可能性的原因，以及解决方法？\n\n从打开app到刷新出内容，整个过程中都发生了什么，如果感觉慢，怎么定位问题，怎么解决?\n\n除了前端以外还了解什么其它技术么？你最最厉害的技能是什么？\n\n你用的得心应手用的熟练地编辑器&开发环境是什么样子？\n\nSublime Text 3 + 相关插件编写前端代码\nGoogle chrome 、Mozilla Firefox浏览器 +firebug 兼容测试和预览页面UI、动画效果和交互功能\nNode.js+Gulp\ngit 用于版本控制和Code Review\n对前端工程师这个职位是怎么样理解的？它的前景会怎么样？\n\n前端是最贴近用户的程序员，比后端、数据库、产品经理、运营、安全都近。\n1、实现界面交互\n2、提升用户体验\n3、有了Node.js，前端可以实现服务端的一些事情\n\n\n前端是最贴近用户的程序员，前端的能力就是能让产品从 90分进化到 100 分，甚至更好，\n\n参与项目，快速高质量完成实现效果图，精确到1px；\n\n与团队成员，UI设计，产品经理的沟通；\n\n做好的页面结构，页面重构和用户体验；\n\n处理hack，兼容、写出优美的代码格式；\n\n针对服务器的优化、拥抱最新前端技术。\n你怎么看待Web App 、hybrid App、Native App？\n\n你移动端前端开发的理解？（和 Web 前端开发的主要区别是什么？）\n\n你对加班的看法？\n\n加班就像借钱，原则应当是------救急不救穷\n平时如何管理你的项目？\n\n先期团队必须确定好全局样式（globe.css），编码模式(utf-8) 等；\n\n编写习惯必须一致（例如都是采用继承式的写法，单样式都写成一行）；\n\n标注样式编写人，各模块都及时标注（标注关键样式调用的地方）；\n\n页面进行标注（例如 页面 模块 开始和结束）；\n\nCSS跟HTML 分文件夹并行存放，命名都得统一（例如style.css）；\n\nJS 分文件夹存放 命名以该JS功能为准的英文翻译。\n\n图片采用整合的 images.png png8 格式文件使用 尽量整合在一起使用方便将来的管理\n如何设计突发大规模并发架构？\n\n当团队人手不足，把功能代码写完已经需要加班的情况下，你会做前端代码的测试吗？\n\n说说最近最流行的一些东西吧？常去哪些网站？\n\n    ES6\\WebAssembly\\Node\\MVVM\\Web Components\\React\\React Native\\Webpack 组件化\n### 知道什么是SEO并且怎么优化么? 知道各种meta data的含义么?\n\n移动端（Android IOS）怎么做好用户体验?\n\n清晰的视觉纵线、\n信息的分组、极致的减法、\n利用选择代替输入、\n标签及文字的排布方式、\n依靠明文确认密码、\n合理的键盘利用、\n简单描述一下你做过的移动APP项目研发流程？\n\n你在现在的团队处于什么样的角色，起到了什么明显的作用？\n\n你认为怎样才是全端工程师（Full Stack developer）？\n\n介绍一个你最得意的作品吧？\n\n你有自己的技术博客吗，用了哪些技术？\n\n对前端安全有什么看法？\n\n是否了解Web注入攻击，说下原理，最常见的两种攻击（XSS 和 CSRF）了解到什么程度？\n\n项目中遇到国哪些印象深刻的技术难题，具体是什么问题，怎么解决？。\n\n最近在学什么东西？\n\n你的优点是什么？缺点是什么？\n\n如何管理前端团队?\n    \n最近在学什么？能谈谈你未来3，5年给自己的规划吗？\n\n\n\n","source":"_posts/2017-03-06-前端面试总结.md","raw":"---\ntitle: front-end--面试题整理\ndate: 2017-03-06\ncategories: \n- FE\ntags:\n- FE\n- 面试\n---\n\n### Doctype作用？标准模式与兼容模式各有什么区别?\n\n（1）、<!DOCTYPE>声明位于位于HTML文档中的第一行，处于 <html> 标签之前。告知浏览器的解析器用什么文档标准解析这个文档。DOCTYPE不存在或格式不正确会导致文档以兼容模式呈现。\n\n（2）、标准模式的排版 和JS运作模式都是以该浏览器支持的最高标准运行。在兼容模式中，页面以宽松的向后兼容的方式显示,模拟老式浏览器的行为以防止站点无法工作。\nHTML5 为什么只需要写 <!DOCTYPE HTML>？\n\n HTML5 不基于 SGML，因此不需要对DTD进行引用，但是需要doctype来规范浏览器的行为（让浏览器按照它们应该的方式来运行）；\n\n 而HTML4.01基于SGML,所以需要对DTD进行引用，才能告知浏览器文档所使用的文档类型。\n<!-- more -->\n行内元素有哪些？块级元素有哪些？ 空(void)元素有那些？\n\n首先：CSS规范规定，每个元素都有display属性，确定该元素的类型，每个元素都有默认的display值，如div的display默认值为“block”，则为“块级”元素；span默认display属性值为“inline”，是“行内”元素。\n\n#### （1）行内元素有：\n  a b span img input select strong（强调的语气）\n#### （2）块级元素有：\n   div ul ol li dl dt dd h1 h2 h3 h4…p\n#### （3）常见的空元素：\n    <br> <hr> <img> <input> <link> <meta>\n    鲜为人知的是：\n    <area> <base> <col> <command> <embed> <keygen> <param> <source> <track> <wbr>\n### 页面导入样式时，使用link和@import有什么区别？\n\n（1）link属于XHTML标签，除了加载CSS外，还能用于定义RSS, 定义rel连接属性等作用；而@import是CSS提供的，只能用于加载CSS;\n\n（2）页面被加载的时，link会同时被加载，而@import引用的CSS会等到页面被加载完再加载;\n\n（3）import是CSS2.1 提出的，只在IE5以上才能被识别，而link是XHTML标签，无兼容问题;\n### 介绍一下你对浏览器内核的理解？\n\n主要分成两部分：渲染引擎(layout engineer或Rendering Engine)和JS引擎。\n\n**渲染引擎**：负责取得网页的内容（HTML、XML、图像等等）、整理讯息（例如加入CSS等），以及计算网页的显示方式，然后会输出至显示器或打印机。浏览器的内核的不同对于网页的语法解释会有不同，所以渲染的效果也不相同。所有网页浏览器、电子邮件客户端以及其它需要编辑、显示网络内容的应用程序都需要内核。\n\n**JS引擎**：解析和执行javascript来实现网页的动态效果。\n\n最开始渲染引擎和JS引擎并没有区分的很明确，后来JS引擎越来越独立，内核就倾向于只指渲染引擎。\n\n#### 常见的浏览器内核有哪些？\n\nTrident内核：IE,MaxThon,TT,The World,360,搜狗浏览器等。[又称MSHTML]\nGecko内核：Netscape6及以上版本，FF,MozillaSuite/SeaMonkey等\nPresto内核：Opera7及以上。      [Opera内核原为：Presto，现为：Blink;]\nWebkit内核：Safari,Chrome等。   [ Chrome的：Blink（WebKit的分支）]\n\n### html5有哪些新特性、移除了那些元素？如何处理HTML5新标签的浏览器兼容问题？如何区分 HTML 和 HTML5？\n\n* HTML5 现在已经不是 SGML 的子集，主要是关于图像，位置，存储，多任务等功能的增加。\n      绘画 canvas;\n      用于媒介回放的 video 和 audio 元素;\n      本地离线存储 localStorage 长期存储数据，浏览器关闭后数据不丢失;\n      sessionStorage 的数据在浏览器关闭后自动删除;\n      语意化更好的内容元素，比如 article、footer、header、nav、section;\n      表单控件，calendar、date、time、email、url、search;\n      新的技术webworker, websocket, Geolocation;\n\n  移除的元素：\n      纯表现的元素：basefont，big，center，font, s，strike，tt，u;\n      对可用性产生负面影响的元素：frame，frameset，noframes；\n\n* 支持HTML5新标签：\n     IE8/IE7/IE6支持通过document.createElement方法产生的标签，\n     可以利用这一特性让这些浏览器支持HTML5新标签，\n     浏览器支持新标签后，还需要添加标签默认的样式。\n\n     当然也可以直接使用成熟的框架、比如html5shim;\n     <!--[if lt IE 9]>\n        <script> src=\"http://html5shim.googlecode.com/svn/trunk/html5.js\"</script>\n     <![endif]-->\n\n* 如何区分HTML5： DOCTYPE声明\\新增的结构元素\\功能元素\n简述一下你对HTML语义化的理解？\n\n用正确的标签做正确的事情。\nhtml语义化让页面的内容结构化，结构更清晰，便于对浏览器、搜索引擎解析;\n即使在没有样式CSS情况下也以一种文档格式显示，并且是容易阅读的;\n搜索引擎的爬虫也依赖于HTML标记来确定上下文和各个关键字的权重，利于SEO;\n使阅读源代码的人对网站更容易将网站分块，便于阅读维护理解。\nHTML5的离线储存怎么使用，工作原理能不能解释一下？\n\n在用户没有与因特网连接时，可以正常访问站点或应用，在用户与因特网连接时，更新用户机器上的缓存文件。\n原理：HTML5的离线存储是基于一个新建的.appcache文件的缓存机制(不是存储技术)，通过这个文件上的解析清单离线存储资源，这些资源就会像cookie一样被存储了下来。之后当网络在处于离线状态下时，浏览器会通过被离线存储的数据进行页面展示。\n\n\n如何使用：\n1、页面头部像下面一样加入一个manifest的属性；\n2、在cache.manifest文件的编写离线存储的资源；\n    CACHE MANIFEST\n    #v0.11\n    CACHE:\n    js/app.js\n    css/style.css\n    NETWORK:\n    resourse/logo.png\n    FALLBACK:\n    / /offline.html\n3、在离线状态时，操作window.applicationCache进行需求实现。\n详细的使用请参考：[有趣的HTML5：离线存储](https://segmentfault.com/a/1190000000732617)\n\n### 浏览器是怎么对HTML5的离线储存资源进行管理和加载的呢？\n\n在线的情况下，浏览器发现html头部有manifest属性，它会请求manifest文件，如果是第一次访问app，那么浏览器就会根据manifest文件的内容下载相应的资源并且进行离线存储。如果已经访问过app并且资源已经离线存储了，那么浏览器就会使用离线的资源加载页面，然后浏览器会对比新的manifest文件与旧的manifest文件，如果文件没有发生改变，就不做任何操作，如果文件改变了，那么就会重新下载文件中的资源并进行离线存储。\n离线的情况下，浏览器就直接使用离线存储的资源。\n详细的使用请参考：有趣的HTML5：离线存储\n\n### 请描述一下 cookies，sessionStorage 和 localStorage 的区别？\n\ncookie是网站为了标示用户身份而储存在用户本地终端（Client Side）上的数据（通常经过加密）。\ncookie数据始终在同源的http请求中携带（即使不需要），记会在浏览器和服务器间来回传递。\nsessionStorage和localStorage不会自动把数据发给服务器，仅在本地保存。\n\n* 存储大小：\n    cookie数据大小不能超过4k。\n    sessionStorage和localStorage 虽然也有存储大小的限制，但比cookie大得多，可以达到5M或更大。\n\n* 有期时间：\n    localStorage    存储持久数据，浏览器关闭后数据不丢失除非主动删除数据；\n    sessionStorage  数据在当前浏览器窗口关闭后自动删除。\n    cookie          设置的cookie过期时间之前一直有效，即使窗口或浏览器关闭。\n### iframe有哪些缺点？\n\n1. iframe会阻塞主页面的Onload事件；\n2. 搜索引擎的检索程序无法解读这种页面，不利于SEO;\n3. iframe和主页面共享连接池，而浏览器对相同域的连接有限制，所以会影响页面的并行加载。\n4. 使用iframe之前需要考虑这两个缺点。如果需要使用iframe，最好是通过javascript\n动态给iframe添加src属性值，这样可以绕开以上两个问题。\n\n### Label的作用是什么？是怎么用的？\n\nlabel标签来定义表单控制间的关系,当用户选择该标签时，浏览器会自动将焦点转到和标签相关的表单控件上。\n\n`<label for=\"Name\">Number:</label>\n<input type=“text“name=\"Name\" id=\"Name\"/>`\n\n`<label>Date:<input type=\"text\" name=\"B\"/></label>`\n### HTML5的form如何关闭自动完成功能？\n\n给不想要提示的 form 或某个 input 设置为 autocomplete=off。\n\n### 如何实现浏览器内多个标签页之间的通信? (阿里)\n\nWebSocket、SharedWorker；\n也可以调用localstorge、cookies等本地存储方式；\n\nlocalstorge另一个浏览上下文里被添加、修改或删除时，它都会触发一个事件，\n我们通过监听事件，控制它的值来进行页面信息通信；\n注意quirks：Safari 在无痕模式下设置localstorge值时会抛出 QuotaExceededError 的异常；\n\n### webSocket如何兼容低浏览器？(阿里)\n\nAdobe Flash Socket 、\nActiveX HTMLFile (IE) 、\n基于 multipart 编码发送 XHR 、\n基于长轮询的 XHR\n页面可见性（Page Visibility API） 可以有哪些用途？\n\n通过 visibilityState 的值检测页面当前是否可见，以及打开网页的时间等;\n在页面被切换到其他后台进程的时候，自动暂停音乐或视频的播放；\n\n### 如何在页面上实现一个圆形的可点击区域？\n\n1、map+area或者svg\n2、border-radius\n3、纯js实现 需要求一个点在不在圆上简单算法、获取鼠标坐标等等\n实现不使用 border 画出1px高的线，在不同浏览器的标准模式与怪异模式下都能保持一致的效果。\n\n`<div style=\"height:1px;overflow:hidden;background:red\"></div>`\n\n### 网页验证码是干嘛的，是为了解决什么安全问题。\n\n区分用户是计算机还是人的公共全自动程序。可以防止恶意破解密码、刷票、论坛灌水；\n有效防止黑客对某一个特定注册用户用特定程序暴力破解方式进行不断的登陆尝试。\n\n### title与h1的区别、b与strong的区别、i与em的区别？\n\ntitle属性没有明确意义只表示是个标题，H1则表示层次明确的标题，对页面信息的抓取也有很大的影响；\n\nstrong是标明重点内容，有语气加强的含义，使用阅读设备阅读网络时：<strong>会重读，而<B>是展示强调内容。\n\ni内容展示为斜体，em表示强调的文本；\n\nPhysical Style Elements -- 自然样式标签\nb, i, u, s, pre\nSemantic Style Elements -- 语义样式标签\nstrong, em, ins, del, code\n应该准确使用语义样式标签, 但不能滥用, 如果不能确定时首选使用自然样式标签。\nCSS\n\n### 介绍一下标准的CSS的盒子模型？低版本IE的盒子模型有什么不同的？\n\n（1）有两种， IE 盒子模型、W3C 盒子模型；\n（2）盒模型： 内容(content)、填充(padding)、边界(margin)、 边框(border)；\n（3）区  别： IE的content部分把 border 和 padding计算了进去;\n#### CSS选择符有哪些？哪些属性可以继承？\n\n*   1.id选择器（ # myid）\n    2.类选择器（.myclassname）\n    3.标签选择器（div, h1, p）\n    4.相邻选择器（h1 + p）\n    5.子选择器（ul > li）\n    6.后代选择器（li a）\n    7.通配符选择器（ * ）\n    8.属性选择器（a[rel = \"external\"]）\n    9.伪类选择器（a:hover, li:nth-child）\n\n*   可继承的样式： font-size font-family color, UL LI DL DD DT;\n\n*   不可继承的样式：border padding margin width height ;\nCSS优先级算法如何计算？\n\n*   优先级就近原则，同权重情况下样式定义最近者为准;\n\n*   载入样式以最后载入的定位为准;\n\n优先级为:\n   !important >  id > class > tag\n    important 比 内联优先级高\n### CSS3新增伪类有那些？\n\n    举例：\n    p:first-of-type 选择属于其父元素的首个 <p> 元素的每个 <p> 元素。\n    p:last-of-type  选择属于其父元素的最后 <p> 元素的每个 <p> 元素。\n    p:only-of-type  选择属于其父元素唯一的 <p> 元素的每个 <p> 元素。\n    p:only-child        选择属于其父元素的唯一子元素的每个 <p> 元素。\n    p:nth-child(2)  选择属于其父元素的第二个子元素的每个 <p> 元素。\n\n    :after          在元素之前添加内容,也可以用来做清除浮动。\n    :before         在元素之后添加内容\n    :enabled        \n    :disabled       控制表单控件的禁用状态。\n    :checked        单选框或复选框被选中。\n### 如何居中div？如何居中一个浮动元素？如何让绝对定位的div居中？\n\n给div设置一个宽度，然后添加margin:0 auto属性\n```css\ndiv{\n    width:200px;\n    margin:0 auto;\n }\n ```\n#### 居中一个浮动元素\n\n  确定容器的宽高 宽500 高 300 的层\n  设置层的外边距\n```css\n .div {\n      width:500px ; height:300px;//高度可以不设\n      margin: -150px 0 0 -250px;\n      position:relative;         //相对定位\n      background-color:pink;     //方便看效果\n      left:50%;\n      top:50%;\n }\n ```\n#### 让绝对定位的div居中\n```css\n  .div{\n    position: absolute;\n    width: 1200px;\n    background: none;\n    margin: 0 auto;\n    top: 0;\n    left: 0;\n    bottom: 0;\n    right: 0;\n  }\n  ```\n### display有哪些值？说明他们的作用。\n\n  block         象块类型元素一样显示。\n  none          缺省值。象行内元素类型一样显示。\n  inline-block  象行内元素一样显示，但其内容象块类型元素一样显示。\n  list-item     象块类型元素一样显示，并添加样式列表标记。\n  table         此元素会作为块级表格来显示\n  inherit       规定应该从父元素继承 display 属性的值\n\n### position的值relative和absolute定位原点是？\n\n  absolute\n    生成绝对定位的元素，相对于值不为 static的第一个父元素进行定位。\n\n  fixed （老IE不支持）\n    生成绝对定位的元素，相对于浏览器窗口进行定位。\n\n  relative\n    生成相对定位的元素，相对于其正常位置进行定位。\n\n  static\n    默认值。没有定位，元素出现在正常的流中（忽略 top, bottom, left, right z-index 声明）。\n\n  inherit\n    规定从父元素继承 position 属性的值。\n\n### CSS3有哪些新特性？\n\n  新增各种CSS选择器  （: not(.input)：所有 class 不是“input”的节点）\n  圆角           （border-radius:8px）\n  多列布局        （multi-column layout）\n  阴影和反射        （Shadow\\Reflect）\n  文字特效      （text-shadow、）\n  文字渲染      （Text-decoration）\n  线性渐变      （gradient）\n  旋转          （transform）\n  增加了旋转,缩放,定位,倾斜,动画，多背景\n  transform:\\scale(0.85,0.90)\\ translate(0px,-30px)\\ skew(-9deg,0deg)\\Animation:\n请解释一下CSS3的Flexbox（弹性盒布局模型）,以及适用场景？\n\n .\n### 用纯CSS创建一个三角形的原理是什么？\n\n把上、左、右三条边隐藏掉（颜色设为 transparent）\n```css\n#demo {\n  width: 0;\n  height: 0;\n  border-width: 20px;\n  border-style: solid;\n  border-color: transparent transparent red transparent;\n}\n```\n### 一个满屏 品 字布局 如何设计?\n\n简单的方式：\n    上面的div宽100%，\n    下面的两个div分别宽50%，\n    然后用float或者inline使其不换行即可\n\n### 经常遇到的浏览器的兼容性有哪些？原因，解决方法是什么，常用hack的技巧 ？\n\n* png24位的图片在iE6浏览器上出现背景，解决方案是做成PNG8.\n\n* 浏览器默认的margin和padding不同。解决方案是加一个全局的*{margin:0;padding:0;}来统一。\n\n* IE6双边距bug:块属性标签float后，又有横行的margin情况下，在ie6显示margin比设置的大。\n\n  浮动ie产生的双倍距离 #box{ float:left; width:10px; margin:0 0 0 100px;}\n\n  这种情况之下IE会产生20px的距离，解决方案是在float的标签样式控制中加入 ——_display:inline;将其转化为行内属性。(_这个符号只有ie6会识别)\n\n  渐进识别的方式，从总体中逐渐排除局部。\n\n  首先，巧妙的使用“\\9”这一标记，将IE游览器从所有情况中分离出来。\n  接着，再次使用“+”将IE8和IE7、IE6分离开来，这样IE8已经独立识别。\n\n  css\n      .bb{\n          background-color:#f1ee18;/*所有识别*/\n          .background-color:#00deff\\9; /*IE6、7、8识别*/\n          +background-color:#a200ff;/*IE6、7识别*/\n          _background-color:#1e0bd1;/*IE6识别*/\n      }\n\n*  IE下,可以使用获取常规属性的方法来获取自定义属性,\n   也可以使用getAttribute()获取自定义属性;\n   Firefox下,只能使用getAttribute()获取自定义属性。\n   解决方法:统一通过getAttribute()获取自定义属性。\n\n*  IE下,even对象有x,y属性,但是没有pageX,pageY属性;\n   Firefox下,event对象有pageX,pageY属性,但是没有x,y属性。\n\n*  解决方法：（条件注释）缺点是在IE浏览器下可能会增加额外的HTTP请求数。\n\n*  Chrome 中文界面下默认会将小于 12px 的文本强制按照 12px 显示,\n   可通过加入 CSS 属性 -webkit-text-size-adjust: none; 解决。\n\n### 超链接访问过后hover样式就不出现了 被点击访问过的超链接样式不在具有hover和active了解决方法是改变CSS属性的排列顺序:\n\nL-V-H-A :  a:link {} a:visited {} a:hover {} a:active {}\n\n### li与li之间有看不见的空白间隔是什么原因引起的？有什么解决办法？\n\n行框的排列会受到中间空白（回车\\空格）等的影响，因为空格也属于字符,这些空白也会被应用样式，占据空间，所以会有间隔，把字符大小设为0，就没有空格了。\n\n### 为什么要初始化CSS样式。\n\n- 因为浏览器的兼容问题，不同浏览器对有些标签的默认值是不同的，如果没对CSS初始化往往会出现浏览器之间的页面显示差异。\n\n- 当然，初始化样式会对SEO有一定的影响，但鱼和熊掌不可兼得，但力求影响最小的情况下初始化。\n\n最简单的初始化方法： * {padding: 0; margin: 0;} （强烈不建议）\n\n淘宝的样式初始化代码：\n```css\nbody, h1, h2, h3, h4, h5, h6, hr, p, blockquote, dl, dt, dd, ul, ol, li, pre, form, fieldset, legend, button, input, textarea, th, td { margin:0; padding:0; }\nbody, button, input, select, textarea { font:12px/1.5tahoma, arial, \\5b8b\\4f53; }\nh1, h2, h3, h4, h5, h6{ font-size:100%; }\naddress, cite, dfn, em, var { font-style:normal; }\ncode, kbd, pre, samp { font-family:couriernew, courier, monospace; }\nsmall{ font-size:12px; }\nul, ol { list-style:none; }\na { text-decoration:none; }\na:hover { text-decoration:underline; }\nsup { vertical-align:text-top; }\nsub{ vertical-align:text-bottom; }\nlegend { color:#000; }\nfieldset, img { border:0; }\nbutton, input, select, textarea { font-size:100%; }\ntable { border-collapse:collapse; border-spacing:0; }\n```\n### absolute的containing block(容器块)计算方式跟正常流有什么不同？\n\n无论属于哪种，都要先找到其祖先元素中最近的 position 值不为 static 的元素，然后再判断：\n1、若此元素为 inline 元素，则 containing block 为能够包含这个元素生成的第一个和最后一个 inline box 的 padding box (除 margin, border 外的区域) 的最小矩形；\n2、否则,则由这个祖先元素的 padding box 构成。\n如果都找不到，则为 initial containing block。\n\n补充：\n1. static(默认的)/relative：简单说就是它的父元素的内容框（即去掉padding的部分）\n2. absolute: 向上找最近的定位为absolute/relative的元素\n3. fixed: 它的containing block一律为根元素(html/body)，根元素也是initial containing block\n\n### CSS里的visibility属性有个collapse属性值是干嘛用的？在不同浏览器下以后什么区别？\n\nposition跟display、margin collapse、overflow、float这些特性相互叠加后会怎么样？\n\n对BFC规范(块级格式化上下文：block formatting context)的理解？\n\n（W3C CSS 2.1 规范中的一个概念,它是一个独立容器，决定了元素如何对其内容进行定位,以及与其他元素的关系和相互作用。）\n 一个页面是由很多个 Box 组成的,元素的类型和 display 属性,决定了这个 Box 的类型。\n 不同类型的 Box,会参与不同的 Formatting Context（决定如何渲染文档的容器）,因此Box内的元素会以不同的方式渲染,也就是说BFC内部的元素和外部的元素不会互相影响。\ncss定义的权重\n\n以下是权重的规则：标签的权重为1，class的权重为10，id的权重为100，以下例子是演示各种定义的权重值：\n\n/*权重为1*/\ndiv{\n}\n/*权重为10*/\n.class1{\n}\n/*权重为100*/\n#id1{\n}\n/*权重为100+1=101*/\n#id1 div{\n}\n/*权重为10+1=11*/\n.class1 div{\n}\n/*权重为10+10+1=21*/\n.class1 .class2 div{\n}\n\n如果权重相同，则最后定义的样式会起作用，但是应该避免这种情况出现\n请解释一下为什么会出现浮动和什么时候需要清除浮动？清除浮动的方式\n\n移动端的布局用过媒体查询吗？\n\n使用 CSS 预处理器吗？喜欢那个？\n\nSASS (SASS、LESS没有本质区别，只因为团队前端都是用的SASS)\nCSS优化、提高性能的方法有哪些？\n\n浏览器是怎样解析CSS选择器的？\n\n在网页中的应该使用奇数还是偶数的字体？为什么呢？\n\nmargin和padding分别适合什么场景使用？\n\n抽离样式模块怎么写，说出思路，有无实践经验？[阿里航旅的面试题]\n\n元素竖向的百分比设定是相对于容器的高度吗？\n\n### 全屏滚动的原理是什么？用到了CSS的那些属性？\n\n### 什么是响应式设计？响应式设计的基本原理是什么？如何兼容低版本的IE？\n\n视差滚动效果，如何给每页做不同的动画？（回到顶部，向下滑动要再次出现，和只出现一次分别怎么做？）\n\n::before 和 :after中双冒号和单冒号 有什么区别？解释一下这2个伪元素的作用。\n\n如何修改chrome记住密码后自动填充表单的黄色背景 ？\n\n你对line-height是如何理解的？\n\n设置元素浮动后，该元素的display值是多少？（自动变成display:block）\n\n怎么让Chrome支持小于12px 的文字？\n\n让页面里的字体变清晰，变细用CSS怎么做？（-webkit-font-smoothing: antialiased;）\n\nfont-style属性可以让它赋值为“oblique” oblique是什么意思？\n\nposition:fixed;在android下无效怎么处理？\n\n如果需要手动写动画，你认为最小时间间隔是多久，为什么？（阿里）\n\n多数显示器默认频率是60Hz，即1秒刷新60次，所以理论上最小间隔为1/60＊1000ms ＝ 16.7ms\ndisplay:inline-block 什么时候会显示间隙？(携程)\n\n移除空格、使用margin负值、使用font-size:0、letter-spacing、word-spacing\noverflow: scroll时不能平滑滚动的问题怎么处理？\n\n有一个高度自适应的div，里面有两个div，一个高度100px，希望另一个填满剩下的高度。\n\npng、jpg、gif 这些图片格式解释一下，分别什么时候用。有没有了解过webp？\n\n### 什么是Cookie 隔离？（或者说：请求资源的时候不要让它带cookie怎么做）\n\n如果静态文件都放在主域名下，那静态文件请求的时候都带有的cookie的数据提交给server的，非常浪费流量，\n所以不如隔离开。\n\n因为cookie有域的限制，因此不能跨域提交请求，故使用非主要域名的时候，请求头中就不会带有cookie数据，\n这样可以降低请求头的大小，降低请求时间，从而达到降低整体请求延时的目的。\n\n同时这种方式不会将cookie传入Web Server，也减少了Web Server对cookie的处理分析环节，\n提高了webserver的http请求的解析速度。\nstyle标签写在body后与body前有什么区别？\n\n### 什么是CSS 预处理器 / 后处理器？\n\n- 预处理器例如：LESS、Sass、Stylus，用来预编译Sass或less，增强了css代码的复用性，\n  还有层级、mixin、变量、循环、函数等，具有很方便的UI组件模块化开发能力，极大的提高工作效率。\n\n- 后处理器例如：PostCSS，通常被视为在完成的样式表中根据CSS规范处理CSS，让其更有效；目前最常做的\n  是给CSS属性添加浏览器私有前缀，实现跨浏览器兼容性的问题。\nJavaScript\n\n### 介绍js的基本数据类型\n\n Undefined、Null、Boolean、Number、String、Symbol(new in ECMAScript 2015)\n### 介绍js有哪些内置对象？\n\nObject 是 JavaScript 中所有对象的父对象\n\n数据封装类对象：Object、Array、Boolean、Number 和 String\n\n其他对象：Function、Arguments、Math、Date、RegExp、Error\n\n### 说几条写JavaScript的基本规范？\n\n1.不要在同一行声明多个变量。\n2.请使用 ===/!==来比较true/false或者数值\n3.使用对象字面量替代new Array这种形式\n4.不要使用全局函数。\n5.Switch语句必须带有default分支\n6.函数不应该有时候有返回值，有时候没有返回值。\n7.For循环必须使用大括号\n8.If语句必须使用大括号\n9.for-in循环中的变量 应该使用var关键字明确限定作用域，从而避免作用域污染。\n### JavaScript原型，原型链 ? 有什么特点？\n\n每个对象都会在其内部初始化一个属性，就是prototype(原型)，当我们访问一个对象的属性时，\n如果这个对象内部不存在这个属性，那么他就会去prototype里找这个属性，这个prototype又会有自己的prototype，\n于是就这样一直找下去，也就是我们平时所说的原型链的概念。\n关系：instance.constructor.prototype = instance.__proto__\n\n特点：\nJavaScript对象是通过引用来传递的，我们创建的每个新对象实体中并没有一份属于自己的原型副本。当我们修改原型时，与之相关的对象也会继承这一改变。\n\n\n 当我们需要一个属性的时，Javascript引擎会先看当前对象中是否有这个属性， 如果没有的话，\n 就会查找他的Prototype对象是否有这个属性，如此递推下去，一直检索到 Object 内建对象。\n    function Func(){}\n    Func.prototype.name = \"Sean\";\n    Func.prototype.getInfo = function() {\n      return this.name;\n    }\n    var person = new Func();//现在可以参考var person = Object.create(oldObject);\n    console.log(person.getInfo());//它拥有了Func的属性和方法\n    //\"Sean\"\n    console.log(Func.prototype);\n    // Func { name=\"Sean\", getInfo=function()}\n\n### JavaScript有几种类型的值？，你能画一下他们的内存图吗？\n\n栈：原始数据类型（Undefined，Null，Boolean，Number、String） \n堆：引用数据类型（对象、数组和函数）\n\n两种类型的区别是：存储位置不同；\n原始数据类型直接存储在栈(stack)中的简单数据段，占据空间小、大小固定，属于被频繁使用数据，所以放入栈中存储；\n引用数据类型存储在堆(heap)中的对象,占据空间大、大小不固定,如果存储在栈中，将会影响程序运行的性能；引用数据类型在栈中存储了指针，该指针指向堆中该实体的起始地址。当解释器寻找引用值时，会首先检索其\n在栈中的地址，取得地址后从堆中获得实体\nStated Clearly Image\n\n### Javascript如何实现继承？\n\n1、构造继承\n2、原型继承\n3、实例继承\n4、拷贝继承\n\n原型prototype机制或apply和call方法去实现较简单，建议使用构造函数与原型混合方式。\n        function Parent(){\n            this.name = 'wang';\n        }\n\n        function Child(){\n            this.age = 28;\n        }\n        Child.prototype = new Parent();//继承了Parent，通过原型\n\n        var demo = new Child();\n        alert(demo.age);\n        alert(demo.name);//得到被继承的属性\n\n### JavaScript继承的几种实现方式？\n\n参考：构造函数的继承，非构造函数的继承；\n\n### javascript创建对象的几种方式？\n\njavascript创建对象简单的说,无非就是使用内置对象或各种自定义对象，当然还可以用JSON；但写法有很多种，也能混合使用。\n\n\n1. 对象字面量的方式  \n\n```javascript\n    person={\n        firstname:\"Mark\",\n        lastname:\"Yun\",\n        age:25,\n        eyecolor:\"black\"\n        };\n ```\n\n2. 用function来模拟无参的构造函数\n```javascript\n    function Person(){}\n    var person=new Person();//定义一个function，如果使用new\"实例化\",该function可以看作是一个Class\n    person.name=\"Mark\";\n    person.age=\"25\";\n    person.work=function(){\n    alert(person.name+\" hello...\");\n    }\n    person.work();\n```\n\n3. 用function来模拟参构造函数来实现（用this关键字定义构造的上下文属性）\n```javascript\n    function Pet(name,age,hobby){\n       this.name=name;//this作用域：当前对象\n       this.age=age;\n       this.hobby=hobby;\n       this.eat=function(){\n          alert(\"我叫\"+this.name+\",我喜欢\"+this.hobby+\",是个程序员\");\n       }\n    }\n    var maidou =new Pet(\"麦兜\",25,\"coding\");//实例化、创建对象\n    maidou.eat();//调用eat方法\n```\n\n4. 用工厂方式来创建（内置对象）\n```javascript\n     var wcDog =new Object();\n     wcDog.name=\"旺财\";\n     wcDog.age=3;\n     wcDog.work=function(){\n       alert(\"我是\"+wcDog.name+\",汪汪汪......\");\n     }\n     wcDog.work();\n```\n\n5. 用原型方式来创建\n```javascript\n    function Dog(){\n     }\n     Dog.prototype.name=\"旺财\";\n     Dog.prototype.eat=function(){\n     alert(this.name+\"是个吃货\");\n     }\n     var wangcai =new Dog();\n     wangcai.eat();\n```\n\n6. 用混合方式来创建\n```javascript\n    function Car(name,price){\n      this.name=name;\n      this.price=price; \n    }\n     Car.prototype.sell=function(){\n       alert(\"我是\"+this.name+\"，我现在卖\"+this.price+\"万元\");\n      }\n    var camry =new Car(\"凯美瑞\",27);\n    camry.sell(); \n```\n### Javascript作用链域?\n\n全局函数无法查看局部函数的内部细节，但局部函数可以查看其上层的函数细节，直至全局细节。\n当需要从局部函数查找某一属性或方法时，如果当前作用域没有找到，就会上溯到上层作用域查找，\n直至全局函数，这种组织形式就是作用域链。\n谈谈This对象的理解。\n\nthis总是指向函数的直接调用者（而非间接调用者）；\n如果有new关键字，this指向new出来的那个对象；\n在事件中，this指向触发这个事件的对象，特殊的是，IE中的attachEvent中的this总是指向全局对象Window；\n### eval是做什么的？\n\n它的功能是把对应的字符串解析成JS代码并运行；\n应该避免使用eval，不安全，非常耗性能（2次，一次解析成js语句，一次执行）。\n由JSON字符串转换为JSON对象的时候可以用eval，var obj =eval('('+ str +')');\n### 什么是window对象? 什么是document对象?\n\n### null，undefined 的区别？\n\nnull        表示一个对象被定义了，值为“空值”；\nundefined   表示不存在这个值。\n\n\ntypeof undefined\n    //\"undefined\"\n    undefined :是一个表示\"无\"的原始值或者说表示\"缺少值\"，就是此处应该有一个值，但是还没有定义。当尝试读取时会返回 undefined； \n    例如变量被声明了，但没有赋值时，就等于undefined\n\ntypeof null\n    //\"object\"\n    null : 是一个对象(空对象, 没有任何属性和方法)；\n    例如作为函数的参数，表示该函数的参数不是对象；\n\n注意：\n    在验证null时，一定要使用　=== ，因为 == 无法分别 null 和　undefined\n\n\n再来一个例子：\n\n    null\n    Q：有张三这个人么？\n    A：有！\n    Q：张三有房子么？\n    A：没有！\n\n    undefined\n    Q：有张三这个人么？\n    A：没有！\n参考阅读：undefined与null的区别\n\n### 写一个通用的事件侦听器函数。\n```javascript\n    // event(事件)工具集，来源：github.com/markyun\n    markyun.Event = {\n        // 页面加载完成后\n        readyEvent : function(fn) {\n            if (fn==null) {\n                fn=document;\n            }\n            var oldonload = window.onload;\n            if (typeof window.onload != 'function') {\n                window.onload = fn;\n            } else {\n                window.onload = function() {\n                    oldonload();\n                    fn();\n                };\n            }\n        },\n        // 视能力分别使用dom0||dom2||IE方式 来绑定事件\n        // 参数： 操作的元素,事件名称 ,事件处理程序\n        addEvent : function(element, type, handler) {\n            if (element.addEventListener) {\n                //事件类型、需要执行的函数、是否捕捉\n                element.addEventListener(type, handler, false);\n            } else if (element.attachEvent) {\n                element.attachEvent('on' + type, function() {\n                    handler.call(element);\n                });\n            } else {\n                element['on' + type] = handler;\n            }\n        },\n        // 移除事件\n        removeEvent : function(element, type, handler) {\n            if (element.removeEventListener) {\n                element.removeEventListener(type, handler, false);\n            } else if (element.datachEvent) {\n                element.detachEvent('on' + type, handler);\n            } else {\n                element['on' + type] = null;\n            }\n        },\n        // 阻止事件 (主要是事件冒泡，因为IE不支持事件捕获)\n        stopPropagation : function(ev) {\n            if (ev.stopPropagation) {\n                ev.stopPropagation();\n            } else {\n                ev.cancelBubble = true;\n            }\n        },\n        // 取消事件的默认行为\n        preventDefault : function(event) {\n            if (event.preventDefault) {\n                event.preventDefault();\n            } else {\n                event.returnValue = false;\n            }\n        },\n        // 获取事件目标\n        getTarget : function(event) {\n            return event.target || event.srcElement;\n        },\n        // 获取event对象的引用，取到事件的所有信息，确保随时能使用event；\n        getEvent : function(e) {\n            var ev = e || window.event;\n            if (!ev) {\n                var c = this.getEvent.caller;\n                while (c) {\n                    ev = c.arguments[0];\n                    if (ev && Event == ev.constructor) {\n                        break;\n                    }\n                    c = c.caller;\n                }\n            }\n            return ev;\n        }\n    };\n```\n\n[\"1\", \"2\", \"3\"].map(parseInt) 答案是多少？\n\n [1, NaN, NaN] 因为 parseInt 需要两个参数 (val, radix)，\n 其中 radix 表示解析时用的基数。\n map 传了 3 个 (element, index, array)，对应的 radix 不合法导致解析失败。\n### 事件是？IE与火狐的事件机制有什么区别？ 如何阻止冒泡？\n\n 1. 我们在网页中的某个操作（有的操作对应多个事件）。例如：当我们点击一个按钮就会产生一个事件。是可以被 JavaScript 侦测到的行为。\n 2. 事件处理机制：IE是事件冒泡、Firefox同时支持两种事件模型，也就是：捕获型事件和冒泡型事件；\n 3. ev.stopPropagation();（旧ie的方法 ev.cancelBubble = true;）\n\n### 什么是闭包（closure），为什么要用它？\n\n闭包是指有权访问另一个函数作用域中变量的函数，创建闭包的最常见的方式就是在一个函数内创建另一个函数，通过另一个函数访问这个函数的局部变量,利用闭包可以突破作用链域，将函数内部的变量和方法传递到外部。\n\n闭包的特性：\n\n1.函数内再嵌套函数\n2.内部函数可以引用外层的参数和变量\n3.参数和变量不会被垃圾回收机制回收\n\n//li节点的onclick事件都能正确的弹出当前被点击的li索引\n <ul id=\"testUL\">\n    <li> index = 0</li>\n    <li> index = 1</li>\n    <li> index = 2</li>\n    <li> index = 3</li>\n</ul>\n<script type=\"text/javascript\">\n    var nodes = document.getElementsByTagName(\"li\");\n    for(i = 0;i<nodes.length;i+= 1){\n        nodes[i].onclick = function(){\n            console.log(i+1);//不用闭包的话，值每次都是4\n        }(i);\n    }\n</script>\n\n\n执行say667()后,say667()闭包内部变量会存在,而闭包内部函数的内部变量不会存在\n使得Javascript的垃圾回收机制GC不会收回say667()所占用的资源\n因为say667()的内部函数的执行需要依赖say667()中的变量\n这是对闭包作用的非常直白的描述\n\n  function say667() {\n    // Local variable that ends up within closure\n    var num = 666;\n    var sayAlert = function() {\n        alert(num);\n    }\n    num++;\n    return sayAlert;\n}\n\n var sayAlert = say667();\n sayAlert()//执行结果应该弹出的667\njavascript 代码中的\"use strict\";是什么意思 ? 使用它区别是什么？\n\nuse strict是一种ECMAscript 5 添加的（严格）运行模式,这种模式使得 Javascript 在更严格的条件下运行,\n\n使JS编码更加规范化的模式,消除Javascript语法的一些不合理、不严谨之处，减少一些怪异行为。\n默认支持的糟糕特性都会被禁用，比如不能用with，也不能在意外的情况下给全局变量赋值;\n全局变量的显示声明,函数必须声明在顶层，不允许在非函数代码块内声明函数,arguments.callee也不允许使用；\n消除代码运行的一些不安全之处，保证代码运行的安全,限制函数中的arguments修改，严格模式下的eval函数的行为和非严格模式的也不相同;\n\n提高编译器效率，增加运行速度；\n为未来新版本的Javascript标准化做铺垫。\n如何判断一个对象是否属于某个类？\n\n  使用instanceof （待完善）\n   if(a instanceof Person){\n       alert('yes');\n   }\nnew操作符具体干了什么呢?\n\n     1、创建一个空对象，并且 this 变量引用该对象，同时还继承了该函数的原型。\n     2、属性和方法被加入到 this 引用的对象中。\n     3、新创建的对象由 this 所引用，并且最后隐式的返回 this 。\n\nvar obj  = {};\nobj.__proto__ = Base.prototype;\nBase.call(obj);\n用原生JavaScript的实现过什么功能吗？\n\n### Javascript中，有一个函数，执行时对象查找时，永远不会去查找原型，这个函数是？\n\nhasOwnProperty\n\njavaScript中hasOwnProperty函数方法是返回一个布尔值，指出一个对象是否具有指定名称的属性。此方法无法检查该对象的原型链中是否具有该属性；该属性必须是对象本身的一个成员。\n使用方法：\nobject.hasOwnProperty(proName)\n其中参数object是必选项。一个对象的实例。\nproName是必选项。一个属性名称的字符串值。\n\n如果 object 具有指定名称的属性，那么JavaScript中hasOwnProperty函数方法返回 true，反之则返回 false。\n### JSON 的了解？\n\nJSON(JavaScript Object Notation) 是一种轻量级的数据交换格式。\n它是基于JavaScript的一个子集。数据格式简单, 易于读写, 占用带宽小\n如：{\"age\":\"12\", \"name\":\"back\"}\n\nJSON字符串转换为JSON对象:\nvar obj =eval('('+ str +')');\nvar obj = str.parseJSON();\nvar obj = JSON.parse(str);\n\nJSON对象转换为JSON字符串：\nvar last=obj.toJSONString();\nvar last=JSON.stringify(obj);\n[].forEach.call($$(\"*\"),function(a){a.style.outline=\"1px solid #\"+(~~(Math.random()*(1<<24))).toString(16)}) 能解释一下这段代码的意思吗？\n\n### js延迟加载的方式有哪些？\n\ndefer和async、动态创建DOM方式（用得最多）、按需异步载入js\nAjax 是什么? 如何创建一个Ajax？\n\najax的全称：Asynchronous Javascript And XML。\n异步传输+js+xml。\n所谓异步，在这里简单地解释就是：向服务器发送请求的时候，我们不必等待结果，而是可以同时做其他的事情，等到有了结果它自己会根据设定进行后续操作，与此同时，页面是不会发生整页刷新的，提高了用户体验。\n\n(1)创建XMLHttpRequest对象,也就是创建一个异步调用对象\n(2)创建一个新的HTTP请求,并指定该HTTP请求的方法、URL及验证信息\n(3)设置响应HTTP请求状态变化的函数\n(4)发送HTTP请求\n(5)获取异步调用返回的数据\n(6)使用JavaScript和DOM实现局部刷新\n同步和异步的区别?\n\n同步的概念应该是来自于OS中关于同步的概念:不同进程为协同完成某项工作而在先后次序上调整(通过阻塞,唤醒等方式).同步强调的是顺序性.谁先谁后.异步则不存在这种顺序性.\n\n同步：浏览器访问服务器请求，用户看得到页面刷新，重新发请求,等请求完，页面刷新，新内容出现，用户看到新内容,进行下一步操作。\n\n异步：浏览器访问服务器请求，用户正常操作，浏览器后端进行请求。等请求完，页面不刷新，新内容也会出现，用户看到新内容。\n\n\n### 如何解决跨域问题?\n\njsonp、 iframe、window.name、window.postMessage、服务器上设置代理页面\n页面编码和被请求的资源编码如果不一致如何处理？\n\n### 模块化开发怎么做？\n\n立即执行函数,不暴露私有成员\n\n    var module1 = (function(){\n    　　　　var _count = 0;\n    　　　　var m1 = function(){\n    　　　　　　//...\n    　　　　};\n    　　　　var m2 = function(){\n    　　　　　　//...\n    　　　　};\n    　　　　return {\n    　　　　　　m1 : m1,\n    　　　　　　m2 : m2\n    　　　　};\n    　　})();\n（待完善）\n\n### AMD（Modules/Asynchronous-Definition）、CMD（Common Module Definition）规范区别？\n\nAMD 规范在这里：https://github.com/amdjs/amdjs-api/wiki/AMD\n\nCMD 规范在这里：https://github.com/seajs/seajs/issues/242\nAsynchronous Module Definition，异步模块定义，所有的模块将被异步加载，模块加载不影响后面语句运行。所有依赖某些模块的语句均放置在回调函数中。\n\n 区别：\n\n    1. 对于依赖的模块，AMD 是提前执行，CMD 是延迟执行。不过 RequireJS 从 2.0 开始，也改成可以延迟执行（根据写法不同，处理方式不同）。CMD 推崇 as lazy as possible.\n    2. CMD 推崇依赖就近，AMD 推崇依赖前置。看代码：\n\n// CMD\ndefine(function(require, exports, module) {\n    var a = require('./a')\n    a.doSomething()\n    // 此处略去 100 行\n    var b = require('./b') // 依赖可以就近书写\n    b.doSomething()\n    // ...\n})\n\n// AMD 默认推荐\ndefine(['./a', './b'], function(a, b) { // 依赖必须一开始就写好\n    a.doSomething()\n    // 此处略去 100 行\n    b.doSomething()\n    // ...\n})\n### requireJS的核心原理是什么？（如何动态加载的？如何避免多次加载的？如何 缓存的？）\n\n谈一谈你对ECMAScript6的了解？\n\nECMAScript6 怎么写class么，为什么会出现class这种东西?\n\n异步加载JS的方式有哪些？\n\n  (1) defer，只支持IE\n\n  (2) async：\n\n  (3) 创建script，插入到DOM中，加载完毕后callBack\ndocumen.write和 innerHTML的区别\n\ndocument.write只能重绘整个页面\n\ninnerHTML可以重绘页面的一部分\nDOM操作——怎样添加、移除、移动、复制、创建和查找节点?\n\n（1）创建新节点\n  createDocumentFragment()    //创建一个DOM片段\n  createElement()   //创建一个具体的元素\n  createTextNode()   //创建一个文本节点\n（2）添加、移除、替换、插入\n  appendChild()\n  removeChild()\n  replaceChild()\n  insertBefore() //在已有的子节点前插入一个新的子节点\n（3）查找\n  getElementsByTagName()    //通过标签名称\n  getElementsByName()    //通过元素的Name属性的值(IE容错能力较强，会得到一个数组，其中包括id等于name值的)\n  getElementById()    //通过元素Id，唯一性\n.call() 和 .apply() 的区别？\n\n  例子中用 add 来替换 sub，add.call(sub,3,1) == add(3,1) ，所以运行结果为：alert(4);\n\n  注意：js 中的函数其实是对象，函数名是对 Function 对象的引用。\n\n    function add(a,b)\n    {\n        alert(a+b);\n    }\n\n    function sub(a,b)\n    {\n        alert(a-b);\n    }\n\n    add.call(sub,3,1);\n数组和对象有哪些原生方法，列举一下？\n\nJS 怎么实现一个类。怎么实例化这个类\n\nJavaScript中的作用域与变量声明提升？\n\n### 如何编写高性能的Javascript？\n\n### 那些操作会造成内存泄漏？\n\n### JQuery的源码看过吗？能不能简单概况一下它的实现原理？\n\njQuery.fn的init方法返回的this指的是什么对象？为什么要返回this？\n\njquery中如何将数组转化为json字符串，然后再转化回来？\n\njQuery 的属性拷贝(extend)的实现原理是什么，如何实现深拷贝？\n\njquery.extend 与 jquery.fn.extend的区别？\n\njQuery 的队列是如何实现的？队列可以用在哪些地方？\n\n谈一下Jquery中的bind(),live(),delegate(),on()的区别？\n\nJQuery一个对象可以同时绑定多个事件，这是如何实现的？\n\n是否知道自定义事件。jQuery里的fire函数是什么意思，什么时候用？\n\njQuery 是通过哪个方法和 Sizzle 选择器结合的？（jQuery.fn.find()进入Sizzle）\n\n针对 jQuery性能的优化方法？\n\nJquery与jQuery UI 有啥区别？\n\n*jQuery是一个js库，主要提供的功能是选择器，属性修改和事件绑定等等。\n\n*jQuery UI则是在jQuery的基础上，利用jQuery的扩展性，设计的插件。\n 提供了一些常用的界面元素，诸如对话框、拖动行为、改变大小行为等等\nJQuery的源码看过吗？能不能简单说一下它的实现原理？\n\njquery 中如何将数组转化为json字符串，然后再转化回来？\n\njQuery中没有提供这个功能，所以你需要先编写两个jQuery的扩展：\n\n    $.fn.stringifyArray = function(array) {\n        return JSON.stringify(array)\n    }\n\n    $.fn.parseArray = function(array) {\n        return JSON.parse(array)\n    }\n\n    然后调用：\n    $(\"\").stringifyArray(array)\njQuery和Zepto的区别？各自的使用场景？\n\n针对 jQuery 的优化方法？\n\n*基于Class的选择性的性能相对于Id选择器开销很大，因为需遍历所有DOM元素。\n\n*频繁操作的DOM，先缓存起来再操作。用Jquery的链式调用更好。\n 比如：var str=$(\"a\").attr(\"href\");\n\n*for (var i = size; i < arr.length; i++) {}\n for 循环每一次循环都查找了数组 (arr) 的.length 属性，在开始循环的时候设置一个变量来存储这个数字，可以让循环跑得更快：\n for (var i = size, length = arr.length; i < length; i++) {}\nZepto的点透问题如何解决？\n\njQueryUI如何自定义组件?\n\n需求：实现一个页面操作不会整页刷新的网站，并且能在浏览器前进、后退时正确响应。给出你的技术实现方案？\n\n如何判断当前脚本运行在浏览器还是node环境中？（阿里）\n\n通过判断Global对象是否为window，如果不为window，当前脚本没有运行在浏览器中\n移动端最小触控区域是多大？\n\njQuery 的 slideUp动画 ，如果目标元素是被外部事件驱动, 当鼠标快速地连续触发外部元素事件, 动画会滞后的反复执行，该如何处理呢?\n\n把 Script 标签 放在页面的最底部的body封闭之前 和封闭之后有什么区别？浏览器会如何解析它们？\n\n移动端的点击事件的有延迟，时间是多久，为什么会有？ 怎么解决这个延时？（click 有 300ms 延迟,为了实现safari的双击事件的设计，浏览器要知道你是不是要双击操作。）\n\n知道各种JS框架(Angular, Backbone, Ember, React, Meteor, Knockout...)么? 能讲出他们各自的优点和缺点么?\n\nUnderscore 对哪些 JS 原生对象进行了扩展以及提供了哪些好用的函数方法？\n\n解释JavaScript中的作用域与变量声明提升？\n\n那些操作会造成内存泄漏？\n\n内存泄漏指任何对象在您不再拥有或需要它之后仍然存在。\n垃圾回收器定期扫描对象，并计算引用了每个对象的其他对象的数量。如果一个对象的引用数量为 0（没有其他对象引用过该对象），或对该对象的惟一引用是循环的，那么该对象的内存即可回收。\n\nsetTimeout 的第一个参数使用字符串而非函数的话，会引发内存泄漏。\n闭包、控制台日志、循环（在两个对象彼此引用且彼此保留时，就会产生一个循环）\nJQuery一个对象可以同时绑定多个事件，这是如何实现的？\n\nNode.js的适用场景？\n\n(如果会用node)知道route, middleware, cluster, nodemon, pm2, server-side rendering么?\n\n解释一下 Backbone 的 MVC 实现方式？\n\n什么是“前端路由”?什么时候适合使用“前端路由”? “前端路由”有哪些优点和缺点?\n\n知道什么是webkit么? 知道怎么用浏览器的各种工具来调试和debug代码么?\n\n如何测试前端代码么? 知道BDD, TDD, Unit Test么? 知道怎么测试你的前端工程么(mocha, sinon, jasmin, qUnit..)?\n\n前端templating(Mustache, underscore, handlebars)是干嘛的, 怎么用?\n\n简述一下 Handlebars 的基本用法？\n\n简述一下 Handlerbars 的对模板的基本处理流程， 如何编译的？如何缓存的？\n\n用js实现千位分隔符?(来源：前端农民工，提示：正则+replace)\n\nfunction commafy(num) {\n     num = num + '';\n     var reg = /(-?d+)(d{3})/;\n\n    if(reg.test(num)){\n     num = num.replace(reg, '$1,$2');\n    }\n    return num;\n}\n检测浏览器版本版本有哪些方式？\n\n功能检测、userAgent特征检测\n\n比如：navigator.userAgent\n//\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_2) AppleWebKit/537.36\n  (KHTML, like Gecko) Chrome/41.0.2272.101 Safari/537.36\"\nWhat is a Polyfill?\n\npolyfill 是“在旧版浏览器上复制标准 API 的 JavaScript 补充”,可以动态地加载 JavaScript 代码或库，在不支持这些标准 API 的浏览器中模拟它们。\n例如，geolocation（地理位置）polyfill 可以在 navigator 对象上添加全局的 geolocation 对象，还能添加 getCurrentPosition 函数以及“坐标”回调对象，\n所有这些都是 W3C 地理位置 API 定义的对象和函数。因为 polyfill 模拟标准 API，所以能够以一种面向所有浏览器未来的方式针对这些 API 进行开发，\n一旦对这些 API 的支持变成绝对大多数，则可以方便地去掉 polyfill，无需做任何额外工作。\n做的项目中，有没有用过或自己实现一些 polyfill 方案（兼容性处理方案）？\n\n比如： html5shiv、Geolocation、Placeholder \n我们给一个dom同时绑定两个点击事件，一个用捕获，一个用冒泡。会执行几次事件，会先执行冒泡还是捕获？\n\nECMAScript6 相关\n\nObject.is() 与原来的比较操作符“ ===”、“ ==”的区别？\n\n两等号判等，会在比较时进行类型转换；\n三等号判等(判断严格)，比较时不进行隐式类型转换,（类型不同则会返回false）； \n\nObject.is 在三等号判等的基础上特别处理了 NaN 、-0 和 +0 ，保证 -0 和 +0 不再相同，\n但 Object.is(NaN, NaN) 会返回 true.\n\nObject.is 应被认为有其特殊的用途，而不能用它认为它比其它的相等对比更宽松或严格。\n前端框架相关\n\nreact-router 路由系统的实现原理？\n\nReact中如何解决第三方类库的问题?\n\n其他问题\n\n原来公司工作流程是怎么样的，如何与其他人协作的？如何夸部门合作的？\n\n### 你遇到过比较难的技术问题是？你是如何解决的？\n\n设计模式 知道什么是singleton, factory, strategy, decrator么?\n\n常使用的库有哪些？常用的前端开发工具？开发过什么应用或组件？\n\n### 页面重构怎么操作？\n\n网站重构：在不改变外部行为的前提下，简化结构、添加可读性，而在网站前端保持一致的行为。\n也就是说是在不改变UI的情况下，对网站进行优化，在扩展的同时保持一致的UI。\n\n### 对于传统的网站来说重构通常是：\n\n表格(table)布局改为DIV+CSS\n使网站前端兼容于现代浏览器(针对于不合规范的CSS、如对IE6有效的)\n对于移动平台的优化\n针对于SEO进行优化\n深层次的网站重构应该考虑的方面\n\n减少代码间的耦合\n让代码保持弹性\n严格按规范编写代码\n设计可扩展的API\n代替旧有的框架、语言(如VB)\n增强用户体验\n通常来说对于速度的优化也包含在重构中\n\n压缩JS、CSS、image等前端资源(通常是由服务器来解决)\n程序的性能优化(如数据读写)\n采用CDN来加速资源加载\n对于JS DOM的优化\nHTTP服务器的文件缓存\n列举IE与其他浏览器不一样的特性？\n\n1、事件不同之处：\n\n    触发事件的元素被认为是目标（target）。而在 IE 中，目标包含在 event 对象的 srcElement 属性；\n\n    获取字符代码、如果按键代表一个字符（shift、ctrl、alt除外），IE 的 keyCode 会返回字符代码（Unicode），DOM 中按键的代码和字符是分离的，要获取字符代码，需要使用 charCode 属性；\n\n    阻止某个事件的默认行为，IE 中阻止某个事件的默认行为，必须将 returnValue 属性设置为 false，Mozilla 中，需要调用 preventDefault() 方法；\n\n    停止事件冒泡，IE 中阻止事件进一步冒泡，需要设置 cancelBubble 为 true，Mozzilla 中，需要调用 stopPropagation()；\n99%的网站都需要被重构是那本书上写的？\n\n网站重构：应用web标准进行设计（第2版）\n什么叫优雅降级和渐进增强？\n\n优雅降级：Web站点在所有新式浏览器中都能正常工作，如果用户使用的是老式浏览器，则代码会针对旧版本的IE进行降级处理了,使之在旧式浏览器上以某种形式降级体验却不至于完全不能用。\n如：border-shadow\n\n渐进增强：从被所有浏览器支持的基本功能开始，逐步地添加那些只有新版本浏览器才支持的功能,向页面增加不影响基础浏览器的额外样式和功能的。当浏览器支持时，它们会自动地呈现出来并发挥作用。\n如：默认使用flash上传，但如果浏览器支持 HTML5 的文件上传功能，则使用HTML5实现更好的体验；\n是否了解公钥加密和私钥加密。\n\n一般情况下是指私钥用于对数据进行签名，公钥用于对签名进行验证;\nHTTP网站在浏览器端用公钥加密敏感数据，然后在服务器端再用私钥解密。\nWEB应用从服务器主动推送Data到客户端有那些方式？\n\nhtml5提供的Websocket\n不可见的iframe\nWebSocket通过Flash\nXHR长时间连接\nXHR Multipart Streaming\n`<script>`标签的长时间连接(可跨域)\n对Node的优点和缺点提出了自己的看法？\n\n*（优点）因为Node是基于事件驱动和无阻塞的，所以非常适合处理并发请求，\n  因此构建在Node上的代理服务器相比其他技术实现（如Ruby）的服务器表现要好得多。\n  此外，与Node代理服务器交互的客户端代码是由javascript语言编写的，\n  因此客户端和服务器端都用同一种语言编写，这是非常美妙的事情。\n\n*（缺点）Node是一个相对新的开源项目，所以不太稳定，它总是一直在变，\n  而且缺少足够多的第三方库支持。看起来，就像是Ruby/Rails当年的样子。\n\n### 你有用过哪些前端性能优化的方法？\n\n  （1） 减少http请求次数：CSS Sprites, JS、CSS源码压缩、图片大小控制合适；网页Gzip，CDN托管，data缓存 ，图片服务器。\n\n  （2） 前端模板 JS+数据，减少由于HTML标签导致的带宽浪费，前端用变量保存AJAX请求结果，每次操作本地变量，不用请求，减少请求次数\n\n  （3） 用innerHTML代替DOM操作，减少DOM操作次数，优化javascript性能。\n\n  （4） 当需要设置的样式很多时设置className而不是直接操作style。\n\n  （5） 少用全局变量、缓存DOM节点查找的结果。减少IO读取操作。\n\n  （6） 避免使用CSS Expression（css表达式)又称Dynamic properties(动态属性)。\n\n  （7） 图片预加载，将样式表放在顶部，将脚本放在底部  加上时间戳。\n\n  （8） 避免在页面的主体布局中使用table，table要等其中的内容完全下载之后才会显示出来，显示比div+css布局慢。\n  对普通的网站有一个统一的思路，就是尽量向前端优化、减少数据库操作、减少磁盘IO。向前端优化指的是，在不影响功能和体验的情况下，能在浏览器执行的不要在服务端执行，能在缓存服务器上直接返回的不要到应用服务器，程序能直接取得的结果不要到外部取得，本机内能取得的数据不要到远程取，内存能取到的不要到磁盘取，缓存中有的不要去数据库查询。减少数据库操作指减少更新次数、缓存结果减少查询次数、将数据库执行的操作尽可能的让你的程序完成（例如join查询），减少磁盘IO指尽量不使用文件系统作为缓存、减少读写文件次数等。程序优化永远要优化慢的部分，换语言是无法“优化”的。\n\n### http状态码有那些？分别代表是什么意思？\n\n    简单版\n    [\n        100  Continue   继续，一般在发送post请求时，已发送了http header之后服务端将返回此信息，表示确认，之后发送具体参数信息\n        200  OK         正常返回信息\n        201  Created    请求成功并且服务器创建了新的资源\n        202  Accepted   服务器已接受请求，但尚未处理\n        301  Moved Permanently  请求的网页已永久移动到新位置。\n        302 Found       临时性重定向。\n        303 See Other   临时性重定向，且总是使用 GET 请求新的 URI。\n        304  Not Modified 自从上次请求后，请求的网页未修改过。\n\n        400 Bad Request  服务器无法理解请求的格式，客户端不应当尝试再次使用相同的内容发起请求。\n        401 Unauthorized 请求未授权。\n        403 Forbidden   禁止访问。\n        404 Not Found   找不到如何与 URI 相匹配的资源。\n\n        500 Internal Server Error  最常见的服务器端错误。\n        503 Service Unavailable 服务器端暂时无法处理请求（可能是过载或维护）。\n    ]\n\n  完整版\n  1**(信息类)：表示接收到请求并且继续处理\n    100——客户必须继续发出请求\n    101——客户要求服务器根据请求转换HTTP协议版本\n\n  2**(响应成功)：表示动作被成功接收、理解和接受\n    200——表明该请求被成功地完成，所请求的资源发送回客户端\n    201——提示知道新文件的URL\n    202——接受和处理、但处理未完成\n    203——返回信息不确定或不完整\n    204——请求收到，但返回信息为空\n    205——服务器完成了请求，用户代理必须复位当前已经浏览过的文件\n    206——服务器已经完成了部分用户的GET请求\n\n  3**(重定向类)：为了完成指定的动作，必须接受进一步处理\n    300——请求的资源可在多处得到\n    301——本网页被永久性转移到另一个URL\n    302——请求的网页被转移到一个新的地址，但客户访问仍继续通过原始URL地址，重定向，新的URL会在response中的Location中返回，浏览器将会使用新的URL发出新的Request。\n    303——建议客户访问其他URL或访问方式\n    304——自从上次请求后，请求的网页未修改过，服务器返回此响应时，不会返回网页内容，代表上次的文档已经被缓存了，还可以继续使用\n    305——请求的资源必须从服务器指定的地址得到\n    306——前一版本HTTP中使用的代码，现行版本中不再使用\n    307——申明请求的资源临时性删除\n\n  4**(客户端错误类)：请求包含错误语法或不能正确执行\n    400——客户端请求有语法错误，不能被服务器所理解\n    401——请求未经授权，这个状态代码必须和WWW-Authenticate报头域一起使用\n    HTTP 401.1 - 未授权：登录失败\n    　　HTTP 401.2 - 未授权：服务器配置问题导致登录失败\n    　　HTTP 401.3 - ACL 禁止访问资源\n    　　HTTP 401.4 - 未授权：授权被筛选器拒绝\n    HTTP 401.5 - 未授权：ISAPI 或 CGI 授权失败\n    402——保留有效ChargeTo头响应\n    403——禁止访问，服务器收到请求，但是拒绝提供服务\n    HTTP 403.1 禁止访问：禁止可执行访问\n    　　HTTP 403.2 - 禁止访问：禁止读访问\n    　　HTTP 403.3 - 禁止访问：禁止写访问\n    　　HTTP 403.4 - 禁止访问：要求 SSL\n    　　HTTP 403.5 - 禁止访问：要求 SSL 128\n    　　HTTP 403.6 - 禁止访问：IP 地址被拒绝\n    　　HTTP 403.7 - 禁止访问：要求客户证书\n    　　HTTP 403.8 - 禁止访问：禁止站点访问\n    　　HTTP 403.9 - 禁止访问：连接的用户过多\n    　　HTTP 403.10 - 禁止访问：配置无效\n    　　HTTP 403.11 - 禁止访问：密码更改\n    　　HTTP 403.12 - 禁止访问：映射器拒绝访问\n    　　HTTP 403.13 - 禁止访问：客户证书已被吊销\n    　　HTTP 403.15 - 禁止访问：客户访问许可过多\n    　　HTTP 403.16 - 禁止访问：客户证书不可信或者无效\n    HTTP 403.17 - 禁止访问：客户证书已经到期或者尚未生效\n    404——一个404错误表明可连接服务器，但服务器无法取得所请求的网页，请求资源不存在。eg：输入了错误的URL\n    405——用户在Request-Line字段定义的方法不允许\n    406——根据用户发送的Accept拖，请求资源不可访问\n    407——类似401，用户必须首先在代理服务器上得到授权\n    408——客户端没有在用户指定的饿时间内完成请求\n    409——对当前资源状态，请求不能完成\n    410——服务器上不再有此资源且无进一步的参考地址\n    411——服务器拒绝用户定义的Content-Length属性请求\n    412——一个或多个请求头字段在当前请求中错误\n    413——请求的资源大于服务器允许的大小\n    414——请求的资源URL长于服务器允许的长度\n    415——请求资源不支持请求项目格式\n    416——请求中包含Range请求头字段，在当前请求资源范围内没有range指示值，请求也不包含If-Range请求头字段\n    417——服务器不满足请求Expect头字段指定的期望值，如果是代理服务器，可能是下一级服务器不能满足请求长。\n\n  5**(服务端错误类)：服务器不能正确执行一个正确的请求\n    HTTP 500 - 服务器遇到错误，无法完成请求\n    　　HTTP 500.100 - 内部服务器错误 - ASP 错误\n    　　HTTP 500-11 服务器关闭\n    　　HTTP 500-12 应用程序重新启动\n    　　HTTP 500-13 - 服务器太忙\n    　　HTTP 500-14 - 应用程序无效\n    　　HTTP 500-15 - 不允许请求 global.asa\n    　　Error 501 - 未实现\n  HTTP 502 - 网关错误\n  HTTP 503：由于超载或停机维护，服务器目前无法使用，一段时间后可能恢复正常\n\n### 一个页面从输入 URL 到页面加载显示完成，这个过程中都发生了什么？（流程说的越详细越好）\n\n  注：这题胜在区分度高，知识点覆盖广，再不懂的人，也能答出几句，\n  而高手可以根据自己擅长的领域自由发挥，从URL规范、HTTP协议、DNS、CDN、数据库查询、\n  到浏览器流式解析、CSS规则构建、layout、paint、onload/domready、JS执行、JS API绑定等等；\n\n  详细版：\n    1、浏览器会开启一个线程来处理这个请求，对 URL 分析判断如果是 http 协议就按照 Web 方式来处理;\n    2、调用浏览器内核中的对应方法，比如 WebView 中的 loadUrl 方法;\n    3、通过DNS解析获取网址的IP地址，设置 UA 等信息发出第二个GET请求;\n    4、进行HTTP协议会话，客户端发送报头(请求报头);\n    5、进入到web服务器上的 Web Server，如 Apache、Tomcat、Node.JS 等服务器;\n    6、进入部署好的后端应用，如 PHP、Java、JavaScript、Python 等，找到对应的请求处理;\n    7、处理结束回馈报头，此处如果浏览器访问过，缓存上有对应资源，会与服务器最后修改时间对比，一致则返回304;\n    8、浏览器开始下载html文档(响应报头，状态码200)，同时使用缓存;\n    9、文档树建立，根据标记请求所需指定MIME类型的文件（比如css、js）,同时设置了cookie;\n    10、页面开始渲染DOM，JS根据DOM API操作DOM,执行事件绑定等，页面显示完成。\n\n  简洁版：\n    浏览器根据请求的URL交给DNS域名解析，找到真实IP，向服务器发起请求；\n    服务器交给后台处理完成后返回数据，浏览器接收文件（HTML、JS、CSS、图象等）；\n    浏览器对加载到的资源（HTML、JS、CSS等）进行语法解析，建立相应的内部数据结构（如HTML的DOM）；\n    载入解析到的资源文件，渲染页面，完成。\n### 部分地区用户反应网站很卡，请问有哪些可能性的原因，以及解决方法？\n\n从打开app到刷新出内容，整个过程中都发生了什么，如果感觉慢，怎么定位问题，怎么解决?\n\n除了前端以外还了解什么其它技术么？你最最厉害的技能是什么？\n\n你用的得心应手用的熟练地编辑器&开发环境是什么样子？\n\nSublime Text 3 + 相关插件编写前端代码\nGoogle chrome 、Mozilla Firefox浏览器 +firebug 兼容测试和预览页面UI、动画效果和交互功能\nNode.js+Gulp\ngit 用于版本控制和Code Review\n对前端工程师这个职位是怎么样理解的？它的前景会怎么样？\n\n前端是最贴近用户的程序员，比后端、数据库、产品经理、运营、安全都近。\n1、实现界面交互\n2、提升用户体验\n3、有了Node.js，前端可以实现服务端的一些事情\n\n\n前端是最贴近用户的程序员，前端的能力就是能让产品从 90分进化到 100 分，甚至更好，\n\n参与项目，快速高质量完成实现效果图，精确到1px；\n\n与团队成员，UI设计，产品经理的沟通；\n\n做好的页面结构，页面重构和用户体验；\n\n处理hack，兼容、写出优美的代码格式；\n\n针对服务器的优化、拥抱最新前端技术。\n你怎么看待Web App 、hybrid App、Native App？\n\n你移动端前端开发的理解？（和 Web 前端开发的主要区别是什么？）\n\n你对加班的看法？\n\n加班就像借钱，原则应当是------救急不救穷\n平时如何管理你的项目？\n\n先期团队必须确定好全局样式（globe.css），编码模式(utf-8) 等；\n\n编写习惯必须一致（例如都是采用继承式的写法，单样式都写成一行）；\n\n标注样式编写人，各模块都及时标注（标注关键样式调用的地方）；\n\n页面进行标注（例如 页面 模块 开始和结束）；\n\nCSS跟HTML 分文件夹并行存放，命名都得统一（例如style.css）；\n\nJS 分文件夹存放 命名以该JS功能为准的英文翻译。\n\n图片采用整合的 images.png png8 格式文件使用 尽量整合在一起使用方便将来的管理\n如何设计突发大规模并发架构？\n\n当团队人手不足，把功能代码写完已经需要加班的情况下，你会做前端代码的测试吗？\n\n说说最近最流行的一些东西吧？常去哪些网站？\n\n    ES6\\WebAssembly\\Node\\MVVM\\Web Components\\React\\React Native\\Webpack 组件化\n### 知道什么是SEO并且怎么优化么? 知道各种meta data的含义么?\n\n移动端（Android IOS）怎么做好用户体验?\n\n清晰的视觉纵线、\n信息的分组、极致的减法、\n利用选择代替输入、\n标签及文字的排布方式、\n依靠明文确认密码、\n合理的键盘利用、\n简单描述一下你做过的移动APP项目研发流程？\n\n你在现在的团队处于什么样的角色，起到了什么明显的作用？\n\n你认为怎样才是全端工程师（Full Stack developer）？\n\n介绍一个你最得意的作品吧？\n\n你有自己的技术博客吗，用了哪些技术？\n\n对前端安全有什么看法？\n\n是否了解Web注入攻击，说下原理，最常见的两种攻击（XSS 和 CSRF）了解到什么程度？\n\n项目中遇到国哪些印象深刻的技术难题，具体是什么问题，怎么解决？。\n\n最近在学什么东西？\n\n你的优点是什么？缺点是什么？\n\n如何管理前端团队?\n    \n最近在学什么？能谈谈你未来3，5年给自己的规划吗？\n\n\n\n","slug":"2017-03-06-前端面试总结","published":1,"updated":"2020-03-01T12:32:04.566Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckreo13r00041ytt5gq9zd15u","content":"<h3 id=\"Doctype作用？标准模式与兼容模式各有什么区别\"><a href=\"#Doctype作用？标准模式与兼容模式各有什么区别\" class=\"headerlink\" title=\"Doctype作用？标准模式与兼容模式各有什么区别?\"></a>Doctype作用？标准模式与兼容模式各有什么区别?</h3><p>（1）、&lt;!DOCTYPE&gt;声明位于位于HTML文档中的第一行，处于 <html> 标签之前。告知浏览器的解析器用什么文档标准解析这个文档。DOCTYPE不存在或格式不正确会导致文档以兼容模式呈现。</p>\n<p>（2）、标准模式的排版 和JS运作模式都是以该浏览器支持的最高标准运行。在兼容模式中，页面以宽松的向后兼容的方式显示,模拟老式浏览器的行为以防止站点无法工作。<br>HTML5 为什么只需要写 <!DOCTYPE HTML>？</p>\n<p> HTML5 不基于 SGML，因此不需要对DTD进行引用，但是需要doctype来规范浏览器的行为（让浏览器按照它们应该的方式来运行）；</p>\n<p> 而HTML4.01基于SGML,所以需要对DTD进行引用，才能告知浏览器文档所使用的文档类型。</p>\n<a id=\"more\"></a>\n<p>行内元素有哪些？块级元素有哪些？ 空(void)元素有那些？</p>\n<p>首先：CSS规范规定，每个元素都有display属性，确定该元素的类型，每个元素都有默认的display值，如div的display默认值为“block”，则为“块级”元素；span默认display属性值为“inline”，是“行内”元素。</p>\n<h4 id=\"（1）行内元素有：\"><a href=\"#（1）行内元素有：\" class=\"headerlink\" title=\"（1）行内元素有：\"></a>（1）行内元素有：</h4><p>  a b span img input select strong（强调的语气）</p>\n<h4 id=\"（2）块级元素有：\"><a href=\"#（2）块级元素有：\" class=\"headerlink\" title=\"（2）块级元素有：\"></a>（2）块级元素有：</h4><p>   div ul ol li dl dt dd h1 h2 h3 h4…p</p>\n<h4 id=\"（3）常见的空元素：\"><a href=\"#（3）常见的空元素：\" class=\"headerlink\" title=\"（3）常见的空元素：\"></a>（3）常见的空元素：</h4><pre><code>&lt;br&gt; &lt;hr&gt; &lt;img&gt; &lt;input&gt; &lt;link&gt; &lt;meta&gt;\n鲜为人知的是：\n&lt;area&gt; &lt;base&gt; &lt;col&gt; &lt;command&gt; &lt;embed&gt; &lt;keygen&gt; &lt;param&gt; &lt;source&gt; &lt;track&gt; &lt;wbr&gt;</code></pre><h3 id=\"页面导入样式时，使用link和-import有什么区别？\"><a href=\"#页面导入样式时，使用link和-import有什么区别？\" class=\"headerlink\" title=\"页面导入样式时，使用link和@import有什么区别？\"></a>页面导入样式时，使用link和@import有什么区别？</h3><p>（1）link属于XHTML标签，除了加载CSS外，还能用于定义RSS, 定义rel连接属性等作用；而@import是CSS提供的，只能用于加载CSS;</p>\n<p>（2）页面被加载的时，link会同时被加载，而@import引用的CSS会等到页面被加载完再加载;</p>\n<p>（3）import是CSS2.1 提出的，只在IE5以上才能被识别，而link是XHTML标签，无兼容问题;</p>\n<h3 id=\"介绍一下你对浏览器内核的理解？\"><a href=\"#介绍一下你对浏览器内核的理解？\" class=\"headerlink\" title=\"介绍一下你对浏览器内核的理解？\"></a>介绍一下你对浏览器内核的理解？</h3><p>主要分成两部分：渲染引擎(layout engineer或Rendering Engine)和JS引擎。</p>\n<p><strong>渲染引擎</strong>：负责取得网页的内容（HTML、XML、图像等等）、整理讯息（例如加入CSS等），以及计算网页的显示方式，然后会输出至显示器或打印机。浏览器的内核的不同对于网页的语法解释会有不同，所以渲染的效果也不相同。所有网页浏览器、电子邮件客户端以及其它需要编辑、显示网络内容的应用程序都需要内核。</p>\n<p><strong>JS引擎</strong>：解析和执行javascript来实现网页的动态效果。</p>\n<p>最开始渲染引擎和JS引擎并没有区分的很明确，后来JS引擎越来越独立，内核就倾向于只指渲染引擎。</p>\n<h4 id=\"常见的浏览器内核有哪些？\"><a href=\"#常见的浏览器内核有哪些？\" class=\"headerlink\" title=\"常见的浏览器内核有哪些？\"></a>常见的浏览器内核有哪些？</h4><p>Trident内核：IE,MaxThon,TT,The World,360,搜狗浏览器等。[又称MSHTML]<br>Gecko内核：Netscape6及以上版本，FF,MozillaSuite/SeaMonkey等<br>Presto内核：Opera7及以上。      [Opera内核原为：Presto，现为：Blink;]<br>Webkit内核：Safari,Chrome等。   [ Chrome的：Blink（WebKit的分支）]</p>\n<h3 id=\"html5有哪些新特性、移除了那些元素？如何处理HTML5新标签的浏览器兼容问题？如何区分-HTML-和-HTML5？\"><a href=\"#html5有哪些新特性、移除了那些元素？如何处理HTML5新标签的浏览器兼容问题？如何区分-HTML-和-HTML5？\" class=\"headerlink\" title=\"html5有哪些新特性、移除了那些元素？如何处理HTML5新标签的浏览器兼容问题？如何区分 HTML 和 HTML5？\"></a>html5有哪些新特性、移除了那些元素？如何处理HTML5新标签的浏览器兼容问题？如何区分 HTML 和 HTML5？</h3><ul>\n<li><p>HTML5 现在已经不是 SGML 的子集，主要是关于图像，位置，存储，多任务等功能的增加。</p>\n<pre><code>绘画 canvas;\n用于媒介回放的 video 和 audio 元素;\n本地离线存储 localStorage 长期存储数据，浏览器关闭后数据不丢失;\nsessionStorage 的数据在浏览器关闭后自动删除;\n语意化更好的内容元素，比如 article、footer、header、nav、section;\n表单控件，calendar、date、time、email、url、search;\n新的技术webworker, websocket, Geolocation;</code></pre><p>移除的元素：</p>\n<pre><code>纯表现的元素：basefont，big，center，font, s，strike，tt，u;\n对可用性产生负面影响的元素：frame，frameset，noframes；</code></pre></li>\n<li><p>支持HTML5新标签：<br>   IE8/IE7/IE6支持通过document.createElement方法产生的标签，<br>   可以利用这一特性让这些浏览器支持HTML5新标签，<br>   浏览器支持新标签后，还需要添加标签默认的样式。</p>\n<p>   当然也可以直接使用成熟的框架、比如html5shim;</p>\n   <!--[if lt IE 9]>\n      <script> src=\"http://html5shim.googlecode.com/svn/trunk/html5.js\"</script>\n   <![endif]-->\n</li>\n<li><p>如何区分HTML5： DOCTYPE声明\\新增的结构元素\\功能元素<br>简述一下你对HTML语义化的理解？</p>\n</li>\n</ul>\n<p>用正确的标签做正确的事情。<br>html语义化让页面的内容结构化，结构更清晰，便于对浏览器、搜索引擎解析;<br>即使在没有样式CSS情况下也以一种文档格式显示，并且是容易阅读的;<br>搜索引擎的爬虫也依赖于HTML标记来确定上下文和各个关键字的权重，利于SEO;<br>使阅读源代码的人对网站更容易将网站分块，便于阅读维护理解。<br>HTML5的离线储存怎么使用，工作原理能不能解释一下？</p>\n<p>在用户没有与因特网连接时，可以正常访问站点或应用，在用户与因特网连接时，更新用户机器上的缓存文件。<br>原理：HTML5的离线存储是基于一个新建的.appcache文件的缓存机制(不是存储技术)，通过这个文件上的解析清单离线存储资源，这些资源就会像cookie一样被存储了下来。之后当网络在处于离线状态下时，浏览器会通过被离线存储的数据进行页面展示。</p>\n<p>如何使用：<br>1、页面头部像下面一样加入一个manifest的属性；<br>2、在cache.manifest文件的编写离线存储的资源；<br>    CACHE MANIFEST<br>    #v0.11<br>    CACHE:<br>    js/app.js<br>    css/style.css<br>    NETWORK:<br>    resourse/logo.png<br>    FALLBACK:<br>    / /offline.html<br>3、在离线状态时，操作window.applicationCache进行需求实现。<br>详细的使用请参考：<a href=\"https://segmentfault.com/a/1190000000732617\" target=\"_blank\" rel=\"noopener\">有趣的HTML5：离线存储</a></p>\n<h3 id=\"浏览器是怎么对HTML5的离线储存资源进行管理和加载的呢？\"><a href=\"#浏览器是怎么对HTML5的离线储存资源进行管理和加载的呢？\" class=\"headerlink\" title=\"浏览器是怎么对HTML5的离线储存资源进行管理和加载的呢？\"></a>浏览器是怎么对HTML5的离线储存资源进行管理和加载的呢？</h3><p>在线的情况下，浏览器发现html头部有manifest属性，它会请求manifest文件，如果是第一次访问app，那么浏览器就会根据manifest文件的内容下载相应的资源并且进行离线存储。如果已经访问过app并且资源已经离线存储了，那么浏览器就会使用离线的资源加载页面，然后浏览器会对比新的manifest文件与旧的manifest文件，如果文件没有发生改变，就不做任何操作，如果文件改变了，那么就会重新下载文件中的资源并进行离线存储。<br>离线的情况下，浏览器就直接使用离线存储的资源。<br>详细的使用请参考：有趣的HTML5：离线存储</p>\n<h3 id=\"请描述一下-cookies，sessionStorage-和-localStorage-的区别？\"><a href=\"#请描述一下-cookies，sessionStorage-和-localStorage-的区别？\" class=\"headerlink\" title=\"请描述一下 cookies，sessionStorage 和 localStorage 的区别？\"></a>请描述一下 cookies，sessionStorage 和 localStorage 的区别？</h3><p>cookie是网站为了标示用户身份而储存在用户本地终端（Client Side）上的数据（通常经过加密）。<br>cookie数据始终在同源的http请求中携带（即使不需要），记会在浏览器和服务器间来回传递。<br>sessionStorage和localStorage不会自动把数据发给服务器，仅在本地保存。</p>\n<ul>\n<li><p>存储大小：<br>  cookie数据大小不能超过4k。<br>  sessionStorage和localStorage 虽然也有存储大小的限制，但比cookie大得多，可以达到5M或更大。</p>\n</li>\n<li><p>有期时间：<br>  localStorage    存储持久数据，浏览器关闭后数据不丢失除非主动删除数据；<br>  sessionStorage  数据在当前浏览器窗口关闭后自动删除。<br>  cookie          设置的cookie过期时间之前一直有效，即使窗口或浏览器关闭。</p>\n<h3 id=\"iframe有哪些缺点？\"><a href=\"#iframe有哪些缺点？\" class=\"headerlink\" title=\"iframe有哪些缺点？\"></a>iframe有哪些缺点？</h3></li>\n</ul>\n<ol>\n<li>iframe会阻塞主页面的Onload事件；</li>\n<li>搜索引擎的检索程序无法解读这种页面，不利于SEO;</li>\n<li>iframe和主页面共享连接池，而浏览器对相同域的连接有限制，所以会影响页面的并行加载。</li>\n<li>使用iframe之前需要考虑这两个缺点。如果需要使用iframe，最好是通过javascript<br>动态给iframe添加src属性值，这样可以绕开以上两个问题。</li>\n</ol>\n<h3 id=\"Label的作用是什么？是怎么用的？\"><a href=\"#Label的作用是什么？是怎么用的？\" class=\"headerlink\" title=\"Label的作用是什么？是怎么用的？\"></a>Label的作用是什么？是怎么用的？</h3><p>label标签来定义表单控制间的关系,当用户选择该标签时，浏览器会自动将焦点转到和标签相关的表单控件上。</p>\n<p><code>&lt;label for=&quot;Name&quot;&gt;Number:&lt;/label&gt;\n&lt;input type=“text“name=&quot;Name&quot; id=&quot;Name&quot;/&gt;</code></p>\n<p><code>&lt;label&gt;Date:&lt;input type=&quot;text&quot; name=&quot;B&quot;/&gt;&lt;/label&gt;</code></p>\n<h3 id=\"HTML5的form如何关闭自动完成功能？\"><a href=\"#HTML5的form如何关闭自动完成功能？\" class=\"headerlink\" title=\"HTML5的form如何关闭自动完成功能？\"></a>HTML5的form如何关闭自动完成功能？</h3><p>给不想要提示的 form 或某个 input 设置为 autocomplete=off。</p>\n<h3 id=\"如何实现浏览器内多个标签页之间的通信-阿里\"><a href=\"#如何实现浏览器内多个标签页之间的通信-阿里\" class=\"headerlink\" title=\"如何实现浏览器内多个标签页之间的通信? (阿里)\"></a>如何实现浏览器内多个标签页之间的通信? (阿里)</h3><p>WebSocket、SharedWorker；<br>也可以调用localstorge、cookies等本地存储方式；</p>\n<p>localstorge另一个浏览上下文里被添加、修改或删除时，它都会触发一个事件，<br>我们通过监听事件，控制它的值来进行页面信息通信；<br>注意quirks：Safari 在无痕模式下设置localstorge值时会抛出 QuotaExceededError 的异常；</p>\n<h3 id=\"webSocket如何兼容低浏览器？-阿里\"><a href=\"#webSocket如何兼容低浏览器？-阿里\" class=\"headerlink\" title=\"webSocket如何兼容低浏览器？(阿里)\"></a>webSocket如何兼容低浏览器？(阿里)</h3><p>Adobe Flash Socket 、<br>ActiveX HTMLFile (IE) 、<br>基于 multipart 编码发送 XHR 、<br>基于长轮询的 XHR<br>页面可见性（Page Visibility API） 可以有哪些用途？</p>\n<p>通过 visibilityState 的值检测页面当前是否可见，以及打开网页的时间等;<br>在页面被切换到其他后台进程的时候，自动暂停音乐或视频的播放；</p>\n<h3 id=\"如何在页面上实现一个圆形的可点击区域？\"><a href=\"#如何在页面上实现一个圆形的可点击区域？\" class=\"headerlink\" title=\"如何在页面上实现一个圆形的可点击区域？\"></a>如何在页面上实现一个圆形的可点击区域？</h3><p>1、map+area或者svg<br>2、border-radius<br>3、纯js实现 需要求一个点在不在圆上简单算法、获取鼠标坐标等等<br>实现不使用 border 画出1px高的线，在不同浏览器的标准模式与怪异模式下都能保持一致的效果。</p>\n<p><code>&lt;div style=&quot;height:1px;overflow:hidden;background:red&quot;&gt;&lt;/div&gt;</code></p>\n<h3 id=\"网页验证码是干嘛的，是为了解决什么安全问题。\"><a href=\"#网页验证码是干嘛的，是为了解决什么安全问题。\" class=\"headerlink\" title=\"网页验证码是干嘛的，是为了解决什么安全问题。\"></a>网页验证码是干嘛的，是为了解决什么安全问题。</h3><p>区分用户是计算机还是人的公共全自动程序。可以防止恶意破解密码、刷票、论坛灌水；<br>有效防止黑客对某一个特定注册用户用特定程序暴力破解方式进行不断的登陆尝试。</p>\n<h3 id=\"title与h1的区别、b与strong的区别、i与em的区别？\"><a href=\"#title与h1的区别、b与strong的区别、i与em的区别？\" class=\"headerlink\" title=\"title与h1的区别、b与strong的区别、i与em的区别？\"></a>title与h1的区别、b与strong的区别、i与em的区别？</h3><p>title属性没有明确意义只表示是个标题，H1则表示层次明确的标题，对页面信息的抓取也有很大的影响；</p>\n<p>strong是标明重点内容，有语气加强的含义，使用阅读设备阅读网络时：<strong>会重读，而<B>是展示强调内容。</p>\n<p>i内容展示为斜体，em表示强调的文本；</p>\n<p>Physical Style Elements – 自然样式标签<br>b, i, u, s, pre<br>Semantic Style Elements – 语义样式标签<br>strong, em, ins, del, code<br>应该准确使用语义样式标签, 但不能滥用, 如果不能确定时首选使用自然样式标签。<br>CSS</p>\n<h3 id=\"介绍一下标准的CSS的盒子模型？低版本IE的盒子模型有什么不同的？\"><a href=\"#介绍一下标准的CSS的盒子模型？低版本IE的盒子模型有什么不同的？\" class=\"headerlink\" title=\"介绍一下标准的CSS的盒子模型？低版本IE的盒子模型有什么不同的？\"></a>介绍一下标准的CSS的盒子模型？低版本IE的盒子模型有什么不同的？</h3><p>（1）有两种， IE 盒子模型、W3C 盒子模型；<br>（2）盒模型： 内容(content)、填充(padding)、边界(margin)、 边框(border)；<br>（3）区  别： IE的content部分把 border 和 padding计算了进去;</p>\n<h4 id=\"CSS选择符有哪些？哪些属性可以继承？\"><a href=\"#CSS选择符有哪些？哪些属性可以继承？\" class=\"headerlink\" title=\"CSS选择符有哪些？哪些属性可以继承？\"></a>CSS选择符有哪些？哪些属性可以继承？</h4><ul>\n<li><p>1.id选择器（ # myid）<br>2.类选择器（.myclassname）<br>3.标签选择器（div, h1, p）<br>4.相邻选择器（h1 + p）<br>5.子选择器（ul &gt; li）<br>6.后代选择器（li a）<br>7.通配符选择器（ * ）<br>8.属性选择器（a[rel = “external”]）<br>9.伪类选择器（a:hover, li:nth-child）</p>\n</li>\n<li><p>可继承的样式： font-size font-family color, UL LI DL DD DT;</p>\n</li>\n<li><p>不可继承的样式：border padding margin width height ;<br>CSS优先级算法如何计算？</p>\n</li>\n<li><p>优先级就近原则，同权重情况下样式定义最近者为准;</p>\n</li>\n<li><p>载入样式以最后载入的定位为准;</p>\n</li>\n</ul>\n<p>优先级为:<br>   !important &gt;  id &gt; class &gt; tag<br>    important 比 内联优先级高</p>\n<h3 id=\"CSS3新增伪类有那些？\"><a href=\"#CSS3新增伪类有那些？\" class=\"headerlink\" title=\"CSS3新增伪类有那些？\"></a>CSS3新增伪类有那些？</h3><pre><code>举例：\np:first-of-type 选择属于其父元素的首个 &lt;p&gt; 元素的每个 &lt;p&gt; 元素。\np:last-of-type  选择属于其父元素的最后 &lt;p&gt; 元素的每个 &lt;p&gt; 元素。\np:only-of-type  选择属于其父元素唯一的 &lt;p&gt; 元素的每个 &lt;p&gt; 元素。\np:only-child        选择属于其父元素的唯一子元素的每个 &lt;p&gt; 元素。\np:nth-child(2)  选择属于其父元素的第二个子元素的每个 &lt;p&gt; 元素。\n\n:after          在元素之前添加内容,也可以用来做清除浮动。\n:before         在元素之后添加内容\n:enabled        \n:disabled       控制表单控件的禁用状态。\n:checked        单选框或复选框被选中。</code></pre><h3 id=\"如何居中div？如何居中一个浮动元素？如何让绝对定位的div居中？\"><a href=\"#如何居中div？如何居中一个浮动元素？如何让绝对定位的div居中？\" class=\"headerlink\" title=\"如何居中div？如何居中一个浮动元素？如何让绝对定位的div居中？\"></a>如何居中div？如何居中一个浮动元素？如何让绝对定位的div居中？</h3><p>给div设置一个宽度，然后添加margin:0 auto属性</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">div</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>:<span class=\"number\">200px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>:<span class=\"number\">0</span> auto;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"居中一个浮动元素\"><a href=\"#居中一个浮动元素\" class=\"headerlink\" title=\"居中一个浮动元素\"></a>居中一个浮动元素</h4><p>  确定容器的宽高 宽500 高 300 的层<br>  设置层的外边距</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.div</span> &#123;</span><br><span class=\"line\">     width:500px ; height:300px;//高度可以不设</span><br><span class=\"line\">     <span class=\"selector-tag\">margin</span>: <span class=\"selector-tag\">-150px</span> 0 0 <span class=\"selector-tag\">-250px</span>;</span><br><span class=\"line\">     position:relative;         //相对定位</span><br><span class=\"line\">     background-color:pink;     //方便看效果</span><br><span class=\"line\">     <span class=\"selector-tag\">left</span><span class=\"selector-pseudo\">:50</span>%;</span><br><span class=\"line\">     <span class=\"selector-tag\">top</span><span class=\"selector-pseudo\">:50</span>%;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"让绝对定位的div居中\"><a href=\"#让绝对定位的div居中\" class=\"headerlink\" title=\"让绝对定位的div居中\"></a>让绝对定位的div居中</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.div</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">1200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: none;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">0</span> auto;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">bottom</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">right</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"display有哪些值？说明他们的作用。\"><a href=\"#display有哪些值？说明他们的作用。\" class=\"headerlink\" title=\"display有哪些值？说明他们的作用。\"></a>display有哪些值？说明他们的作用。</h3><p>  block         象块类型元素一样显示。<br>  none          缺省值。象行内元素类型一样显示。<br>  inline-block  象行内元素一样显示，但其内容象块类型元素一样显示。<br>  list-item     象块类型元素一样显示，并添加样式列表标记。<br>  table         此元素会作为块级表格来显示<br>  inherit       规定应该从父元素继承 display 属性的值</p>\n<h3 id=\"position的值relative和absolute定位原点是？\"><a href=\"#position的值relative和absolute定位原点是？\" class=\"headerlink\" title=\"position的值relative和absolute定位原点是？\"></a>position的值relative和absolute定位原点是？</h3><p>  absolute<br>    生成绝对定位的元素，相对于值不为 static的第一个父元素进行定位。</p>\n<p>  fixed （老IE不支持）<br>    生成绝对定位的元素，相对于浏览器窗口进行定位。</p>\n<p>  relative<br>    生成相对定位的元素，相对于其正常位置进行定位。</p>\n<p>  static<br>    默认值。没有定位，元素出现在正常的流中（忽略 top, bottom, left, right z-index 声明）。</p>\n<p>  inherit<br>    规定从父元素继承 position 属性的值。</p>\n<h3 id=\"CSS3有哪些新特性？\"><a href=\"#CSS3有哪些新特性？\" class=\"headerlink\" title=\"CSS3有哪些新特性？\"></a>CSS3有哪些新特性？</h3><p>  新增各种CSS选择器  （: not(.input)：所有 class 不是“input”的节点）<br>  圆角           （border-radius:8px）<br>  多列布局        （multi-column layout）<br>  阴影和反射        （Shadow\\Reflect）<br>  文字特效      （text-shadow、）<br>  文字渲染      （Text-decoration）<br>  线性渐变      （gradient）<br>  旋转          （transform）<br>  增加了旋转,缩放,定位,倾斜,动画，多背景<br>  transform:\\scale(0.85,0.90)\\ translate(0px,-30px)\\ skew(-9deg,0deg)\\Animation:<br>请解释一下CSS3的Flexbox（弹性盒布局模型）,以及适用场景？</p>\n<p> .</p>\n<h3 id=\"用纯CSS创建一个三角形的原理是什么？\"><a href=\"#用纯CSS创建一个三角形的原理是什么？\" class=\"headerlink\" title=\"用纯CSS创建一个三角形的原理是什么？\"></a>用纯CSS创建一个三角形的原理是什么？</h3><p>把上、左、右三条边隐藏掉（颜色设为 transparent）</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#demo</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border-width</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border-style</span>: solid;</span><br><span class=\"line\">  <span class=\"attribute\">border-color</span>: transparent transparent red transparent;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"一个满屏-品-字布局-如何设计\"><a href=\"#一个满屏-品-字布局-如何设计\" class=\"headerlink\" title=\"一个满屏 品 字布局 如何设计?\"></a>一个满屏 品 字布局 如何设计?</h3><p>简单的方式：<br>    上面的div宽100%，<br>    下面的两个div分别宽50%，<br>    然后用float或者inline使其不换行即可</p>\n<h3 id=\"经常遇到的浏览器的兼容性有哪些？原因，解决方法是什么，常用hack的技巧-？\"><a href=\"#经常遇到的浏览器的兼容性有哪些？原因，解决方法是什么，常用hack的技巧-？\" class=\"headerlink\" title=\"经常遇到的浏览器的兼容性有哪些？原因，解决方法是什么，常用hack的技巧 ？\"></a>经常遇到的浏览器的兼容性有哪些？原因，解决方法是什么，常用hack的技巧 ？</h3><ul>\n<li><p>png24位的图片在iE6浏览器上出现背景，解决方案是做成PNG8.</p>\n</li>\n<li><p>浏览器默认的margin和padding不同。解决方案是加一个全局的*{margin:0;padding:0;}来统一。</p>\n</li>\n<li><p>IE6双边距bug:块属性标签float后，又有横行的margin情况下，在ie6显示margin比设置的大。</p>\n<p>浮动ie产生的双倍距离 #box{ float:left; width:10px; margin:0 0 0 100px;}</p>\n<p>这种情况之下IE会产生20px的距离，解决方案是在float的标签样式控制中加入 ——_display:inline;将其转化为行内属性。(_这个符号只有ie6会识别)</p>\n<p>渐进识别的方式，从总体中逐渐排除局部。</p>\n<p>首先，巧妙的使用“\\9”这一标记，将IE游览器从所有情况中分离出来。<br>接着，再次使用“+”将IE8和IE7、IE6分离开来，这样IE8已经独立识别。</p>\n<p>css</p>\n<pre><code>.bb{\n    background-color:#f1ee18;/*所有识别*/\n    .background-color:#00deff\\9; /*IE6、7、8识别*/\n    +background-color:#a200ff;/*IE6、7识别*/\n    _background-color:#1e0bd1;/*IE6识别*/\n}</code></pre></li>\n<li><p>IE下,可以使用获取常规属性的方法来获取自定义属性,<br>也可以使用getAttribute()获取自定义属性;<br>Firefox下,只能使用getAttribute()获取自定义属性。<br>解决方法:统一通过getAttribute()获取自定义属性。</p>\n</li>\n<li><p>IE下,even对象有x,y属性,但是没有pageX,pageY属性;<br>Firefox下,event对象有pageX,pageY属性,但是没有x,y属性。</p>\n</li>\n<li><p>解决方法：（条件注释）缺点是在IE浏览器下可能会增加额外的HTTP请求数。</p>\n</li>\n<li><p>Chrome 中文界面下默认会将小于 12px 的文本强制按照 12px 显示,<br>可通过加入 CSS 属性 -webkit-text-size-adjust: none; 解决。</p>\n</li>\n</ul>\n<h3 id=\"超链接访问过后hover样式就不出现了-被点击访问过的超链接样式不在具有hover和active了解决方法是改变CSS属性的排列顺序\"><a href=\"#超链接访问过后hover样式就不出现了-被点击访问过的超链接样式不在具有hover和active了解决方法是改变CSS属性的排列顺序\" class=\"headerlink\" title=\"超链接访问过后hover样式就不出现了 被点击访问过的超链接样式不在具有hover和active了解决方法是改变CSS属性的排列顺序:\"></a>超链接访问过后hover样式就不出现了 被点击访问过的超链接样式不在具有hover和active了解决方法是改变CSS属性的排列顺序:</h3><p>L-V-H-A :  a:link {} a:visited {} a:hover {} a:active {}</p>\n<h3 id=\"li与li之间有看不见的空白间隔是什么原因引起的？有什么解决办法？\"><a href=\"#li与li之间有看不见的空白间隔是什么原因引起的？有什么解决办法？\" class=\"headerlink\" title=\"li与li之间有看不见的空白间隔是什么原因引起的？有什么解决办法？\"></a>li与li之间有看不见的空白间隔是什么原因引起的？有什么解决办法？</h3><p>行框的排列会受到中间空白（回车\\空格）等的影响，因为空格也属于字符,这些空白也会被应用样式，占据空间，所以会有间隔，把字符大小设为0，就没有空格了。</p>\n<h3 id=\"为什么要初始化CSS样式。\"><a href=\"#为什么要初始化CSS样式。\" class=\"headerlink\" title=\"为什么要初始化CSS样式。\"></a>为什么要初始化CSS样式。</h3><ul>\n<li><p>因为浏览器的兼容问题，不同浏览器对有些标签的默认值是不同的，如果没对CSS初始化往往会出现浏览器之间的页面显示差异。</p>\n</li>\n<li><p>当然，初始化样式会对SEO有一定的影响，但鱼和熊掌不可兼得，但力求影响最小的情况下初始化。</p>\n</li>\n</ul>\n<p>最简单的初始化方法： * {padding: 0; margin: 0;} （强烈不建议）</p>\n<p>淘宝的样式初始化代码：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span>, <span class=\"selector-tag\">h1</span>, <span class=\"selector-tag\">h2</span>, <span class=\"selector-tag\">h3</span>, <span class=\"selector-tag\">h4</span>, <span class=\"selector-tag\">h5</span>, <span class=\"selector-tag\">h6</span>, <span class=\"selector-tag\">hr</span>, <span class=\"selector-tag\">p</span>, <span class=\"selector-tag\">blockquote</span>, <span class=\"selector-tag\">dl</span>, <span class=\"selector-tag\">dt</span>, <span class=\"selector-tag\">dd</span>, <span class=\"selector-tag\">ul</span>, <span class=\"selector-tag\">ol</span>, <span class=\"selector-tag\">li</span>, <span class=\"selector-tag\">pre</span>, <span class=\"selector-tag\">form</span>, <span class=\"selector-tag\">fieldset</span>, <span class=\"selector-tag\">legend</span>, <span class=\"selector-tag\">button</span>, <span class=\"selector-tag\">input</span>, <span class=\"selector-tag\">textarea</span>, <span class=\"selector-tag\">th</span>, <span class=\"selector-tag\">td</span> &#123; <span class=\"attribute\">margin</span>:<span class=\"number\">0</span>; <span class=\"attribute\">padding</span>:<span class=\"number\">0</span>; &#125;</span><br><span class=\"line\"><span class=\"selector-tag\">body</span>, <span class=\"selector-tag\">button</span>, <span class=\"selector-tag\">input</span>, <span class=\"selector-tag\">select</span>, <span class=\"selector-tag\">textarea</span> &#123; <span class=\"attribute\">font</span>:<span class=\"number\">12px</span>/<span class=\"number\">1.5</span>tahoma, arial, \\<span class=\"number\">5</span>b8b\\<span class=\"number\">4</span>f53; &#125;</span><br><span class=\"line\"><span class=\"selector-tag\">h1</span>, <span class=\"selector-tag\">h2</span>, <span class=\"selector-tag\">h3</span>, <span class=\"selector-tag\">h4</span>, <span class=\"selector-tag\">h5</span>, <span class=\"selector-tag\">h6</span>&#123; <span class=\"attribute\">font-size</span>:<span class=\"number\">100%</span>; &#125;</span><br><span class=\"line\"><span class=\"selector-tag\">address</span>, <span class=\"selector-tag\">cite</span>, <span class=\"selector-tag\">dfn</span>, <span class=\"selector-tag\">em</span>, <span class=\"selector-tag\">var</span> &#123; <span class=\"attribute\">font-style</span>:normal; &#125;</span><br><span class=\"line\"><span class=\"selector-tag\">code</span>, <span class=\"selector-tag\">kbd</span>, <span class=\"selector-tag\">pre</span>, <span class=\"selector-tag\">samp</span> &#123; <span class=\"attribute\">font-family</span>:couriernew, courier, monospace; &#125;</span><br><span class=\"line\"><span class=\"selector-tag\">small</span>&#123; <span class=\"attribute\">font-size</span>:<span class=\"number\">12px</span>; &#125;</span><br><span class=\"line\"><span class=\"selector-tag\">ul</span>, <span class=\"selector-tag\">ol</span> &#123; <span class=\"attribute\">list-style</span>:none; &#125;</span><br><span class=\"line\"><span class=\"selector-tag\">a</span> &#123; <span class=\"attribute\">text-decoration</span>:none; &#125;</span><br><span class=\"line\"><span class=\"selector-tag\">a</span><span class=\"selector-pseudo\">:hover</span> &#123; <span class=\"attribute\">text-decoration</span>:underline; &#125;</span><br><span class=\"line\"><span class=\"selector-tag\">sup</span> &#123; <span class=\"attribute\">vertical-align</span>:text-top; &#125;</span><br><span class=\"line\"><span class=\"selector-tag\">sub</span>&#123; <span class=\"attribute\">vertical-align</span>:text-bottom; &#125;</span><br><span class=\"line\"><span class=\"selector-tag\">legend</span> &#123; <span class=\"attribute\">color</span>:<span class=\"number\">#000</span>; &#125;</span><br><span class=\"line\"><span class=\"selector-tag\">fieldset</span>, <span class=\"selector-tag\">img</span> &#123; <span class=\"attribute\">border</span>:<span class=\"number\">0</span>; &#125;</span><br><span class=\"line\"><span class=\"selector-tag\">button</span>, <span class=\"selector-tag\">input</span>, <span class=\"selector-tag\">select</span>, <span class=\"selector-tag\">textarea</span> &#123; <span class=\"attribute\">font-size</span>:<span class=\"number\">100%</span>; &#125;</span><br><span class=\"line\"><span class=\"selector-tag\">table</span> &#123; <span class=\"attribute\">border-collapse</span>:collapse; <span class=\"attribute\">border-spacing</span>:<span class=\"number\">0</span>; &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"absolute的containing-block-容器块-计算方式跟正常流有什么不同？\"><a href=\"#absolute的containing-block-容器块-计算方式跟正常流有什么不同？\" class=\"headerlink\" title=\"absolute的containing block(容器块)计算方式跟正常流有什么不同？\"></a>absolute的containing block(容器块)计算方式跟正常流有什么不同？</h3><p>无论属于哪种，都要先找到其祖先元素中最近的 position 值不为 static 的元素，然后再判断：<br>1、若此元素为 inline 元素，则 containing block 为能够包含这个元素生成的第一个和最后一个 inline box 的 padding box (除 margin, border 外的区域) 的最小矩形；<br>2、否则,则由这个祖先元素的 padding box 构成。<br>如果都找不到，则为 initial containing block。</p>\n<p>补充：</p>\n<ol>\n<li>static(默认的)/relative：简单说就是它的父元素的内容框（即去掉padding的部分）</li>\n<li>absolute: 向上找最近的定位为absolute/relative的元素</li>\n<li>fixed: 它的containing block一律为根元素(html/body)，根元素也是initial containing block</li>\n</ol>\n<h3 id=\"CSS里的visibility属性有个collapse属性值是干嘛用的？在不同浏览器下以后什么区别？\"><a href=\"#CSS里的visibility属性有个collapse属性值是干嘛用的？在不同浏览器下以后什么区别？\" class=\"headerlink\" title=\"CSS里的visibility属性有个collapse属性值是干嘛用的？在不同浏览器下以后什么区别？\"></a>CSS里的visibility属性有个collapse属性值是干嘛用的？在不同浏览器下以后什么区别？</h3><p>position跟display、margin collapse、overflow、float这些特性相互叠加后会怎么样？</p>\n<p>对BFC规范(块级格式化上下文：block formatting context)的理解？</p>\n<p>（W3C CSS 2.1 规范中的一个概念,它是一个独立容器，决定了元素如何对其内容进行定位,以及与其他元素的关系和相互作用。）<br> 一个页面是由很多个 Box 组成的,元素的类型和 display 属性,决定了这个 Box 的类型。<br> 不同类型的 Box,会参与不同的 Formatting Context（决定如何渲染文档的容器）,因此Box内的元素会以不同的方式渲染,也就是说BFC内部的元素和外部的元素不会互相影响。<br>css定义的权重</p>\n<p>以下是权重的规则：标签的权重为1，class的权重为10，id的权重为100，以下例子是演示各种定义的权重值：</p>\n<p>/<em>权重为1</em>/<br>div{<br>}<br>/<em>权重为10</em>/<br>.class1{<br>}<br>/<em>权重为100</em>/<br>#id1{<br>}<br>/<em>权重为100+1=101</em>/<br>#id1 div{<br>}<br>/<em>权重为10+1=11</em>/<br>.class1 div{<br>}<br>/<em>权重为10+10+1=21</em>/<br>.class1 .class2 div{<br>}</p>\n<p>如果权重相同，则最后定义的样式会起作用，但是应该避免这种情况出现<br>请解释一下为什么会出现浮动和什么时候需要清除浮动？清除浮动的方式</p>\n<p>移动端的布局用过媒体查询吗？</p>\n<p>使用 CSS 预处理器吗？喜欢那个？</p>\n<p>SASS (SASS、LESS没有本质区别，只因为团队前端都是用的SASS)<br>CSS优化、提高性能的方法有哪些？</p>\n<p>浏览器是怎样解析CSS选择器的？</p>\n<p>在网页中的应该使用奇数还是偶数的字体？为什么呢？</p>\n<p>margin和padding分别适合什么场景使用？</p>\n<p>抽离样式模块怎么写，说出思路，有无实践经验？[阿里航旅的面试题]</p>\n<p>元素竖向的百分比设定是相对于容器的高度吗？</p>\n<h3 id=\"全屏滚动的原理是什么？用到了CSS的那些属性？\"><a href=\"#全屏滚动的原理是什么？用到了CSS的那些属性？\" class=\"headerlink\" title=\"全屏滚动的原理是什么？用到了CSS的那些属性？\"></a>全屏滚动的原理是什么？用到了CSS的那些属性？</h3><h3 id=\"什么是响应式设计？响应式设计的基本原理是什么？如何兼容低版本的IE？\"><a href=\"#什么是响应式设计？响应式设计的基本原理是什么？如何兼容低版本的IE？\" class=\"headerlink\" title=\"什么是响应式设计？响应式设计的基本原理是什么？如何兼容低版本的IE？\"></a>什么是响应式设计？响应式设计的基本原理是什么？如何兼容低版本的IE？</h3><p>视差滚动效果，如何给每页做不同的动画？（回到顶部，向下滑动要再次出现，和只出现一次分别怎么做？）</p>\n<p>::before 和 :after中双冒号和单冒号 有什么区别？解释一下这2个伪元素的作用。</p>\n<p>如何修改chrome记住密码后自动填充表单的黄色背景 ？</p>\n<p>你对line-height是如何理解的？</p>\n<p>设置元素浮动后，该元素的display值是多少？（自动变成display:block）</p>\n<p>怎么让Chrome支持小于12px 的文字？</p>\n<p>让页面里的字体变清晰，变细用CSS怎么做？（-webkit-font-smoothing: antialiased;）</p>\n<p>font-style属性可以让它赋值为“oblique” oblique是什么意思？</p>\n<p>position:fixed;在android下无效怎么处理？</p>\n<p>如果需要手动写动画，你认为最小时间间隔是多久，为什么？（阿里）</p>\n<p>多数显示器默认频率是60Hz，即1秒刷新60次，所以理论上最小间隔为1/60＊1000ms ＝ 16.7ms<br>display:inline-block 什么时候会显示间隙？(携程)</p>\n<p>移除空格、使用margin负值、使用font-size:0、letter-spacing、word-spacing<br>overflow: scroll时不能平滑滚动的问题怎么处理？</p>\n<p>有一个高度自适应的div，里面有两个div，一个高度100px，希望另一个填满剩下的高度。</p>\n<p>png、jpg、gif 这些图片格式解释一下，分别什么时候用。有没有了解过webp？</p>\n<h3 id=\"什么是Cookie-隔离？（或者说：请求资源的时候不要让它带cookie怎么做）\"><a href=\"#什么是Cookie-隔离？（或者说：请求资源的时候不要让它带cookie怎么做）\" class=\"headerlink\" title=\"什么是Cookie 隔离？（或者说：请求资源的时候不要让它带cookie怎么做）\"></a>什么是Cookie 隔离？（或者说：请求资源的时候不要让它带cookie怎么做）</h3><p>如果静态文件都放在主域名下，那静态文件请求的时候都带有的cookie的数据提交给server的，非常浪费流量，<br>所以不如隔离开。</p>\n<p>因为cookie有域的限制，因此不能跨域提交请求，故使用非主要域名的时候，请求头中就不会带有cookie数据，<br>这样可以降低请求头的大小，降低请求时间，从而达到降低整体请求延时的目的。</p>\n<p>同时这种方式不会将cookie传入Web Server，也减少了Web Server对cookie的处理分析环节，<br>提高了webserver的http请求的解析速度。<br>style标签写在body后与body前有什么区别？</p>\n<h3 id=\"什么是CSS-预处理器-后处理器？\"><a href=\"#什么是CSS-预处理器-后处理器？\" class=\"headerlink\" title=\"什么是CSS 预处理器 / 后处理器？\"></a>什么是CSS 预处理器 / 后处理器？</h3><ul>\n<li><p>预处理器例如：LESS、Sass、Stylus，用来预编译Sass或less，增强了css代码的复用性，<br>还有层级、mixin、变量、循环、函数等，具有很方便的UI组件模块化开发能力，极大的提高工作效率。</p>\n</li>\n<li><p>后处理器例如：PostCSS，通常被视为在完成的样式表中根据CSS规范处理CSS，让其更有效；目前最常做的<br>是给CSS属性添加浏览器私有前缀，实现跨浏览器兼容性的问题。<br>JavaScript</p>\n</li>\n</ul>\n<h3 id=\"介绍js的基本数据类型\"><a href=\"#介绍js的基本数据类型\" class=\"headerlink\" title=\"介绍js的基本数据类型\"></a>介绍js的基本数据类型</h3><p> Undefined、Null、Boolean、Number、String、Symbol(new in ECMAScript 2015)</p>\n<h3 id=\"介绍js有哪些内置对象？\"><a href=\"#介绍js有哪些内置对象？\" class=\"headerlink\" title=\"介绍js有哪些内置对象？\"></a>介绍js有哪些内置对象？</h3><p>Object 是 JavaScript 中所有对象的父对象</p>\n<p>数据封装类对象：Object、Array、Boolean、Number 和 String</p>\n<p>其他对象：Function、Arguments、Math、Date、RegExp、Error</p>\n<h3 id=\"说几条写JavaScript的基本规范？\"><a href=\"#说几条写JavaScript的基本规范？\" class=\"headerlink\" title=\"说几条写JavaScript的基本规范？\"></a>说几条写JavaScript的基本规范？</h3><p>1.不要在同一行声明多个变量。<br>2.请使用 ===/!==来比较true/false或者数值<br>3.使用对象字面量替代new Array这种形式<br>4.不要使用全局函数。<br>5.Switch语句必须带有default分支<br>6.函数不应该有时候有返回值，有时候没有返回值。<br>7.For循环必须使用大括号<br>8.If语句必须使用大括号<br>9.for-in循环中的变量 应该使用var关键字明确限定作用域，从而避免作用域污染。</p>\n<h3 id=\"JavaScript原型，原型链-有什么特点？\"><a href=\"#JavaScript原型，原型链-有什么特点？\" class=\"headerlink\" title=\"JavaScript原型，原型链 ? 有什么特点？\"></a>JavaScript原型，原型链 ? 有什么特点？</h3><p>每个对象都会在其内部初始化一个属性，就是prototype(原型)，当我们访问一个对象的属性时，<br>如果这个对象内部不存在这个属性，那么他就会去prototype里找这个属性，这个prototype又会有自己的prototype，<br>于是就这样一直找下去，也就是我们平时所说的原型链的概念。<br>关系：instance.constructor.prototype = instance.<strong>proto</strong></p>\n<p>特点：<br>JavaScript对象是通过引用来传递的，我们创建的每个新对象实体中并没有一份属于自己的原型副本。当我们修改原型时，与之相关的对象也会继承这一改变。</p>\n<p> 当我们需要一个属性的时，Javascript引擎会先看当前对象中是否有这个属性， 如果没有的话，<br> 就会查找他的Prototype对象是否有这个属性，如此递推下去，一直检索到 Object 内建对象。<br>    function Func(){}<br>    Func.prototype.name = “Sean”;<br>    Func.prototype.getInfo = function() {<br>      return this.name;<br>    }<br>    var person = new Func();//现在可以参考var person = Object.create(oldObject);<br>    console.log(person.getInfo());//它拥有了Func的属性和方法<br>    //“Sean”<br>    console.log(Func.prototype);<br>    // Func { name=”Sean”, getInfo=function()}</p>\n<h3 id=\"JavaScript有几种类型的值？，你能画一下他们的内存图吗？\"><a href=\"#JavaScript有几种类型的值？，你能画一下他们的内存图吗？\" class=\"headerlink\" title=\"JavaScript有几种类型的值？，你能画一下他们的内存图吗？\"></a>JavaScript有几种类型的值？，你能画一下他们的内存图吗？</h3><p>栈：原始数据类型（Undefined，Null，Boolean，Number、String）<br>堆：引用数据类型（对象、数组和函数）</p>\n<p>两种类型的区别是：存储位置不同；<br>原始数据类型直接存储在栈(stack)中的简单数据段，占据空间小、大小固定，属于被频繁使用数据，所以放入栈中存储；<br>引用数据类型存储在堆(heap)中的对象,占据空间大、大小不固定,如果存储在栈中，将会影响程序运行的性能；引用数据类型在栈中存储了指针，该指针指向堆中该实体的起始地址。当解释器寻找引用值时，会首先检索其<br>在栈中的地址，取得地址后从堆中获得实体<br>Stated Clearly Image</p>\n<h3 id=\"Javascript如何实现继承？\"><a href=\"#Javascript如何实现继承？\" class=\"headerlink\" title=\"Javascript如何实现继承？\"></a>Javascript如何实现继承？</h3><p>1、构造继承<br>2、原型继承<br>3、实例继承<br>4、拷贝继承</p>\n<p>原型prototype机制或apply和call方法去实现较简单，建议使用构造函数与原型混合方式。<br>        function Parent(){<br>            this.name = ‘wang’;<br>        }</p>\n<pre><code>function Child(){\n    this.age = 28;\n}\nChild.prototype = new Parent();//继承了Parent，通过原型\n\nvar demo = new Child();\nalert(demo.age);\nalert(demo.name);//得到被继承的属性</code></pre><h3 id=\"JavaScript继承的几种实现方式？\"><a href=\"#JavaScript继承的几种实现方式？\" class=\"headerlink\" title=\"JavaScript继承的几种实现方式？\"></a>JavaScript继承的几种实现方式？</h3><p>参考：构造函数的继承，非构造函数的继承；</p>\n<h3 id=\"javascript创建对象的几种方式？\"><a href=\"#javascript创建对象的几种方式？\" class=\"headerlink\" title=\"javascript创建对象的几种方式？\"></a>javascript创建对象的几种方式？</h3><p>javascript创建对象简单的说,无非就是使用内置对象或各种自定义对象，当然还可以用JSON；但写法有很多种，也能混合使用。</p>\n<ol>\n<li>对象字面量的方式  </li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">person=&#123;</span><br><span class=\"line\">    firstname:<span class=\"string\">\"Mark\"</span>,</span><br><span class=\"line\">    lastname:<span class=\"string\">\"Yun\"</span>,</span><br><span class=\"line\">    age:<span class=\"number\">25</span>,</span><br><span class=\"line\">    eyecolor:<span class=\"string\">\"black\"</span></span><br><span class=\"line\">    &#125;;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li><p>用function来模拟无参的构造函数</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> person=<span class=\"keyword\">new</span> Person();<span class=\"comment\">//定义一个function，如果使用new\"实例化\",该function可以看作是一个Class</span></span><br><span class=\"line\">person.name=<span class=\"string\">\"Mark\"</span>;</span><br><span class=\"line\">person.age=<span class=\"string\">\"25\"</span>;</span><br><span class=\"line\">person.work=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">alert(person.name+<span class=\"string\">\" hello...\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">person.work();</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>用function来模拟参构造函数来实现（用this关键字定义构造的上下文属性）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Pet</span>(<span class=\"params\">name,age,hobby</span>)</span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">this</span>.name=name;<span class=\"comment\">//this作用域：当前对象</span></span><br><span class=\"line\">   <span class=\"keyword\">this</span>.age=age;</span><br><span class=\"line\">   <span class=\"keyword\">this</span>.hobby=hobby;</span><br><span class=\"line\">   <span class=\"keyword\">this</span>.eat=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">      alert(<span class=\"string\">\"我叫\"</span>+<span class=\"keyword\">this</span>.name+<span class=\"string\">\",我喜欢\"</span>+<span class=\"keyword\">this</span>.hobby+<span class=\"string\">\",是个程序员\"</span>);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> maidou =<span class=\"keyword\">new</span> Pet(<span class=\"string\">\"麦兜\"</span>,<span class=\"number\">25</span>,<span class=\"string\">\"coding\"</span>);<span class=\"comment\">//实例化、创建对象</span></span><br><span class=\"line\">maidou.eat();<span class=\"comment\">//调用eat方法</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>用工厂方式来创建（内置对象）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> wcDog =<span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</span><br><span class=\"line\">wcDog.name=<span class=\"string\">\"旺财\"</span>;</span><br><span class=\"line\">wcDog.age=<span class=\"number\">3</span>;</span><br><span class=\"line\">wcDog.work=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  alert(<span class=\"string\">\"我是\"</span>+wcDog.name+<span class=\"string\">\",汪汪汪......\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">wcDog.work();</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>用原型方式来创建</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Dog</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> Dog.prototype.name=<span class=\"string\">\"旺财\"</span>;</span><br><span class=\"line\"> Dog.prototype.eat=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"> alert(<span class=\"keyword\">this</span>.name+<span class=\"string\">\"是个吃货\"</span>);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"keyword\">var</span> wangcai =<span class=\"keyword\">new</span> Dog();</span><br><span class=\"line\"> wangcai.eat();</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>用混合方式来创建</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Car</span>(<span class=\"params\">name,price</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.name=name;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.price=price; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> Car.prototype.sell=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">   alert(<span class=\"string\">\"我是\"</span>+<span class=\"keyword\">this</span>.name+<span class=\"string\">\"，我现在卖\"</span>+<span class=\"keyword\">this</span>.price+<span class=\"string\">\"万元\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> camry =<span class=\"keyword\">new</span> Car(<span class=\"string\">\"凯美瑞\"</span>,<span class=\"number\">27</span>);</span><br><span class=\"line\">camry.sell();</span><br></pre></td></tr></table></figure>\n<h3 id=\"Javascript作用链域\"><a href=\"#Javascript作用链域\" class=\"headerlink\" title=\"Javascript作用链域?\"></a>Javascript作用链域?</h3></li>\n</ol>\n<p>全局函数无法查看局部函数的内部细节，但局部函数可以查看其上层的函数细节，直至全局细节。<br>当需要从局部函数查找某一属性或方法时，如果当前作用域没有找到，就会上溯到上层作用域查找，<br>直至全局函数，这种组织形式就是作用域链。<br>谈谈This对象的理解。</p>\n<p>this总是指向函数的直接调用者（而非间接调用者）；<br>如果有new关键字，this指向new出来的那个对象；<br>在事件中，this指向触发这个事件的对象，特殊的是，IE中的attachEvent中的this总是指向全局对象Window；</p>\n<h3 id=\"eval是做什么的？\"><a href=\"#eval是做什么的？\" class=\"headerlink\" title=\"eval是做什么的？\"></a>eval是做什么的？</h3><p>它的功能是把对应的字符串解析成JS代码并运行；<br>应该避免使用eval，不安全，非常耗性能（2次，一次解析成js语句，一次执行）。<br>由JSON字符串转换为JSON对象的时候可以用eval，var obj =eval(‘(‘+ str +’)’);</p>\n<h3 id=\"什么是window对象-什么是document对象\"><a href=\"#什么是window对象-什么是document对象\" class=\"headerlink\" title=\"什么是window对象? 什么是document对象?\"></a>什么是window对象? 什么是document对象?</h3><h3 id=\"null，undefined-的区别？\"><a href=\"#null，undefined-的区别？\" class=\"headerlink\" title=\"null，undefined 的区别？\"></a>null，undefined 的区别？</h3><p>null        表示一个对象被定义了，值为“空值”；<br>undefined   表示不存在这个值。</p>\n<p>typeof undefined<br>    //“undefined”<br>    undefined :是一个表示”无”的原始值或者说表示”缺少值”，就是此处应该有一个值，但是还没有定义。当尝试读取时会返回 undefined；<br>    例如变量被声明了，但没有赋值时，就等于undefined</p>\n<p>typeof null<br>    //“object”<br>    null : 是一个对象(空对象, 没有任何属性和方法)；<br>    例如作为函数的参数，表示该函数的参数不是对象；</p>\n<p>注意：<br>    在验证null时，一定要使用　=== ，因为 == 无法分别 null 和　undefined</p>\n<p>再来一个例子：</p>\n<pre><code>null\nQ：有张三这个人么？\nA：有！\nQ：张三有房子么？\nA：没有！\n\nundefined\nQ：有张三这个人么？\nA：没有！</code></pre><p>参考阅读：undefined与null的区别</p>\n<h3 id=\"写一个通用的事件侦听器函数。\"><a href=\"#写一个通用的事件侦听器函数。\" class=\"headerlink\" title=\"写一个通用的事件侦听器函数。\"></a>写一个通用的事件侦听器函数。</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// event(事件)工具集，来源：github.com/markyun</span></span><br><span class=\"line\">markyun.Event = &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 页面加载完成后</span></span><br><span class=\"line\">    readyEvent : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">fn</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (fn==<span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            fn=<span class=\"built_in\">document</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> oldonload = <span class=\"built_in\">window</span>.onload;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"built_in\">window</span>.onload != <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">window</span>.onload = fn;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">window</span>.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                oldonload();</span><br><span class=\"line\">                fn();</span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// 视能力分别使用dom0||dom2||IE方式 来绑定事件</span></span><br><span class=\"line\">    <span class=\"comment\">// 参数： 操作的元素,事件名称 ,事件处理程序</span></span><br><span class=\"line\">    addEvent : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">element, type, handler</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (element.addEventListener) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//事件类型、需要执行的函数、是否捕捉</span></span><br><span class=\"line\">            element.addEventListener(type, handler, <span class=\"literal\">false</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (element.attachEvent) &#123;</span><br><span class=\"line\">            element.attachEvent(<span class=\"string\">'on'</span> + type, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                handler.call(element);</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            element[<span class=\"string\">'on'</span> + type] = handler;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// 移除事件</span></span><br><span class=\"line\">    removeEvent : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">element, type, handler</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (element.removeEventListener) &#123;</span><br><span class=\"line\">            element.removeEventListener(type, handler, <span class=\"literal\">false</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (element.datachEvent) &#123;</span><br><span class=\"line\">            element.detachEvent(<span class=\"string\">'on'</span> + type, handler);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            element[<span class=\"string\">'on'</span> + type] = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// 阻止事件 (主要是事件冒泡，因为IE不支持事件捕获)</span></span><br><span class=\"line\">    stopPropagation : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ev</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ev.stopPropagation) &#123;</span><br><span class=\"line\">            ev.stopPropagation();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            ev.cancelBubble = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// 取消事件的默认行为</span></span><br><span class=\"line\">    preventDefault : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (event.preventDefault) &#123;</span><br><span class=\"line\">            event.preventDefault();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            event.returnValue = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// 获取事件目标</span></span><br><span class=\"line\">    getTarget : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> event.target || event.srcElement;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// 获取event对象的引用，取到事件的所有信息，确保随时能使用event；</span></span><br><span class=\"line\">    getEvent : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> ev = e || <span class=\"built_in\">window</span>.event;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!ev) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> c = <span class=\"keyword\">this</span>.getEvent.caller;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (c) &#123;</span><br><span class=\"line\">                ev = c.arguments[<span class=\"number\">0</span>];</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (ev &amp;&amp; Event == ev.constructor) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                c = c.caller;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ev;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>[“1”, “2”, “3”].map(parseInt) 答案是多少？</p>\n<p> [1, NaN, NaN] 因为 parseInt 需要两个参数 (val, radix)，<br> 其中 radix 表示解析时用的基数。<br> map 传了 3 个 (element, index, array)，对应的 radix 不合法导致解析失败。</p>\n<h3 id=\"事件是？IE与火狐的事件机制有什么区别？-如何阻止冒泡？\"><a href=\"#事件是？IE与火狐的事件机制有什么区别？-如何阻止冒泡？\" class=\"headerlink\" title=\"事件是？IE与火狐的事件机制有什么区别？ 如何阻止冒泡？\"></a>事件是？IE与火狐的事件机制有什么区别？ 如何阻止冒泡？</h3><ol>\n<li>我们在网页中的某个操作（有的操作对应多个事件）。例如：当我们点击一个按钮就会产生一个事件。是可以被 JavaScript 侦测到的行为。</li>\n<li>事件处理机制：IE是事件冒泡、Firefox同时支持两种事件模型，也就是：捕获型事件和冒泡型事件；</li>\n<li>ev.stopPropagation();（旧ie的方法 ev.cancelBubble = true;）</li>\n</ol>\n<h3 id=\"什么是闭包（closure），为什么要用它？\"><a href=\"#什么是闭包（closure），为什么要用它？\" class=\"headerlink\" title=\"什么是闭包（closure），为什么要用它？\"></a>什么是闭包（closure），为什么要用它？</h3><p>闭包是指有权访问另一个函数作用域中变量的函数，创建闭包的最常见的方式就是在一个函数内创建另一个函数，通过另一个函数访问这个函数的局部变量,利用闭包可以突破作用链域，将函数内部的变量和方法传递到外部。</p>\n<p>闭包的特性：</p>\n<p>1.函数内再嵌套函数<br>2.内部函数可以引用外层的参数和变量<br>3.参数和变量不会被垃圾回收机制回收</p>\n<p>//li节点的onclick事件都能正确的弹出当前被点击的li索引<br> <ul id=\"testUL\"><br>    <li> index = 0</li><br>    <li> index = 1</li><br>    <li> index = 2</li><br>    <li> index = 3</li></p>\n</ul>\n<script type=\"text/javascript\">\n    var nodes = document.getElementsByTagName(\"li\");\n    for(i = 0;i<nodes.length;i+= 1){\n        nodes[i].onclick = function(){\n            console.log(i+1);//不用闭包的话，值每次都是4\n        }(i);\n    }\n</script>\n\n\n<p>执行say667()后,say667()闭包内部变量会存在,而闭包内部函数的内部变量不会存在<br>使得Javascript的垃圾回收机制GC不会收回say667()所占用的资源<br>因为say667()的内部函数的执行需要依赖say667()中的变量<br>这是对闭包作用的非常直白的描述</p>\n<p>  function say667() {<br>    // Local variable that ends up within closure<br>    var num = 666;<br>    var sayAlert = function() {<br>        alert(num);<br>    }<br>    num++;<br>    return sayAlert;<br>}</p>\n<p> var sayAlert = say667();<br> sayAlert()//执行结果应该弹出的667<br>javascript 代码中的”use strict”;是什么意思 ? 使用它区别是什么？</p>\n<p>use strict是一种ECMAscript 5 添加的（严格）运行模式,这种模式使得 Javascript 在更严格的条件下运行,</p>\n<p>使JS编码更加规范化的模式,消除Javascript语法的一些不合理、不严谨之处，减少一些怪异行为。<br>默认支持的糟糕特性都会被禁用，比如不能用with，也不能在意外的情况下给全局变量赋值;<br>全局变量的显示声明,函数必须声明在顶层，不允许在非函数代码块内声明函数,arguments.callee也不允许使用；<br>消除代码运行的一些不安全之处，保证代码运行的安全,限制函数中的arguments修改，严格模式下的eval函数的行为和非严格模式的也不相同;</p>\n<p>提高编译器效率，增加运行速度；<br>为未来新版本的Javascript标准化做铺垫。<br>如何判断一个对象是否属于某个类？</p>\n<p>  使用instanceof （待完善）<br>   if(a instanceof Person){<br>       alert(‘yes’);<br>   }<br>new操作符具体干了什么呢?</p>\n<pre><code>1、创建一个空对象，并且 this 变量引用该对象，同时还继承了该函数的原型。\n2、属性和方法被加入到 this 引用的对象中。\n3、新创建的对象由 this 所引用，并且最后隐式的返回 this 。</code></pre><p>var obj  = {};<br>obj.<strong>proto</strong> = Base.prototype;<br>Base.call(obj);<br>用原生JavaScript的实现过什么功能吗？</p>\n<h3 id=\"Javascript中，有一个函数，执行时对象查找时，永远不会去查找原型，这个函数是？\"><a href=\"#Javascript中，有一个函数，执行时对象查找时，永远不会去查找原型，这个函数是？\" class=\"headerlink\" title=\"Javascript中，有一个函数，执行时对象查找时，永远不会去查找原型，这个函数是？\"></a>Javascript中，有一个函数，执行时对象查找时，永远不会去查找原型，这个函数是？</h3><p>hasOwnProperty</p>\n<p>javaScript中hasOwnProperty函数方法是返回一个布尔值，指出一个对象是否具有指定名称的属性。此方法无法检查该对象的原型链中是否具有该属性；该属性必须是对象本身的一个成员。<br>使用方法：<br>object.hasOwnProperty(proName)<br>其中参数object是必选项。一个对象的实例。<br>proName是必选项。一个属性名称的字符串值。</p>\n<p>如果 object 具有指定名称的属性，那么JavaScript中hasOwnProperty函数方法返回 true，反之则返回 false。</p>\n<h3 id=\"JSON-的了解？\"><a href=\"#JSON-的了解？\" class=\"headerlink\" title=\"JSON 的了解？\"></a>JSON 的了解？</h3><p>JSON(JavaScript Object Notation) 是一种轻量级的数据交换格式。<br>它是基于JavaScript的一个子集。数据格式简单, 易于读写, 占用带宽小<br>如：{“age”:”12”, “name”:”back”}</p>\n<p>JSON字符串转换为JSON对象:<br>var obj =eval(‘(‘+ str +’)’);<br>var obj = str.parseJSON();<br>var obj = JSON.parse(str);</p>\n<p>JSON对象转换为JSON字符串：<br>var last=obj.toJSONString();<br>var last=JSON.stringify(obj);<br>[].forEach.call($$(“*”),function(a){a.style.outline=”1px solid #”+(~~(Math.random()*(1&lt;&lt;24))).toString(16)}) 能解释一下这段代码的意思吗？</p>\n<h3 id=\"js延迟加载的方式有哪些？\"><a href=\"#js延迟加载的方式有哪些？\" class=\"headerlink\" title=\"js延迟加载的方式有哪些？\"></a>js延迟加载的方式有哪些？</h3><p>defer和async、动态创建DOM方式（用得最多）、按需异步载入js<br>Ajax 是什么? 如何创建一个Ajax？</p>\n<p>ajax的全称：Asynchronous Javascript And XML。<br>异步传输+js+xml。<br>所谓异步，在这里简单地解释就是：向服务器发送请求的时候，我们不必等待结果，而是可以同时做其他的事情，等到有了结果它自己会根据设定进行后续操作，与此同时，页面是不会发生整页刷新的，提高了用户体验。</p>\n<p>(1)创建XMLHttpRequest对象,也就是创建一个异步调用对象<br>(2)创建一个新的HTTP请求,并指定该HTTP请求的方法、URL及验证信息<br>(3)设置响应HTTP请求状态变化的函数<br>(4)发送HTTP请求<br>(5)获取异步调用返回的数据<br>(6)使用JavaScript和DOM实现局部刷新<br>同步和异步的区别?</p>\n<p>同步的概念应该是来自于OS中关于同步的概念:不同进程为协同完成某项工作而在先后次序上调整(通过阻塞,唤醒等方式).同步强调的是顺序性.谁先谁后.异步则不存在这种顺序性.</p>\n<p>同步：浏览器访问服务器请求，用户看得到页面刷新，重新发请求,等请求完，页面刷新，新内容出现，用户看到新内容,进行下一步操作。</p>\n<p>异步：浏览器访问服务器请求，用户正常操作，浏览器后端进行请求。等请求完，页面不刷新，新内容也会出现，用户看到新内容。</p>\n<h3 id=\"如何解决跨域问题\"><a href=\"#如何解决跨域问题\" class=\"headerlink\" title=\"如何解决跨域问题?\"></a>如何解决跨域问题?</h3><p>jsonp、 iframe、window.name、window.postMessage、服务器上设置代理页面<br>页面编码和被请求的资源编码如果不一致如何处理？</p>\n<h3 id=\"模块化开发怎么做？\"><a href=\"#模块化开发怎么做？\" class=\"headerlink\" title=\"模块化开发怎么做？\"></a>模块化开发怎么做？</h3><p>立即执行函数,不暴露私有成员</p>\n<pre><code>var module1 = (function(){\n　　　　var _count = 0;\n　　　　var m1 = function(){\n　　　　　　//...\n　　　　};\n　　　　var m2 = function(){\n　　　　　　//...\n　　　　};\n　　　　return {\n　　　　　　m1 : m1,\n　　　　　　m2 : m2\n　　　　};\n　　})();</code></pre><p>（待完善）</p>\n<h3 id=\"AMD（Modules-Asynchronous-Definition）、CMD（Common-Module-Definition）规范区别？\"><a href=\"#AMD（Modules-Asynchronous-Definition）、CMD（Common-Module-Definition）规范区别？\" class=\"headerlink\" title=\"AMD（Modules/Asynchronous-Definition）、CMD（Common Module Definition）规范区别？\"></a>AMD（Modules/Asynchronous-Definition）、CMD（Common Module Definition）规范区别？</h3><p>AMD 规范在这里：<a href=\"https://github.com/amdjs/amdjs-api/wiki/AMD\" target=\"_blank\" rel=\"noopener\">https://github.com/amdjs/amdjs-api/wiki/AMD</a></p>\n<p>CMD 规范在这里：<a href=\"https://github.com/seajs/seajs/issues/242\" target=\"_blank\" rel=\"noopener\">https://github.com/seajs/seajs/issues/242</a><br>Asynchronous Module Definition，异步模块定义，所有的模块将被异步加载，模块加载不影响后面语句运行。所有依赖某些模块的语句均放置在回调函数中。</p>\n<p> 区别：</p>\n<pre><code>1. 对于依赖的模块，AMD 是提前执行，CMD 是延迟执行。不过 RequireJS 从 2.0 开始，也改成可以延迟执行（根据写法不同，处理方式不同）。CMD 推崇 as lazy as possible.\n2. CMD 推崇依赖就近，AMD 推崇依赖前置。看代码：</code></pre><p>// CMD<br>define(function(require, exports, module) {<br>    var a = require(‘./a’)<br>    a.doSomething()<br>    // 此处略去 100 行<br>    var b = require(‘./b’) // 依赖可以就近书写<br>    b.doSomething()<br>    // …<br>})</p>\n<p>// AMD 默认推荐<br>define([‘./a’, ‘./b’], function(a, b) { // 依赖必须一开始就写好<br>    a.doSomething()<br>    // 此处略去 100 行<br>    b.doSomething()<br>    // …<br>})</p>\n<h3 id=\"requireJS的核心原理是什么？（如何动态加载的？如何避免多次加载的？如何-缓存的？）\"><a href=\"#requireJS的核心原理是什么？（如何动态加载的？如何避免多次加载的？如何-缓存的？）\" class=\"headerlink\" title=\"requireJS的核心原理是什么？（如何动态加载的？如何避免多次加载的？如何 缓存的？）\"></a>requireJS的核心原理是什么？（如何动态加载的？如何避免多次加载的？如何 缓存的？）</h3><p>谈一谈你对ECMAScript6的了解？</p>\n<p>ECMAScript6 怎么写class么，为什么会出现class这种东西?</p>\n<p>异步加载JS的方式有哪些？</p>\n<p>  (1) defer，只支持IE</p>\n<p>  (2) async：</p>\n<p>  (3) 创建script，插入到DOM中，加载完毕后callBack<br>documen.write和 innerHTML的区别</p>\n<p>document.write只能重绘整个页面</p>\n<p>innerHTML可以重绘页面的一部分<br>DOM操作——怎样添加、移除、移动、复制、创建和查找节点?</p>\n<p>（1）创建新节点<br>  createDocumentFragment()    //创建一个DOM片段<br>  createElement()   //创建一个具体的元素<br>  createTextNode()   //创建一个文本节点<br>（2）添加、移除、替换、插入<br>  appendChild()<br>  removeChild()<br>  replaceChild()<br>  insertBefore() //在已有的子节点前插入一个新的子节点<br>（3）查找<br>  getElementsByTagName()    //通过标签名称<br>  getElementsByName()    //通过元素的Name属性的值(IE容错能力较强，会得到一个数组，其中包括id等于name值的)<br>  getElementById()    //通过元素Id，唯一性<br>.call() 和 .apply() 的区别？</p>\n<p>  例子中用 add 来替换 sub，add.call(sub,3,1) == add(3,1) ，所以运行结果为：alert(4);</p>\n<p>  注意：js 中的函数其实是对象，函数名是对 Function 对象的引用。</p>\n<pre><code>function add(a,b)\n{\n    alert(a+b);\n}\n\nfunction sub(a,b)\n{\n    alert(a-b);\n}\n\nadd.call(sub,3,1);</code></pre><p>数组和对象有哪些原生方法，列举一下？</p>\n<p>JS 怎么实现一个类。怎么实例化这个类</p>\n<p>JavaScript中的作用域与变量声明提升？</p>\n<h3 id=\"如何编写高性能的Javascript？\"><a href=\"#如何编写高性能的Javascript？\" class=\"headerlink\" title=\"如何编写高性能的Javascript？\"></a>如何编写高性能的Javascript？</h3><h3 id=\"那些操作会造成内存泄漏？\"><a href=\"#那些操作会造成内存泄漏？\" class=\"headerlink\" title=\"那些操作会造成内存泄漏？\"></a>那些操作会造成内存泄漏？</h3><h3 id=\"JQuery的源码看过吗？能不能简单概况一下它的实现原理？\"><a href=\"#JQuery的源码看过吗？能不能简单概况一下它的实现原理？\" class=\"headerlink\" title=\"JQuery的源码看过吗？能不能简单概况一下它的实现原理？\"></a>JQuery的源码看过吗？能不能简单概况一下它的实现原理？</h3><p>jQuery.fn的init方法返回的this指的是什么对象？为什么要返回this？</p>\n<p>jquery中如何将数组转化为json字符串，然后再转化回来？</p>\n<p>jQuery 的属性拷贝(extend)的实现原理是什么，如何实现深拷贝？</p>\n<p>jquery.extend 与 jquery.fn.extend的区别？</p>\n<p>jQuery 的队列是如何实现的？队列可以用在哪些地方？</p>\n<p>谈一下Jquery中的bind(),live(),delegate(),on()的区别？</p>\n<p>JQuery一个对象可以同时绑定多个事件，这是如何实现的？</p>\n<p>是否知道自定义事件。jQuery里的fire函数是什么意思，什么时候用？</p>\n<p>jQuery 是通过哪个方法和 Sizzle 选择器结合的？（jQuery.fn.find()进入Sizzle）</p>\n<p>针对 jQuery性能的优化方法？</p>\n<p>Jquery与jQuery UI 有啥区别？</p>\n<p>*jQuery是一个js库，主要提供的功能是选择器，属性修改和事件绑定等等。</p>\n<p>*jQuery UI则是在jQuery的基础上，利用jQuery的扩展性，设计的插件。<br> 提供了一些常用的界面元素，诸如对话框、拖动行为、改变大小行为等等<br>JQuery的源码看过吗？能不能简单说一下它的实现原理？</p>\n<p>jquery 中如何将数组转化为json字符串，然后再转化回来？</p>\n<p>jQuery中没有提供这个功能，所以你需要先编写两个jQuery的扩展：</p>\n<pre><code>$.fn.stringifyArray = function(array) {\n    return JSON.stringify(array)\n}\n\n$.fn.parseArray = function(array) {\n    return JSON.parse(array)\n}\n\n然后调用：\n$(&quot;&quot;).stringifyArray(array)</code></pre><p>jQuery和Zepto的区别？各自的使用场景？</p>\n<p>针对 jQuery 的优化方法？</p>\n<p>*基于Class的选择性的性能相对于Id选择器开销很大，因为需遍历所有DOM元素。</p>\n<p>*频繁操作的DOM，先缓存起来再操作。用Jquery的链式调用更好。<br> 比如：var str=$(“a”).attr(“href”);</p>\n<p>*for (var i = size; i &lt; arr.length; i++) {}<br> for 循环每一次循环都查找了数组 (arr) 的.length 属性，在开始循环的时候设置一个变量来存储这个数字，可以让循环跑得更快：<br> for (var i = size, length = arr.length; i &lt; length; i++) {}<br>Zepto的点透问题如何解决？</p>\n<p>jQueryUI如何自定义组件?</p>\n<p>需求：实现一个页面操作不会整页刷新的网站，并且能在浏览器前进、后退时正确响应。给出你的技术实现方案？</p>\n<p>如何判断当前脚本运行在浏览器还是node环境中？（阿里）</p>\n<p>通过判断Global对象是否为window，如果不为window，当前脚本没有运行在浏览器中<br>移动端最小触控区域是多大？</p>\n<p>jQuery 的 slideUp动画 ，如果目标元素是被外部事件驱动, 当鼠标快速地连续触发外部元素事件, 动画会滞后的反复执行，该如何处理呢?</p>\n<p>把 Script 标签 放在页面的最底部的body封闭之前 和封闭之后有什么区别？浏览器会如何解析它们？</p>\n<p>移动端的点击事件的有延迟，时间是多久，为什么会有？ 怎么解决这个延时？（click 有 300ms 延迟,为了实现safari的双击事件的设计，浏览器要知道你是不是要双击操作。）</p>\n<p>知道各种JS框架(Angular, Backbone, Ember, React, Meteor, Knockout…)么? 能讲出他们各自的优点和缺点么?</p>\n<p>Underscore 对哪些 JS 原生对象进行了扩展以及提供了哪些好用的函数方法？</p>\n<p>解释JavaScript中的作用域与变量声明提升？</p>\n<p>那些操作会造成内存泄漏？</p>\n<p>内存泄漏指任何对象在您不再拥有或需要它之后仍然存在。<br>垃圾回收器定期扫描对象，并计算引用了每个对象的其他对象的数量。如果一个对象的引用数量为 0（没有其他对象引用过该对象），或对该对象的惟一引用是循环的，那么该对象的内存即可回收。</p>\n<p>setTimeout 的第一个参数使用字符串而非函数的话，会引发内存泄漏。<br>闭包、控制台日志、循环（在两个对象彼此引用且彼此保留时，就会产生一个循环）<br>JQuery一个对象可以同时绑定多个事件，这是如何实现的？</p>\n<p>Node.js的适用场景？</p>\n<p>(如果会用node)知道route, middleware, cluster, nodemon, pm2, server-side rendering么?</p>\n<p>解释一下 Backbone 的 MVC 实现方式？</p>\n<p>什么是“前端路由”?什么时候适合使用“前端路由”? “前端路由”有哪些优点和缺点?</p>\n<p>知道什么是webkit么? 知道怎么用浏览器的各种工具来调试和debug代码么?</p>\n<p>如何测试前端代码么? 知道BDD, TDD, Unit Test么? 知道怎么测试你的前端工程么(mocha, sinon, jasmin, qUnit..)?</p>\n<p>前端templating(Mustache, underscore, handlebars)是干嘛的, 怎么用?</p>\n<p>简述一下 Handlebars 的基本用法？</p>\n<p>简述一下 Handlerbars 的对模板的基本处理流程， 如何编译的？如何缓存的？</p>\n<p>用js实现千位分隔符?(来源：前端农民工，提示：正则+replace)</p>\n<p>function commafy(num) {<br>     num = num + ‘’;<br>     var reg = /(-?d+)(d{3})/;</p>\n<pre><code>if(reg.test(num)){\n num = num.replace(reg, &apos;$1,$2&apos;);\n}\nreturn num;</code></pre><p>}<br>检测浏览器版本版本有哪些方式？</p>\n<p>功能检测、userAgent特征检测</p>\n<p>比如：navigator.userAgent<br>//“Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_2) AppleWebKit/537.36<br>  (KHTML, like Gecko) Chrome/41.0.2272.101 Safari/537.36”<br>What is a Polyfill?</p>\n<p>polyfill 是“在旧版浏览器上复制标准 API 的 JavaScript 补充”,可以动态地加载 JavaScript 代码或库，在不支持这些标准 API 的浏览器中模拟它们。<br>例如，geolocation（地理位置）polyfill 可以在 navigator 对象上添加全局的 geolocation 对象，还能添加 getCurrentPosition 函数以及“坐标”回调对象，<br>所有这些都是 W3C 地理位置 API 定义的对象和函数。因为 polyfill 模拟标准 API，所以能够以一种面向所有浏览器未来的方式针对这些 API 进行开发，<br>一旦对这些 API 的支持变成绝对大多数，则可以方便地去掉 polyfill，无需做任何额外工作。<br>做的项目中，有没有用过或自己实现一些 polyfill 方案（兼容性处理方案）？</p>\n<p>比如： html5shiv、Geolocation、Placeholder<br>我们给一个dom同时绑定两个点击事件，一个用捕获，一个用冒泡。会执行几次事件，会先执行冒泡还是捕获？</p>\n<p>ECMAScript6 相关</p>\n<p>Object.is() 与原来的比较操作符“ ===”、“ ==”的区别？</p>\n<p>两等号判等，会在比较时进行类型转换；<br>三等号判等(判断严格)，比较时不进行隐式类型转换,（类型不同则会返回false）； </p>\n<p>Object.is 在三等号判等的基础上特别处理了 NaN 、-0 和 +0 ，保证 -0 和 +0 不再相同，<br>但 Object.is(NaN, NaN) 会返回 true.</p>\n<p>Object.is 应被认为有其特殊的用途，而不能用它认为它比其它的相等对比更宽松或严格。<br>前端框架相关</p>\n<p>react-router 路由系统的实现原理？</p>\n<p>React中如何解决第三方类库的问题?</p>\n<p>其他问题</p>\n<p>原来公司工作流程是怎么样的，如何与其他人协作的？如何夸部门合作的？</p>\n<h3 id=\"你遇到过比较难的技术问题是？你是如何解决的？\"><a href=\"#你遇到过比较难的技术问题是？你是如何解决的？\" class=\"headerlink\" title=\"你遇到过比较难的技术问题是？你是如何解决的？\"></a>你遇到过比较难的技术问题是？你是如何解决的？</h3><p>设计模式 知道什么是singleton, factory, strategy, decrator么?</p>\n<p>常使用的库有哪些？常用的前端开发工具？开发过什么应用或组件？</p>\n<h3 id=\"页面重构怎么操作？\"><a href=\"#页面重构怎么操作？\" class=\"headerlink\" title=\"页面重构怎么操作？\"></a>页面重构怎么操作？</h3><p>网站重构：在不改变外部行为的前提下，简化结构、添加可读性，而在网站前端保持一致的行为。<br>也就是说是在不改变UI的情况下，对网站进行优化，在扩展的同时保持一致的UI。</p>\n<h3 id=\"对于传统的网站来说重构通常是：\"><a href=\"#对于传统的网站来说重构通常是：\" class=\"headerlink\" title=\"对于传统的网站来说重构通常是：\"></a>对于传统的网站来说重构通常是：</h3><p>表格(table)布局改为DIV+CSS<br>使网站前端兼容于现代浏览器(针对于不合规范的CSS、如对IE6有效的)<br>对于移动平台的优化<br>针对于SEO进行优化<br>深层次的网站重构应该考虑的方面</p>\n<p>减少代码间的耦合<br>让代码保持弹性<br>严格按规范编写代码<br>设计可扩展的API<br>代替旧有的框架、语言(如VB)<br>增强用户体验<br>通常来说对于速度的优化也包含在重构中</p>\n<p>压缩JS、CSS、image等前端资源(通常是由服务器来解决)<br>程序的性能优化(如数据读写)<br>采用CDN来加速资源加载<br>对于JS DOM的优化<br>HTTP服务器的文件缓存<br>列举IE与其他浏览器不一样的特性？</p>\n<p>1、事件不同之处：</p>\n<pre><code>触发事件的元素被认为是目标（target）。而在 IE 中，目标包含在 event 对象的 srcElement 属性；\n\n获取字符代码、如果按键代表一个字符（shift、ctrl、alt除外），IE 的 keyCode 会返回字符代码（Unicode），DOM 中按键的代码和字符是分离的，要获取字符代码，需要使用 charCode 属性；\n\n阻止某个事件的默认行为，IE 中阻止某个事件的默认行为，必须将 returnValue 属性设置为 false，Mozilla 中，需要调用 preventDefault() 方法；\n\n停止事件冒泡，IE 中阻止事件进一步冒泡，需要设置 cancelBubble 为 true，Mozzilla 中，需要调用 stopPropagation()；</code></pre><p>99%的网站都需要被重构是那本书上写的？</p>\n<p>网站重构：应用web标准进行设计（第2版）<br>什么叫优雅降级和渐进增强？</p>\n<p>优雅降级：Web站点在所有新式浏览器中都能正常工作，如果用户使用的是老式浏览器，则代码会针对旧版本的IE进行降级处理了,使之在旧式浏览器上以某种形式降级体验却不至于完全不能用。<br>如：border-shadow</p>\n<p>渐进增强：从被所有浏览器支持的基本功能开始，逐步地添加那些只有新版本浏览器才支持的功能,向页面增加不影响基础浏览器的额外样式和功能的。当浏览器支持时，它们会自动地呈现出来并发挥作用。<br>如：默认使用flash上传，但如果浏览器支持 HTML5 的文件上传功能，则使用HTML5实现更好的体验；<br>是否了解公钥加密和私钥加密。</p>\n<p>一般情况下是指私钥用于对数据进行签名，公钥用于对签名进行验证;<br>HTTP网站在浏览器端用公钥加密敏感数据，然后在服务器端再用私钥解密。<br>WEB应用从服务器主动推送Data到客户端有那些方式？</p>\n<p>html5提供的Websocket<br>不可见的iframe<br>WebSocket通过Flash<br>XHR长时间连接<br>XHR Multipart Streaming<br><code>&lt;script&gt;</code>标签的长时间连接(可跨域)<br>对Node的优点和缺点提出了自己的看法？</p>\n<p>*（优点）因为Node是基于事件驱动和无阻塞的，所以非常适合处理并发请求，<br>  因此构建在Node上的代理服务器相比其他技术实现（如Ruby）的服务器表现要好得多。<br>  此外，与Node代理服务器交互的客户端代码是由javascript语言编写的，<br>  因此客户端和服务器端都用同一种语言编写，这是非常美妙的事情。</p>\n<p>*（缺点）Node是一个相对新的开源项目，所以不太稳定，它总是一直在变，<br>  而且缺少足够多的第三方库支持。看起来，就像是Ruby/Rails当年的样子。</p>\n<h3 id=\"你有用过哪些前端性能优化的方法？\"><a href=\"#你有用过哪些前端性能优化的方法？\" class=\"headerlink\" title=\"你有用过哪些前端性能优化的方法？\"></a>你有用过哪些前端性能优化的方法？</h3><p>  （1） 减少http请求次数：CSS Sprites, JS、CSS源码压缩、图片大小控制合适；网页Gzip，CDN托管，data缓存 ，图片服务器。</p>\n<p>  （2） 前端模板 JS+数据，减少由于HTML标签导致的带宽浪费，前端用变量保存AJAX请求结果，每次操作本地变量，不用请求，减少请求次数</p>\n<p>  （3） 用innerHTML代替DOM操作，减少DOM操作次数，优化javascript性能。</p>\n<p>  （4） 当需要设置的样式很多时设置className而不是直接操作style。</p>\n<p>  （5） 少用全局变量、缓存DOM节点查找的结果。减少IO读取操作。</p>\n<p>  （6） 避免使用CSS Expression（css表达式)又称Dynamic properties(动态属性)。</p>\n<p>  （7） 图片预加载，将样式表放在顶部，将脚本放在底部  加上时间戳。</p>\n<p>  （8） 避免在页面的主体布局中使用table，table要等其中的内容完全下载之后才会显示出来，显示比div+css布局慢。<br>  对普通的网站有一个统一的思路，就是尽量向前端优化、减少数据库操作、减少磁盘IO。向前端优化指的是，在不影响功能和体验的情况下，能在浏览器执行的不要在服务端执行，能在缓存服务器上直接返回的不要到应用服务器，程序能直接取得的结果不要到外部取得，本机内能取得的数据不要到远程取，内存能取到的不要到磁盘取，缓存中有的不要去数据库查询。减少数据库操作指减少更新次数、缓存结果减少查询次数、将数据库执行的操作尽可能的让你的程序完成（例如join查询），减少磁盘IO指尽量不使用文件系统作为缓存、减少读写文件次数等。程序优化永远要优化慢的部分，换语言是无法“优化”的。</p>\n<h3 id=\"http状态码有那些？分别代表是什么意思？\"><a href=\"#http状态码有那些？分别代表是什么意思？\" class=\"headerlink\" title=\"http状态码有那些？分别代表是什么意思？\"></a>http状态码有那些？分别代表是什么意思？</h3><pre><code>简单版\n[\n    100  Continue   继续，一般在发送post请求时，已发送了http header之后服务端将返回此信息，表示确认，之后发送具体参数信息\n    200  OK         正常返回信息\n    201  Created    请求成功并且服务器创建了新的资源\n    202  Accepted   服务器已接受请求，但尚未处理\n    301  Moved Permanently  请求的网页已永久移动到新位置。\n    302 Found       临时性重定向。\n    303 See Other   临时性重定向，且总是使用 GET 请求新的 URI。\n    304  Not Modified 自从上次请求后，请求的网页未修改过。\n\n    400 Bad Request  服务器无法理解请求的格式，客户端不应当尝试再次使用相同的内容发起请求。\n    401 Unauthorized 请求未授权。\n    403 Forbidden   禁止访问。\n    404 Not Found   找不到如何与 URI 相匹配的资源。\n\n    500 Internal Server Error  最常见的服务器端错误。\n    503 Service Unavailable 服务器端暂时无法处理请求（可能是过载或维护）。\n]</code></pre><p>  完整版<br>  1**(信息类)：表示接收到请求并且继续处理<br>    100——客户必须继续发出请求<br>    101——客户要求服务器根据请求转换HTTP协议版本</p>\n<p>  2**(响应成功)：表示动作被成功接收、理解和接受<br>    200——表明该请求被成功地完成，所请求的资源发送回客户端<br>    201——提示知道新文件的URL<br>    202——接受和处理、但处理未完成<br>    203——返回信息不确定或不完整<br>    204——请求收到，但返回信息为空<br>    205——服务器完成了请求，用户代理必须复位当前已经浏览过的文件<br>    206——服务器已经完成了部分用户的GET请求</p>\n<p>  3**(重定向类)：为了完成指定的动作，必须接受进一步处理<br>    300——请求的资源可在多处得到<br>    301——本网页被永久性转移到另一个URL<br>    302——请求的网页被转移到一个新的地址，但客户访问仍继续通过原始URL地址，重定向，新的URL会在response中的Location中返回，浏览器将会使用新的URL发出新的Request。<br>    303——建议客户访问其他URL或访问方式<br>    304——自从上次请求后，请求的网页未修改过，服务器返回此响应时，不会返回网页内容，代表上次的文档已经被缓存了，还可以继续使用<br>    305——请求的资源必须从服务器指定的地址得到<br>    306——前一版本HTTP中使用的代码，现行版本中不再使用<br>    307——申明请求的资源临时性删除</p>\n<p>  4**(客户端错误类)：请求包含错误语法或不能正确执行<br>    400——客户端请求有语法错误，不能被服务器所理解<br>    401——请求未经授权，这个状态代码必须和WWW-Authenticate报头域一起使用<br>    HTTP 401.1 - 未授权：登录失败<br>    　　HTTP 401.2 - 未授权：服务器配置问题导致登录失败<br>    　　HTTP 401.3 - ACL 禁止访问资源<br>    　　HTTP 401.4 - 未授权：授权被筛选器拒绝<br>    HTTP 401.5 - 未授权：ISAPI 或 CGI 授权失败<br>    402——保留有效ChargeTo头响应<br>    403——禁止访问，服务器收到请求，但是拒绝提供服务<br>    HTTP 403.1 禁止访问：禁止可执行访问<br>    　　HTTP 403.2 - 禁止访问：禁止读访问<br>    　　HTTP 403.3 - 禁止访问：禁止写访问<br>    　　HTTP 403.4 - 禁止访问：要求 SSL<br>    　　HTTP 403.5 - 禁止访问：要求 SSL 128<br>    　　HTTP 403.6 - 禁止访问：IP 地址被拒绝<br>    　　HTTP 403.7 - 禁止访问：要求客户证书<br>    　　HTTP 403.8 - 禁止访问：禁止站点访问<br>    　　HTTP 403.9 - 禁止访问：连接的用户过多<br>    　　HTTP 403.10 - 禁止访问：配置无效<br>    　　HTTP 403.11 - 禁止访问：密码更改<br>    　　HTTP 403.12 - 禁止访问：映射器拒绝访问<br>    　　HTTP 403.13 - 禁止访问：客户证书已被吊销<br>    　　HTTP 403.15 - 禁止访问：客户访问许可过多<br>    　　HTTP 403.16 - 禁止访问：客户证书不可信或者无效<br>    HTTP 403.17 - 禁止访问：客户证书已经到期或者尚未生效<br>    404——一个404错误表明可连接服务器，但服务器无法取得所请求的网页，请求资源不存在。eg：输入了错误的URL<br>    405——用户在Request-Line字段定义的方法不允许<br>    406——根据用户发送的Accept拖，请求资源不可访问<br>    407——类似401，用户必须首先在代理服务器上得到授权<br>    408——客户端没有在用户指定的饿时间内完成请求<br>    409——对当前资源状态，请求不能完成<br>    410——服务器上不再有此资源且无进一步的参考地址<br>    411——服务器拒绝用户定义的Content-Length属性请求<br>    412——一个或多个请求头字段在当前请求中错误<br>    413——请求的资源大于服务器允许的大小<br>    414——请求的资源URL长于服务器允许的长度<br>    415——请求资源不支持请求项目格式<br>    416——请求中包含Range请求头字段，在当前请求资源范围内没有range指示值，请求也不包含If-Range请求头字段<br>    417——服务器不满足请求Expect头字段指定的期望值，如果是代理服务器，可能是下一级服务器不能满足请求长。</p>\n<p>  5**(服务端错误类)：服务器不能正确执行一个正确的请求<br>    HTTP 500 - 服务器遇到错误，无法完成请求<br>    　　HTTP 500.100 - 内部服务器错误 - ASP 错误<br>    　　HTTP 500-11 服务器关闭<br>    　　HTTP 500-12 应用程序重新启动<br>    　　HTTP 500-13 - 服务器太忙<br>    　　HTTP 500-14 - 应用程序无效<br>    　　HTTP 500-15 - 不允许请求 global.asa<br>    　　Error 501 - 未实现<br>  HTTP 502 - 网关错误<br>  HTTP 503：由于超载或停机维护，服务器目前无法使用，一段时间后可能恢复正常</p>\n<h3 id=\"一个页面从输入-URL-到页面加载显示完成，这个过程中都发生了什么？（流程说的越详细越好）\"><a href=\"#一个页面从输入-URL-到页面加载显示完成，这个过程中都发生了什么？（流程说的越详细越好）\" class=\"headerlink\" title=\"一个页面从输入 URL 到页面加载显示完成，这个过程中都发生了什么？（流程说的越详细越好）\"></a>一个页面从输入 URL 到页面加载显示完成，这个过程中都发生了什么？（流程说的越详细越好）</h3><p>  注：这题胜在区分度高，知识点覆盖广，再不懂的人，也能答出几句，<br>  而高手可以根据自己擅长的领域自由发挥，从URL规范、HTTP协议、DNS、CDN、数据库查询、<br>  到浏览器流式解析、CSS规则构建、layout、paint、onload/domready、JS执行、JS API绑定等等；</p>\n<p>  详细版：<br>    1、浏览器会开启一个线程来处理这个请求，对 URL 分析判断如果是 http 协议就按照 Web 方式来处理;<br>    2、调用浏览器内核中的对应方法，比如 WebView 中的 loadUrl 方法;<br>    3、通过DNS解析获取网址的IP地址，设置 UA 等信息发出第二个GET请求;<br>    4、进行HTTP协议会话，客户端发送报头(请求报头);<br>    5、进入到web服务器上的 Web Server，如 Apache、Tomcat、Node.JS 等服务器;<br>    6、进入部署好的后端应用，如 PHP、Java、JavaScript、Python 等，找到对应的请求处理;<br>    7、处理结束回馈报头，此处如果浏览器访问过，缓存上有对应资源，会与服务器最后修改时间对比，一致则返回304;<br>    8、浏览器开始下载html文档(响应报头，状态码200)，同时使用缓存;<br>    9、文档树建立，根据标记请求所需指定MIME类型的文件（比如css、js）,同时设置了cookie;<br>    10、页面开始渲染DOM，JS根据DOM API操作DOM,执行事件绑定等，页面显示完成。</p>\n<p>  简洁版：<br>    浏览器根据请求的URL交给DNS域名解析，找到真实IP，向服务器发起请求；<br>    服务器交给后台处理完成后返回数据，浏览器接收文件（HTML、JS、CSS、图象等）；<br>    浏览器对加载到的资源（HTML、JS、CSS等）进行语法解析，建立相应的内部数据结构（如HTML的DOM）；<br>    载入解析到的资源文件，渲染页面，完成。</p>\n<h3 id=\"部分地区用户反应网站很卡，请问有哪些可能性的原因，以及解决方法？\"><a href=\"#部分地区用户反应网站很卡，请问有哪些可能性的原因，以及解决方法？\" class=\"headerlink\" title=\"部分地区用户反应网站很卡，请问有哪些可能性的原因，以及解决方法？\"></a>部分地区用户反应网站很卡，请问有哪些可能性的原因，以及解决方法？</h3><p>从打开app到刷新出内容，整个过程中都发生了什么，如果感觉慢，怎么定位问题，怎么解决?</p>\n<p>除了前端以外还了解什么其它技术么？你最最厉害的技能是什么？</p>\n<p>你用的得心应手用的熟练地编辑器&amp;开发环境是什么样子？</p>\n<p>Sublime Text 3 + 相关插件编写前端代码<br>Google chrome 、Mozilla Firefox浏览器 +firebug 兼容测试和预览页面UI、动画效果和交互功能<br>Node.js+Gulp<br>git 用于版本控制和Code Review<br>对前端工程师这个职位是怎么样理解的？它的前景会怎么样？</p>\n<p>前端是最贴近用户的程序员，比后端、数据库、产品经理、运营、安全都近。<br>1、实现界面交互<br>2、提升用户体验<br>3、有了Node.js，前端可以实现服务端的一些事情</p>\n<p>前端是最贴近用户的程序员，前端的能力就是能让产品从 90分进化到 100 分，甚至更好，</p>\n<p>参与项目，快速高质量完成实现效果图，精确到1px；</p>\n<p>与团队成员，UI设计，产品经理的沟通；</p>\n<p>做好的页面结构，页面重构和用户体验；</p>\n<p>处理hack，兼容、写出优美的代码格式；</p>\n<p>针对服务器的优化、拥抱最新前端技术。<br>你怎么看待Web App 、hybrid App、Native App？</p>\n<p>你移动端前端开发的理解？（和 Web 前端开发的主要区别是什么？）</p>\n<p>你对加班的看法？</p>\n<p>加班就像借钱，原则应当是——救急不救穷<br>平时如何管理你的项目？</p>\n<p>先期团队必须确定好全局样式（globe.css），编码模式(utf-8) 等；</p>\n<p>编写习惯必须一致（例如都是采用继承式的写法，单样式都写成一行）；</p>\n<p>标注样式编写人，各模块都及时标注（标注关键样式调用的地方）；</p>\n<p>页面进行标注（例如 页面 模块 开始和结束）；</p>\n<p>CSS跟HTML 分文件夹并行存放，命名都得统一（例如style.css）；</p>\n<p>JS 分文件夹存放 命名以该JS功能为准的英文翻译。</p>\n<p>图片采用整合的 images.png png8 格式文件使用 尽量整合在一起使用方便将来的管理<br>如何设计突发大规模并发架构？</p>\n<p>当团队人手不足，把功能代码写完已经需要加班的情况下，你会做前端代码的测试吗？</p>\n<p>说说最近最流行的一些东西吧？常去哪些网站？</p>\n<pre><code>ES6\\WebAssembly\\Node\\MVVM\\Web Components\\React\\React Native\\Webpack 组件化</code></pre><h3 id=\"知道什么是SEO并且怎么优化么-知道各种meta-data的含义么\"><a href=\"#知道什么是SEO并且怎么优化么-知道各种meta-data的含义么\" class=\"headerlink\" title=\"知道什么是SEO并且怎么优化么? 知道各种meta data的含义么?\"></a>知道什么是SEO并且怎么优化么? 知道各种meta data的含义么?</h3><p>移动端（Android IOS）怎么做好用户体验?</p>\n<p>清晰的视觉纵线、<br>信息的分组、极致的减法、<br>利用选择代替输入、<br>标签及文字的排布方式、<br>依靠明文确认密码、<br>合理的键盘利用、<br>简单描述一下你做过的移动APP项目研发流程？</p>\n<p>你在现在的团队处于什么样的角色，起到了什么明显的作用？</p>\n<p>你认为怎样才是全端工程师（Full Stack developer）？</p>\n<p>介绍一个你最得意的作品吧？</p>\n<p>你有自己的技术博客吗，用了哪些技术？</p>\n<p>对前端安全有什么看法？</p>\n<p>是否了解Web注入攻击，说下原理，最常见的两种攻击（XSS 和 CSRF）了解到什么程度？</p>\n<p>项目中遇到国哪些印象深刻的技术难题，具体是什么问题，怎么解决？。</p>\n<p>最近在学什么东西？</p>\n<p>你的优点是什么？缺点是什么？</p>\n<p>如何管理前端团队?</p>\n<p>最近在学什么？能谈谈你未来3，5年给自己的规划吗？</p>\n","site":{"data":{}},"excerpt":"<h3 id=\"Doctype作用？标准模式与兼容模式各有什么区别\"><a href=\"#Doctype作用？标准模式与兼容模式各有什么区别\" class=\"headerlink\" title=\"Doctype作用？标准模式与兼容模式各有什么区别?\"></a>Doctype作用？标准模式与兼容模式各有什么区别?</h3><p>（1）、&lt;!DOCTYPE&gt;声明位于位于HTML文档中的第一行，处于 <html> 标签之前。告知浏览器的解析器用什么文档标准解析这个文档。DOCTYPE不存在或格式不正确会导致文档以兼容模式呈现。</p>\n<p>（2）、标准模式的排版 和JS运作模式都是以该浏览器支持的最高标准运行。在兼容模式中，页面以宽松的向后兼容的方式显示,模拟老式浏览器的行为以防止站点无法工作。<br>HTML5 为什么只需要写 <!DOCTYPE HTML>？</p>\n<p> HTML5 不基于 SGML，因此不需要对DTD进行引用，但是需要doctype来规范浏览器的行为（让浏览器按照它们应该的方式来运行）；</p>\n<p> 而HTML4.01基于SGML,所以需要对DTD进行引用，才能告知浏览器文档所使用的文档类型。</p>","more":"<p>行内元素有哪些？块级元素有哪些？ 空(void)元素有那些？</p>\n<p>首先：CSS规范规定，每个元素都有display属性，确定该元素的类型，每个元素都有默认的display值，如div的display默认值为“block”，则为“块级”元素；span默认display属性值为“inline”，是“行内”元素。</p>\n<h4 id=\"（1）行内元素有：\"><a href=\"#（1）行内元素有：\" class=\"headerlink\" title=\"（1）行内元素有：\"></a>（1）行内元素有：</h4><p>  a b span img input select strong（强调的语气）</p>\n<h4 id=\"（2）块级元素有：\"><a href=\"#（2）块级元素有：\" class=\"headerlink\" title=\"（2）块级元素有：\"></a>（2）块级元素有：</h4><p>   div ul ol li dl dt dd h1 h2 h3 h4…p</p>\n<h4 id=\"（3）常见的空元素：\"><a href=\"#（3）常见的空元素：\" class=\"headerlink\" title=\"（3）常见的空元素：\"></a>（3）常见的空元素：</h4><pre><code>&lt;br&gt; &lt;hr&gt; &lt;img&gt; &lt;input&gt; &lt;link&gt; &lt;meta&gt;\n鲜为人知的是：\n&lt;area&gt; &lt;base&gt; &lt;col&gt; &lt;command&gt; &lt;embed&gt; &lt;keygen&gt; &lt;param&gt; &lt;source&gt; &lt;track&gt; &lt;wbr&gt;</code></pre><h3 id=\"页面导入样式时，使用link和-import有什么区别？\"><a href=\"#页面导入样式时，使用link和-import有什么区别？\" class=\"headerlink\" title=\"页面导入样式时，使用link和@import有什么区别？\"></a>页面导入样式时，使用link和@import有什么区别？</h3><p>（1）link属于XHTML标签，除了加载CSS外，还能用于定义RSS, 定义rel连接属性等作用；而@import是CSS提供的，只能用于加载CSS;</p>\n<p>（2）页面被加载的时，link会同时被加载，而@import引用的CSS会等到页面被加载完再加载;</p>\n<p>（3）import是CSS2.1 提出的，只在IE5以上才能被识别，而link是XHTML标签，无兼容问题;</p>\n<h3 id=\"介绍一下你对浏览器内核的理解？\"><a href=\"#介绍一下你对浏览器内核的理解？\" class=\"headerlink\" title=\"介绍一下你对浏览器内核的理解？\"></a>介绍一下你对浏览器内核的理解？</h3><p>主要分成两部分：渲染引擎(layout engineer或Rendering Engine)和JS引擎。</p>\n<p><strong>渲染引擎</strong>：负责取得网页的内容（HTML、XML、图像等等）、整理讯息（例如加入CSS等），以及计算网页的显示方式，然后会输出至显示器或打印机。浏览器的内核的不同对于网页的语法解释会有不同，所以渲染的效果也不相同。所有网页浏览器、电子邮件客户端以及其它需要编辑、显示网络内容的应用程序都需要内核。</p>\n<p><strong>JS引擎</strong>：解析和执行javascript来实现网页的动态效果。</p>\n<p>最开始渲染引擎和JS引擎并没有区分的很明确，后来JS引擎越来越独立，内核就倾向于只指渲染引擎。</p>\n<h4 id=\"常见的浏览器内核有哪些？\"><a href=\"#常见的浏览器内核有哪些？\" class=\"headerlink\" title=\"常见的浏览器内核有哪些？\"></a>常见的浏览器内核有哪些？</h4><p>Trident内核：IE,MaxThon,TT,The World,360,搜狗浏览器等。[又称MSHTML]<br>Gecko内核：Netscape6及以上版本，FF,MozillaSuite/SeaMonkey等<br>Presto内核：Opera7及以上。      [Opera内核原为：Presto，现为：Blink;]<br>Webkit内核：Safari,Chrome等。   [ Chrome的：Blink（WebKit的分支）]</p>\n<h3 id=\"html5有哪些新特性、移除了那些元素？如何处理HTML5新标签的浏览器兼容问题？如何区分-HTML-和-HTML5？\"><a href=\"#html5有哪些新特性、移除了那些元素？如何处理HTML5新标签的浏览器兼容问题？如何区分-HTML-和-HTML5？\" class=\"headerlink\" title=\"html5有哪些新特性、移除了那些元素？如何处理HTML5新标签的浏览器兼容问题？如何区分 HTML 和 HTML5？\"></a>html5有哪些新特性、移除了那些元素？如何处理HTML5新标签的浏览器兼容问题？如何区分 HTML 和 HTML5？</h3><ul>\n<li><p>HTML5 现在已经不是 SGML 的子集，主要是关于图像，位置，存储，多任务等功能的增加。</p>\n<pre><code>绘画 canvas;\n用于媒介回放的 video 和 audio 元素;\n本地离线存储 localStorage 长期存储数据，浏览器关闭后数据不丢失;\nsessionStorage 的数据在浏览器关闭后自动删除;\n语意化更好的内容元素，比如 article、footer、header、nav、section;\n表单控件，calendar、date、time、email、url、search;\n新的技术webworker, websocket, Geolocation;</code></pre><p>移除的元素：</p>\n<pre><code>纯表现的元素：basefont，big，center，font, s，strike，tt，u;\n对可用性产生负面影响的元素：frame，frameset，noframes；</code></pre></li>\n<li><p>支持HTML5新标签：<br>   IE8/IE7/IE6支持通过document.createElement方法产生的标签，<br>   可以利用这一特性让这些浏览器支持HTML5新标签，<br>   浏览器支持新标签后，还需要添加标签默认的样式。</p>\n<p>   当然也可以直接使用成熟的框架、比如html5shim;</p>\n   <!--[if lt IE 9]>\n      <script> src=\"http://html5shim.googlecode.com/svn/trunk/html5.js\"</script>\n   <![endif]-->\n</li>\n<li><p>如何区分HTML5： DOCTYPE声明\\新增的结构元素\\功能元素<br>简述一下你对HTML语义化的理解？</p>\n</li>\n</ul>\n<p>用正确的标签做正确的事情。<br>html语义化让页面的内容结构化，结构更清晰，便于对浏览器、搜索引擎解析;<br>即使在没有样式CSS情况下也以一种文档格式显示，并且是容易阅读的;<br>搜索引擎的爬虫也依赖于HTML标记来确定上下文和各个关键字的权重，利于SEO;<br>使阅读源代码的人对网站更容易将网站分块，便于阅读维护理解。<br>HTML5的离线储存怎么使用，工作原理能不能解释一下？</p>\n<p>在用户没有与因特网连接时，可以正常访问站点或应用，在用户与因特网连接时，更新用户机器上的缓存文件。<br>原理：HTML5的离线存储是基于一个新建的.appcache文件的缓存机制(不是存储技术)，通过这个文件上的解析清单离线存储资源，这些资源就会像cookie一样被存储了下来。之后当网络在处于离线状态下时，浏览器会通过被离线存储的数据进行页面展示。</p>\n<p>如何使用：<br>1、页面头部像下面一样加入一个manifest的属性；<br>2、在cache.manifest文件的编写离线存储的资源；<br>    CACHE MANIFEST<br>    #v0.11<br>    CACHE:<br>    js/app.js<br>    css/style.css<br>    NETWORK:<br>    resourse/logo.png<br>    FALLBACK:<br>    / /offline.html<br>3、在离线状态时，操作window.applicationCache进行需求实现。<br>详细的使用请参考：<a href=\"https://segmentfault.com/a/1190000000732617\" target=\"_blank\" rel=\"noopener\">有趣的HTML5：离线存储</a></p>\n<h3 id=\"浏览器是怎么对HTML5的离线储存资源进行管理和加载的呢？\"><a href=\"#浏览器是怎么对HTML5的离线储存资源进行管理和加载的呢？\" class=\"headerlink\" title=\"浏览器是怎么对HTML5的离线储存资源进行管理和加载的呢？\"></a>浏览器是怎么对HTML5的离线储存资源进行管理和加载的呢？</h3><p>在线的情况下，浏览器发现html头部有manifest属性，它会请求manifest文件，如果是第一次访问app，那么浏览器就会根据manifest文件的内容下载相应的资源并且进行离线存储。如果已经访问过app并且资源已经离线存储了，那么浏览器就会使用离线的资源加载页面，然后浏览器会对比新的manifest文件与旧的manifest文件，如果文件没有发生改变，就不做任何操作，如果文件改变了，那么就会重新下载文件中的资源并进行离线存储。<br>离线的情况下，浏览器就直接使用离线存储的资源。<br>详细的使用请参考：有趣的HTML5：离线存储</p>\n<h3 id=\"请描述一下-cookies，sessionStorage-和-localStorage-的区别？\"><a href=\"#请描述一下-cookies，sessionStorage-和-localStorage-的区别？\" class=\"headerlink\" title=\"请描述一下 cookies，sessionStorage 和 localStorage 的区别？\"></a>请描述一下 cookies，sessionStorage 和 localStorage 的区别？</h3><p>cookie是网站为了标示用户身份而储存在用户本地终端（Client Side）上的数据（通常经过加密）。<br>cookie数据始终在同源的http请求中携带（即使不需要），记会在浏览器和服务器间来回传递。<br>sessionStorage和localStorage不会自动把数据发给服务器，仅在本地保存。</p>\n<ul>\n<li><p>存储大小：<br>  cookie数据大小不能超过4k。<br>  sessionStorage和localStorage 虽然也有存储大小的限制，但比cookie大得多，可以达到5M或更大。</p>\n</li>\n<li><p>有期时间：<br>  localStorage    存储持久数据，浏览器关闭后数据不丢失除非主动删除数据；<br>  sessionStorage  数据在当前浏览器窗口关闭后自动删除。<br>  cookie          设置的cookie过期时间之前一直有效，即使窗口或浏览器关闭。</p>\n<h3 id=\"iframe有哪些缺点？\"><a href=\"#iframe有哪些缺点？\" class=\"headerlink\" title=\"iframe有哪些缺点？\"></a>iframe有哪些缺点？</h3></li>\n</ul>\n<ol>\n<li>iframe会阻塞主页面的Onload事件；</li>\n<li>搜索引擎的检索程序无法解读这种页面，不利于SEO;</li>\n<li>iframe和主页面共享连接池，而浏览器对相同域的连接有限制，所以会影响页面的并行加载。</li>\n<li>使用iframe之前需要考虑这两个缺点。如果需要使用iframe，最好是通过javascript<br>动态给iframe添加src属性值，这样可以绕开以上两个问题。</li>\n</ol>\n<h3 id=\"Label的作用是什么？是怎么用的？\"><a href=\"#Label的作用是什么？是怎么用的？\" class=\"headerlink\" title=\"Label的作用是什么？是怎么用的？\"></a>Label的作用是什么？是怎么用的？</h3><p>label标签来定义表单控制间的关系,当用户选择该标签时，浏览器会自动将焦点转到和标签相关的表单控件上。</p>\n<p><code>&lt;label for=&quot;Name&quot;&gt;Number:&lt;/label&gt;\n&lt;input type=“text“name=&quot;Name&quot; id=&quot;Name&quot;/&gt;</code></p>\n<p><code>&lt;label&gt;Date:&lt;input type=&quot;text&quot; name=&quot;B&quot;/&gt;&lt;/label&gt;</code></p>\n<h3 id=\"HTML5的form如何关闭自动完成功能？\"><a href=\"#HTML5的form如何关闭自动完成功能？\" class=\"headerlink\" title=\"HTML5的form如何关闭自动完成功能？\"></a>HTML5的form如何关闭自动完成功能？</h3><p>给不想要提示的 form 或某个 input 设置为 autocomplete=off。</p>\n<h3 id=\"如何实现浏览器内多个标签页之间的通信-阿里\"><a href=\"#如何实现浏览器内多个标签页之间的通信-阿里\" class=\"headerlink\" title=\"如何实现浏览器内多个标签页之间的通信? (阿里)\"></a>如何实现浏览器内多个标签页之间的通信? (阿里)</h3><p>WebSocket、SharedWorker；<br>也可以调用localstorge、cookies等本地存储方式；</p>\n<p>localstorge另一个浏览上下文里被添加、修改或删除时，它都会触发一个事件，<br>我们通过监听事件，控制它的值来进行页面信息通信；<br>注意quirks：Safari 在无痕模式下设置localstorge值时会抛出 QuotaExceededError 的异常；</p>\n<h3 id=\"webSocket如何兼容低浏览器？-阿里\"><a href=\"#webSocket如何兼容低浏览器？-阿里\" class=\"headerlink\" title=\"webSocket如何兼容低浏览器？(阿里)\"></a>webSocket如何兼容低浏览器？(阿里)</h3><p>Adobe Flash Socket 、<br>ActiveX HTMLFile (IE) 、<br>基于 multipart 编码发送 XHR 、<br>基于长轮询的 XHR<br>页面可见性（Page Visibility API） 可以有哪些用途？</p>\n<p>通过 visibilityState 的值检测页面当前是否可见，以及打开网页的时间等;<br>在页面被切换到其他后台进程的时候，自动暂停音乐或视频的播放；</p>\n<h3 id=\"如何在页面上实现一个圆形的可点击区域？\"><a href=\"#如何在页面上实现一个圆形的可点击区域？\" class=\"headerlink\" title=\"如何在页面上实现一个圆形的可点击区域？\"></a>如何在页面上实现一个圆形的可点击区域？</h3><p>1、map+area或者svg<br>2、border-radius<br>3、纯js实现 需要求一个点在不在圆上简单算法、获取鼠标坐标等等<br>实现不使用 border 画出1px高的线，在不同浏览器的标准模式与怪异模式下都能保持一致的效果。</p>\n<p><code>&lt;div style=&quot;height:1px;overflow:hidden;background:red&quot;&gt;&lt;/div&gt;</code></p>\n<h3 id=\"网页验证码是干嘛的，是为了解决什么安全问题。\"><a href=\"#网页验证码是干嘛的，是为了解决什么安全问题。\" class=\"headerlink\" title=\"网页验证码是干嘛的，是为了解决什么安全问题。\"></a>网页验证码是干嘛的，是为了解决什么安全问题。</h3><p>区分用户是计算机还是人的公共全自动程序。可以防止恶意破解密码、刷票、论坛灌水；<br>有效防止黑客对某一个特定注册用户用特定程序暴力破解方式进行不断的登陆尝试。</p>\n<h3 id=\"title与h1的区别、b与strong的区别、i与em的区别？\"><a href=\"#title与h1的区别、b与strong的区别、i与em的区别？\" class=\"headerlink\" title=\"title与h1的区别、b与strong的区别、i与em的区别？\"></a>title与h1的区别、b与strong的区别、i与em的区别？</h3><p>title属性没有明确意义只表示是个标题，H1则表示层次明确的标题，对页面信息的抓取也有很大的影响；</p>\n<p>strong是标明重点内容，有语气加强的含义，使用阅读设备阅读网络时：<strong>会重读，而<B>是展示强调内容。</p>\n<p>i内容展示为斜体，em表示强调的文本；</p>\n<p>Physical Style Elements – 自然样式标签<br>b, i, u, s, pre<br>Semantic Style Elements – 语义样式标签<br>strong, em, ins, del, code<br>应该准确使用语义样式标签, 但不能滥用, 如果不能确定时首选使用自然样式标签。<br>CSS</p>\n<h3 id=\"介绍一下标准的CSS的盒子模型？低版本IE的盒子模型有什么不同的？\"><a href=\"#介绍一下标准的CSS的盒子模型？低版本IE的盒子模型有什么不同的？\" class=\"headerlink\" title=\"介绍一下标准的CSS的盒子模型？低版本IE的盒子模型有什么不同的？\"></a>介绍一下标准的CSS的盒子模型？低版本IE的盒子模型有什么不同的？</h3><p>（1）有两种， IE 盒子模型、W3C 盒子模型；<br>（2）盒模型： 内容(content)、填充(padding)、边界(margin)、 边框(border)；<br>（3）区  别： IE的content部分把 border 和 padding计算了进去;</p>\n<h4 id=\"CSS选择符有哪些？哪些属性可以继承？\"><a href=\"#CSS选择符有哪些？哪些属性可以继承？\" class=\"headerlink\" title=\"CSS选择符有哪些？哪些属性可以继承？\"></a>CSS选择符有哪些？哪些属性可以继承？</h4><ul>\n<li><p>1.id选择器（ # myid）<br>2.类选择器（.myclassname）<br>3.标签选择器（div, h1, p）<br>4.相邻选择器（h1 + p）<br>5.子选择器（ul &gt; li）<br>6.后代选择器（li a）<br>7.通配符选择器（ * ）<br>8.属性选择器（a[rel = “external”]）<br>9.伪类选择器（a:hover, li:nth-child）</p>\n</li>\n<li><p>可继承的样式： font-size font-family color, UL LI DL DD DT;</p>\n</li>\n<li><p>不可继承的样式：border padding margin width height ;<br>CSS优先级算法如何计算？</p>\n</li>\n<li><p>优先级就近原则，同权重情况下样式定义最近者为准;</p>\n</li>\n<li><p>载入样式以最后载入的定位为准;</p>\n</li>\n</ul>\n<p>优先级为:<br>   !important &gt;  id &gt; class &gt; tag<br>    important 比 内联优先级高</p>\n<h3 id=\"CSS3新增伪类有那些？\"><a href=\"#CSS3新增伪类有那些？\" class=\"headerlink\" title=\"CSS3新增伪类有那些？\"></a>CSS3新增伪类有那些？</h3><pre><code>举例：\np:first-of-type 选择属于其父元素的首个 &lt;p&gt; 元素的每个 &lt;p&gt; 元素。\np:last-of-type  选择属于其父元素的最后 &lt;p&gt; 元素的每个 &lt;p&gt; 元素。\np:only-of-type  选择属于其父元素唯一的 &lt;p&gt; 元素的每个 &lt;p&gt; 元素。\np:only-child        选择属于其父元素的唯一子元素的每个 &lt;p&gt; 元素。\np:nth-child(2)  选择属于其父元素的第二个子元素的每个 &lt;p&gt; 元素。\n\n:after          在元素之前添加内容,也可以用来做清除浮动。\n:before         在元素之后添加内容\n:enabled        \n:disabled       控制表单控件的禁用状态。\n:checked        单选框或复选框被选中。</code></pre><h3 id=\"如何居中div？如何居中一个浮动元素？如何让绝对定位的div居中？\"><a href=\"#如何居中div？如何居中一个浮动元素？如何让绝对定位的div居中？\" class=\"headerlink\" title=\"如何居中div？如何居中一个浮动元素？如何让绝对定位的div居中？\"></a>如何居中div？如何居中一个浮动元素？如何让绝对定位的div居中？</h3><p>给div设置一个宽度，然后添加margin:0 auto属性</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">div</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>:<span class=\"number\">200px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>:<span class=\"number\">0</span> auto;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"居中一个浮动元素\"><a href=\"#居中一个浮动元素\" class=\"headerlink\" title=\"居中一个浮动元素\"></a>居中一个浮动元素</h4><p>  确定容器的宽高 宽500 高 300 的层<br>  设置层的外边距</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.div</span> &#123;</span><br><span class=\"line\">     width:500px ; height:300px;//高度可以不设</span><br><span class=\"line\">     <span class=\"selector-tag\">margin</span>: <span class=\"selector-tag\">-150px</span> 0 0 <span class=\"selector-tag\">-250px</span>;</span><br><span class=\"line\">     position:relative;         //相对定位</span><br><span class=\"line\">     background-color:pink;     //方便看效果</span><br><span class=\"line\">     <span class=\"selector-tag\">left</span><span class=\"selector-pseudo\">:50</span>%;</span><br><span class=\"line\">     <span class=\"selector-tag\">top</span><span class=\"selector-pseudo\">:50</span>%;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"让绝对定位的div居中\"><a href=\"#让绝对定位的div居中\" class=\"headerlink\" title=\"让绝对定位的div居中\"></a>让绝对定位的div居中</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.div</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">1200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: none;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">0</span> auto;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">bottom</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">right</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"display有哪些值？说明他们的作用。\"><a href=\"#display有哪些值？说明他们的作用。\" class=\"headerlink\" title=\"display有哪些值？说明他们的作用。\"></a>display有哪些值？说明他们的作用。</h3><p>  block         象块类型元素一样显示。<br>  none          缺省值。象行内元素类型一样显示。<br>  inline-block  象行内元素一样显示，但其内容象块类型元素一样显示。<br>  list-item     象块类型元素一样显示，并添加样式列表标记。<br>  table         此元素会作为块级表格来显示<br>  inherit       规定应该从父元素继承 display 属性的值</p>\n<h3 id=\"position的值relative和absolute定位原点是？\"><a href=\"#position的值relative和absolute定位原点是？\" class=\"headerlink\" title=\"position的值relative和absolute定位原点是？\"></a>position的值relative和absolute定位原点是？</h3><p>  absolute<br>    生成绝对定位的元素，相对于值不为 static的第一个父元素进行定位。</p>\n<p>  fixed （老IE不支持）<br>    生成绝对定位的元素，相对于浏览器窗口进行定位。</p>\n<p>  relative<br>    生成相对定位的元素，相对于其正常位置进行定位。</p>\n<p>  static<br>    默认值。没有定位，元素出现在正常的流中（忽略 top, bottom, left, right z-index 声明）。</p>\n<p>  inherit<br>    规定从父元素继承 position 属性的值。</p>\n<h3 id=\"CSS3有哪些新特性？\"><a href=\"#CSS3有哪些新特性？\" class=\"headerlink\" title=\"CSS3有哪些新特性？\"></a>CSS3有哪些新特性？</h3><p>  新增各种CSS选择器  （: not(.input)：所有 class 不是“input”的节点）<br>  圆角           （border-radius:8px）<br>  多列布局        （multi-column layout）<br>  阴影和反射        （Shadow\\Reflect）<br>  文字特效      （text-shadow、）<br>  文字渲染      （Text-decoration）<br>  线性渐变      （gradient）<br>  旋转          （transform）<br>  增加了旋转,缩放,定位,倾斜,动画，多背景<br>  transform:\\scale(0.85,0.90)\\ translate(0px,-30px)\\ skew(-9deg,0deg)\\Animation:<br>请解释一下CSS3的Flexbox（弹性盒布局模型）,以及适用场景？</p>\n<p> .</p>\n<h3 id=\"用纯CSS创建一个三角形的原理是什么？\"><a href=\"#用纯CSS创建一个三角形的原理是什么？\" class=\"headerlink\" title=\"用纯CSS创建一个三角形的原理是什么？\"></a>用纯CSS创建一个三角形的原理是什么？</h3><p>把上、左、右三条边隐藏掉（颜色设为 transparent）</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#demo</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border-width</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border-style</span>: solid;</span><br><span class=\"line\">  <span class=\"attribute\">border-color</span>: transparent transparent red transparent;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"一个满屏-品-字布局-如何设计\"><a href=\"#一个满屏-品-字布局-如何设计\" class=\"headerlink\" title=\"一个满屏 品 字布局 如何设计?\"></a>一个满屏 品 字布局 如何设计?</h3><p>简单的方式：<br>    上面的div宽100%，<br>    下面的两个div分别宽50%，<br>    然后用float或者inline使其不换行即可</p>\n<h3 id=\"经常遇到的浏览器的兼容性有哪些？原因，解决方法是什么，常用hack的技巧-？\"><a href=\"#经常遇到的浏览器的兼容性有哪些？原因，解决方法是什么，常用hack的技巧-？\" class=\"headerlink\" title=\"经常遇到的浏览器的兼容性有哪些？原因，解决方法是什么，常用hack的技巧 ？\"></a>经常遇到的浏览器的兼容性有哪些？原因，解决方法是什么，常用hack的技巧 ？</h3><ul>\n<li><p>png24位的图片在iE6浏览器上出现背景，解决方案是做成PNG8.</p>\n</li>\n<li><p>浏览器默认的margin和padding不同。解决方案是加一个全局的*{margin:0;padding:0;}来统一。</p>\n</li>\n<li><p>IE6双边距bug:块属性标签float后，又有横行的margin情况下，在ie6显示margin比设置的大。</p>\n<p>浮动ie产生的双倍距离 #box{ float:left; width:10px; margin:0 0 0 100px;}</p>\n<p>这种情况之下IE会产生20px的距离，解决方案是在float的标签样式控制中加入 ——_display:inline;将其转化为行内属性。(_这个符号只有ie6会识别)</p>\n<p>渐进识别的方式，从总体中逐渐排除局部。</p>\n<p>首先，巧妙的使用“\\9”这一标记，将IE游览器从所有情况中分离出来。<br>接着，再次使用“+”将IE8和IE7、IE6分离开来，这样IE8已经独立识别。</p>\n<p>css</p>\n<pre><code>.bb{\n    background-color:#f1ee18;/*所有识别*/\n    .background-color:#00deff\\9; /*IE6、7、8识别*/\n    +background-color:#a200ff;/*IE6、7识别*/\n    _background-color:#1e0bd1;/*IE6识别*/\n}</code></pre></li>\n<li><p>IE下,可以使用获取常规属性的方法来获取自定义属性,<br>也可以使用getAttribute()获取自定义属性;<br>Firefox下,只能使用getAttribute()获取自定义属性。<br>解决方法:统一通过getAttribute()获取自定义属性。</p>\n</li>\n<li><p>IE下,even对象有x,y属性,但是没有pageX,pageY属性;<br>Firefox下,event对象有pageX,pageY属性,但是没有x,y属性。</p>\n</li>\n<li><p>解决方法：（条件注释）缺点是在IE浏览器下可能会增加额外的HTTP请求数。</p>\n</li>\n<li><p>Chrome 中文界面下默认会将小于 12px 的文本强制按照 12px 显示,<br>可通过加入 CSS 属性 -webkit-text-size-adjust: none; 解决。</p>\n</li>\n</ul>\n<h3 id=\"超链接访问过后hover样式就不出现了-被点击访问过的超链接样式不在具有hover和active了解决方法是改变CSS属性的排列顺序\"><a href=\"#超链接访问过后hover样式就不出现了-被点击访问过的超链接样式不在具有hover和active了解决方法是改变CSS属性的排列顺序\" class=\"headerlink\" title=\"超链接访问过后hover样式就不出现了 被点击访问过的超链接样式不在具有hover和active了解决方法是改变CSS属性的排列顺序:\"></a>超链接访问过后hover样式就不出现了 被点击访问过的超链接样式不在具有hover和active了解决方法是改变CSS属性的排列顺序:</h3><p>L-V-H-A :  a:link {} a:visited {} a:hover {} a:active {}</p>\n<h3 id=\"li与li之间有看不见的空白间隔是什么原因引起的？有什么解决办法？\"><a href=\"#li与li之间有看不见的空白间隔是什么原因引起的？有什么解决办法？\" class=\"headerlink\" title=\"li与li之间有看不见的空白间隔是什么原因引起的？有什么解决办法？\"></a>li与li之间有看不见的空白间隔是什么原因引起的？有什么解决办法？</h3><p>行框的排列会受到中间空白（回车\\空格）等的影响，因为空格也属于字符,这些空白也会被应用样式，占据空间，所以会有间隔，把字符大小设为0，就没有空格了。</p>\n<h3 id=\"为什么要初始化CSS样式。\"><a href=\"#为什么要初始化CSS样式。\" class=\"headerlink\" title=\"为什么要初始化CSS样式。\"></a>为什么要初始化CSS样式。</h3><ul>\n<li><p>因为浏览器的兼容问题，不同浏览器对有些标签的默认值是不同的，如果没对CSS初始化往往会出现浏览器之间的页面显示差异。</p>\n</li>\n<li><p>当然，初始化样式会对SEO有一定的影响，但鱼和熊掌不可兼得，但力求影响最小的情况下初始化。</p>\n</li>\n</ul>\n<p>最简单的初始化方法： * {padding: 0; margin: 0;} （强烈不建议）</p>\n<p>淘宝的样式初始化代码：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span>, <span class=\"selector-tag\">h1</span>, <span class=\"selector-tag\">h2</span>, <span class=\"selector-tag\">h3</span>, <span class=\"selector-tag\">h4</span>, <span class=\"selector-tag\">h5</span>, <span class=\"selector-tag\">h6</span>, <span class=\"selector-tag\">hr</span>, <span class=\"selector-tag\">p</span>, <span class=\"selector-tag\">blockquote</span>, <span class=\"selector-tag\">dl</span>, <span class=\"selector-tag\">dt</span>, <span class=\"selector-tag\">dd</span>, <span class=\"selector-tag\">ul</span>, <span class=\"selector-tag\">ol</span>, <span class=\"selector-tag\">li</span>, <span class=\"selector-tag\">pre</span>, <span class=\"selector-tag\">form</span>, <span class=\"selector-tag\">fieldset</span>, <span class=\"selector-tag\">legend</span>, <span class=\"selector-tag\">button</span>, <span class=\"selector-tag\">input</span>, <span class=\"selector-tag\">textarea</span>, <span class=\"selector-tag\">th</span>, <span class=\"selector-tag\">td</span> &#123; <span class=\"attribute\">margin</span>:<span class=\"number\">0</span>; <span class=\"attribute\">padding</span>:<span class=\"number\">0</span>; &#125;</span><br><span class=\"line\"><span class=\"selector-tag\">body</span>, <span class=\"selector-tag\">button</span>, <span class=\"selector-tag\">input</span>, <span class=\"selector-tag\">select</span>, <span class=\"selector-tag\">textarea</span> &#123; <span class=\"attribute\">font</span>:<span class=\"number\">12px</span>/<span class=\"number\">1.5</span>tahoma, arial, \\<span class=\"number\">5</span>b8b\\<span class=\"number\">4</span>f53; &#125;</span><br><span class=\"line\"><span class=\"selector-tag\">h1</span>, <span class=\"selector-tag\">h2</span>, <span class=\"selector-tag\">h3</span>, <span class=\"selector-tag\">h4</span>, <span class=\"selector-tag\">h5</span>, <span class=\"selector-tag\">h6</span>&#123; <span class=\"attribute\">font-size</span>:<span class=\"number\">100%</span>; &#125;</span><br><span class=\"line\"><span class=\"selector-tag\">address</span>, <span class=\"selector-tag\">cite</span>, <span class=\"selector-tag\">dfn</span>, <span class=\"selector-tag\">em</span>, <span class=\"selector-tag\">var</span> &#123; <span class=\"attribute\">font-style</span>:normal; &#125;</span><br><span class=\"line\"><span class=\"selector-tag\">code</span>, <span class=\"selector-tag\">kbd</span>, <span class=\"selector-tag\">pre</span>, <span class=\"selector-tag\">samp</span> &#123; <span class=\"attribute\">font-family</span>:couriernew, courier, monospace; &#125;</span><br><span class=\"line\"><span class=\"selector-tag\">small</span>&#123; <span class=\"attribute\">font-size</span>:<span class=\"number\">12px</span>; &#125;</span><br><span class=\"line\"><span class=\"selector-tag\">ul</span>, <span class=\"selector-tag\">ol</span> &#123; <span class=\"attribute\">list-style</span>:none; &#125;</span><br><span class=\"line\"><span class=\"selector-tag\">a</span> &#123; <span class=\"attribute\">text-decoration</span>:none; &#125;</span><br><span class=\"line\"><span class=\"selector-tag\">a</span><span class=\"selector-pseudo\">:hover</span> &#123; <span class=\"attribute\">text-decoration</span>:underline; &#125;</span><br><span class=\"line\"><span class=\"selector-tag\">sup</span> &#123; <span class=\"attribute\">vertical-align</span>:text-top; &#125;</span><br><span class=\"line\"><span class=\"selector-tag\">sub</span>&#123; <span class=\"attribute\">vertical-align</span>:text-bottom; &#125;</span><br><span class=\"line\"><span class=\"selector-tag\">legend</span> &#123; <span class=\"attribute\">color</span>:<span class=\"number\">#000</span>; &#125;</span><br><span class=\"line\"><span class=\"selector-tag\">fieldset</span>, <span class=\"selector-tag\">img</span> &#123; <span class=\"attribute\">border</span>:<span class=\"number\">0</span>; &#125;</span><br><span class=\"line\"><span class=\"selector-tag\">button</span>, <span class=\"selector-tag\">input</span>, <span class=\"selector-tag\">select</span>, <span class=\"selector-tag\">textarea</span> &#123; <span class=\"attribute\">font-size</span>:<span class=\"number\">100%</span>; &#125;</span><br><span class=\"line\"><span class=\"selector-tag\">table</span> &#123; <span class=\"attribute\">border-collapse</span>:collapse; <span class=\"attribute\">border-spacing</span>:<span class=\"number\">0</span>; &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"absolute的containing-block-容器块-计算方式跟正常流有什么不同？\"><a href=\"#absolute的containing-block-容器块-计算方式跟正常流有什么不同？\" class=\"headerlink\" title=\"absolute的containing block(容器块)计算方式跟正常流有什么不同？\"></a>absolute的containing block(容器块)计算方式跟正常流有什么不同？</h3><p>无论属于哪种，都要先找到其祖先元素中最近的 position 值不为 static 的元素，然后再判断：<br>1、若此元素为 inline 元素，则 containing block 为能够包含这个元素生成的第一个和最后一个 inline box 的 padding box (除 margin, border 外的区域) 的最小矩形；<br>2、否则,则由这个祖先元素的 padding box 构成。<br>如果都找不到，则为 initial containing block。</p>\n<p>补充：</p>\n<ol>\n<li>static(默认的)/relative：简单说就是它的父元素的内容框（即去掉padding的部分）</li>\n<li>absolute: 向上找最近的定位为absolute/relative的元素</li>\n<li>fixed: 它的containing block一律为根元素(html/body)，根元素也是initial containing block</li>\n</ol>\n<h3 id=\"CSS里的visibility属性有个collapse属性值是干嘛用的？在不同浏览器下以后什么区别？\"><a href=\"#CSS里的visibility属性有个collapse属性值是干嘛用的？在不同浏览器下以后什么区别？\" class=\"headerlink\" title=\"CSS里的visibility属性有个collapse属性值是干嘛用的？在不同浏览器下以后什么区别？\"></a>CSS里的visibility属性有个collapse属性值是干嘛用的？在不同浏览器下以后什么区别？</h3><p>position跟display、margin collapse、overflow、float这些特性相互叠加后会怎么样？</p>\n<p>对BFC规范(块级格式化上下文：block formatting context)的理解？</p>\n<p>（W3C CSS 2.1 规范中的一个概念,它是一个独立容器，决定了元素如何对其内容进行定位,以及与其他元素的关系和相互作用。）<br> 一个页面是由很多个 Box 组成的,元素的类型和 display 属性,决定了这个 Box 的类型。<br> 不同类型的 Box,会参与不同的 Formatting Context（决定如何渲染文档的容器）,因此Box内的元素会以不同的方式渲染,也就是说BFC内部的元素和外部的元素不会互相影响。<br>css定义的权重</p>\n<p>以下是权重的规则：标签的权重为1，class的权重为10，id的权重为100，以下例子是演示各种定义的权重值：</p>\n<p>/<em>权重为1</em>/<br>div{<br>}<br>/<em>权重为10</em>/<br>.class1{<br>}<br>/<em>权重为100</em>/<br>#id1{<br>}<br>/<em>权重为100+1=101</em>/<br>#id1 div{<br>}<br>/<em>权重为10+1=11</em>/<br>.class1 div{<br>}<br>/<em>权重为10+10+1=21</em>/<br>.class1 .class2 div{<br>}</p>\n<p>如果权重相同，则最后定义的样式会起作用，但是应该避免这种情况出现<br>请解释一下为什么会出现浮动和什么时候需要清除浮动？清除浮动的方式</p>\n<p>移动端的布局用过媒体查询吗？</p>\n<p>使用 CSS 预处理器吗？喜欢那个？</p>\n<p>SASS (SASS、LESS没有本质区别，只因为团队前端都是用的SASS)<br>CSS优化、提高性能的方法有哪些？</p>\n<p>浏览器是怎样解析CSS选择器的？</p>\n<p>在网页中的应该使用奇数还是偶数的字体？为什么呢？</p>\n<p>margin和padding分别适合什么场景使用？</p>\n<p>抽离样式模块怎么写，说出思路，有无实践经验？[阿里航旅的面试题]</p>\n<p>元素竖向的百分比设定是相对于容器的高度吗？</p>\n<h3 id=\"全屏滚动的原理是什么？用到了CSS的那些属性？\"><a href=\"#全屏滚动的原理是什么？用到了CSS的那些属性？\" class=\"headerlink\" title=\"全屏滚动的原理是什么？用到了CSS的那些属性？\"></a>全屏滚动的原理是什么？用到了CSS的那些属性？</h3><h3 id=\"什么是响应式设计？响应式设计的基本原理是什么？如何兼容低版本的IE？\"><a href=\"#什么是响应式设计？响应式设计的基本原理是什么？如何兼容低版本的IE？\" class=\"headerlink\" title=\"什么是响应式设计？响应式设计的基本原理是什么？如何兼容低版本的IE？\"></a>什么是响应式设计？响应式设计的基本原理是什么？如何兼容低版本的IE？</h3><p>视差滚动效果，如何给每页做不同的动画？（回到顶部，向下滑动要再次出现，和只出现一次分别怎么做？）</p>\n<p>::before 和 :after中双冒号和单冒号 有什么区别？解释一下这2个伪元素的作用。</p>\n<p>如何修改chrome记住密码后自动填充表单的黄色背景 ？</p>\n<p>你对line-height是如何理解的？</p>\n<p>设置元素浮动后，该元素的display值是多少？（自动变成display:block）</p>\n<p>怎么让Chrome支持小于12px 的文字？</p>\n<p>让页面里的字体变清晰，变细用CSS怎么做？（-webkit-font-smoothing: antialiased;）</p>\n<p>font-style属性可以让它赋值为“oblique” oblique是什么意思？</p>\n<p>position:fixed;在android下无效怎么处理？</p>\n<p>如果需要手动写动画，你认为最小时间间隔是多久，为什么？（阿里）</p>\n<p>多数显示器默认频率是60Hz，即1秒刷新60次，所以理论上最小间隔为1/60＊1000ms ＝ 16.7ms<br>display:inline-block 什么时候会显示间隙？(携程)</p>\n<p>移除空格、使用margin负值、使用font-size:0、letter-spacing、word-spacing<br>overflow: scroll时不能平滑滚动的问题怎么处理？</p>\n<p>有一个高度自适应的div，里面有两个div，一个高度100px，希望另一个填满剩下的高度。</p>\n<p>png、jpg、gif 这些图片格式解释一下，分别什么时候用。有没有了解过webp？</p>\n<h3 id=\"什么是Cookie-隔离？（或者说：请求资源的时候不要让它带cookie怎么做）\"><a href=\"#什么是Cookie-隔离？（或者说：请求资源的时候不要让它带cookie怎么做）\" class=\"headerlink\" title=\"什么是Cookie 隔离？（或者说：请求资源的时候不要让它带cookie怎么做）\"></a>什么是Cookie 隔离？（或者说：请求资源的时候不要让它带cookie怎么做）</h3><p>如果静态文件都放在主域名下，那静态文件请求的时候都带有的cookie的数据提交给server的，非常浪费流量，<br>所以不如隔离开。</p>\n<p>因为cookie有域的限制，因此不能跨域提交请求，故使用非主要域名的时候，请求头中就不会带有cookie数据，<br>这样可以降低请求头的大小，降低请求时间，从而达到降低整体请求延时的目的。</p>\n<p>同时这种方式不会将cookie传入Web Server，也减少了Web Server对cookie的处理分析环节，<br>提高了webserver的http请求的解析速度。<br>style标签写在body后与body前有什么区别？</p>\n<h3 id=\"什么是CSS-预处理器-后处理器？\"><a href=\"#什么是CSS-预处理器-后处理器？\" class=\"headerlink\" title=\"什么是CSS 预处理器 / 后处理器？\"></a>什么是CSS 预处理器 / 后处理器？</h3><ul>\n<li><p>预处理器例如：LESS、Sass、Stylus，用来预编译Sass或less，增强了css代码的复用性，<br>还有层级、mixin、变量、循环、函数等，具有很方便的UI组件模块化开发能力，极大的提高工作效率。</p>\n</li>\n<li><p>后处理器例如：PostCSS，通常被视为在完成的样式表中根据CSS规范处理CSS，让其更有效；目前最常做的<br>是给CSS属性添加浏览器私有前缀，实现跨浏览器兼容性的问题。<br>JavaScript</p>\n</li>\n</ul>\n<h3 id=\"介绍js的基本数据类型\"><a href=\"#介绍js的基本数据类型\" class=\"headerlink\" title=\"介绍js的基本数据类型\"></a>介绍js的基本数据类型</h3><p> Undefined、Null、Boolean、Number、String、Symbol(new in ECMAScript 2015)</p>\n<h3 id=\"介绍js有哪些内置对象？\"><a href=\"#介绍js有哪些内置对象？\" class=\"headerlink\" title=\"介绍js有哪些内置对象？\"></a>介绍js有哪些内置对象？</h3><p>Object 是 JavaScript 中所有对象的父对象</p>\n<p>数据封装类对象：Object、Array、Boolean、Number 和 String</p>\n<p>其他对象：Function、Arguments、Math、Date、RegExp、Error</p>\n<h3 id=\"说几条写JavaScript的基本规范？\"><a href=\"#说几条写JavaScript的基本规范？\" class=\"headerlink\" title=\"说几条写JavaScript的基本规范？\"></a>说几条写JavaScript的基本规范？</h3><p>1.不要在同一行声明多个变量。<br>2.请使用 ===/!==来比较true/false或者数值<br>3.使用对象字面量替代new Array这种形式<br>4.不要使用全局函数。<br>5.Switch语句必须带有default分支<br>6.函数不应该有时候有返回值，有时候没有返回值。<br>7.For循环必须使用大括号<br>8.If语句必须使用大括号<br>9.for-in循环中的变量 应该使用var关键字明确限定作用域，从而避免作用域污染。</p>\n<h3 id=\"JavaScript原型，原型链-有什么特点？\"><a href=\"#JavaScript原型，原型链-有什么特点？\" class=\"headerlink\" title=\"JavaScript原型，原型链 ? 有什么特点？\"></a>JavaScript原型，原型链 ? 有什么特点？</h3><p>每个对象都会在其内部初始化一个属性，就是prototype(原型)，当我们访问一个对象的属性时，<br>如果这个对象内部不存在这个属性，那么他就会去prototype里找这个属性，这个prototype又会有自己的prototype，<br>于是就这样一直找下去，也就是我们平时所说的原型链的概念。<br>关系：instance.constructor.prototype = instance.<strong>proto</strong></p>\n<p>特点：<br>JavaScript对象是通过引用来传递的，我们创建的每个新对象实体中并没有一份属于自己的原型副本。当我们修改原型时，与之相关的对象也会继承这一改变。</p>\n<p> 当我们需要一个属性的时，Javascript引擎会先看当前对象中是否有这个属性， 如果没有的话，<br> 就会查找他的Prototype对象是否有这个属性，如此递推下去，一直检索到 Object 内建对象。<br>    function Func(){}<br>    Func.prototype.name = “Sean”;<br>    Func.prototype.getInfo = function() {<br>      return this.name;<br>    }<br>    var person = new Func();//现在可以参考var person = Object.create(oldObject);<br>    console.log(person.getInfo());//它拥有了Func的属性和方法<br>    //“Sean”<br>    console.log(Func.prototype);<br>    // Func { name=”Sean”, getInfo=function()}</p>\n<h3 id=\"JavaScript有几种类型的值？，你能画一下他们的内存图吗？\"><a href=\"#JavaScript有几种类型的值？，你能画一下他们的内存图吗？\" class=\"headerlink\" title=\"JavaScript有几种类型的值？，你能画一下他们的内存图吗？\"></a>JavaScript有几种类型的值？，你能画一下他们的内存图吗？</h3><p>栈：原始数据类型（Undefined，Null，Boolean，Number、String）<br>堆：引用数据类型（对象、数组和函数）</p>\n<p>两种类型的区别是：存储位置不同；<br>原始数据类型直接存储在栈(stack)中的简单数据段，占据空间小、大小固定，属于被频繁使用数据，所以放入栈中存储；<br>引用数据类型存储在堆(heap)中的对象,占据空间大、大小不固定,如果存储在栈中，将会影响程序运行的性能；引用数据类型在栈中存储了指针，该指针指向堆中该实体的起始地址。当解释器寻找引用值时，会首先检索其<br>在栈中的地址，取得地址后从堆中获得实体<br>Stated Clearly Image</p>\n<h3 id=\"Javascript如何实现继承？\"><a href=\"#Javascript如何实现继承？\" class=\"headerlink\" title=\"Javascript如何实现继承？\"></a>Javascript如何实现继承？</h3><p>1、构造继承<br>2、原型继承<br>3、实例继承<br>4、拷贝继承</p>\n<p>原型prototype机制或apply和call方法去实现较简单，建议使用构造函数与原型混合方式。<br>        function Parent(){<br>            this.name = ‘wang’;<br>        }</p>\n<pre><code>function Child(){\n    this.age = 28;\n}\nChild.prototype = new Parent();//继承了Parent，通过原型\n\nvar demo = new Child();\nalert(demo.age);\nalert(demo.name);//得到被继承的属性</code></pre><h3 id=\"JavaScript继承的几种实现方式？\"><a href=\"#JavaScript继承的几种实现方式？\" class=\"headerlink\" title=\"JavaScript继承的几种实现方式？\"></a>JavaScript继承的几种实现方式？</h3><p>参考：构造函数的继承，非构造函数的继承；</p>\n<h3 id=\"javascript创建对象的几种方式？\"><a href=\"#javascript创建对象的几种方式？\" class=\"headerlink\" title=\"javascript创建对象的几种方式？\"></a>javascript创建对象的几种方式？</h3><p>javascript创建对象简单的说,无非就是使用内置对象或各种自定义对象，当然还可以用JSON；但写法有很多种，也能混合使用。</p>\n<ol>\n<li>对象字面量的方式  </li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">person=&#123;</span><br><span class=\"line\">    firstname:<span class=\"string\">\"Mark\"</span>,</span><br><span class=\"line\">    lastname:<span class=\"string\">\"Yun\"</span>,</span><br><span class=\"line\">    age:<span class=\"number\">25</span>,</span><br><span class=\"line\">    eyecolor:<span class=\"string\">\"black\"</span></span><br><span class=\"line\">    &#125;;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li><p>用function来模拟无参的构造函数</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> person=<span class=\"keyword\">new</span> Person();<span class=\"comment\">//定义一个function，如果使用new\"实例化\",该function可以看作是一个Class</span></span><br><span class=\"line\">person.name=<span class=\"string\">\"Mark\"</span>;</span><br><span class=\"line\">person.age=<span class=\"string\">\"25\"</span>;</span><br><span class=\"line\">person.work=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">alert(person.name+<span class=\"string\">\" hello...\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">person.work();</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>用function来模拟参构造函数来实现（用this关键字定义构造的上下文属性）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Pet</span>(<span class=\"params\">name,age,hobby</span>)</span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">this</span>.name=name;<span class=\"comment\">//this作用域：当前对象</span></span><br><span class=\"line\">   <span class=\"keyword\">this</span>.age=age;</span><br><span class=\"line\">   <span class=\"keyword\">this</span>.hobby=hobby;</span><br><span class=\"line\">   <span class=\"keyword\">this</span>.eat=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">      alert(<span class=\"string\">\"我叫\"</span>+<span class=\"keyword\">this</span>.name+<span class=\"string\">\",我喜欢\"</span>+<span class=\"keyword\">this</span>.hobby+<span class=\"string\">\",是个程序员\"</span>);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> maidou =<span class=\"keyword\">new</span> Pet(<span class=\"string\">\"麦兜\"</span>,<span class=\"number\">25</span>,<span class=\"string\">\"coding\"</span>);<span class=\"comment\">//实例化、创建对象</span></span><br><span class=\"line\">maidou.eat();<span class=\"comment\">//调用eat方法</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>用工厂方式来创建（内置对象）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> wcDog =<span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</span><br><span class=\"line\">wcDog.name=<span class=\"string\">\"旺财\"</span>;</span><br><span class=\"line\">wcDog.age=<span class=\"number\">3</span>;</span><br><span class=\"line\">wcDog.work=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  alert(<span class=\"string\">\"我是\"</span>+wcDog.name+<span class=\"string\">\",汪汪汪......\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">wcDog.work();</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>用原型方式来创建</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Dog</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> Dog.prototype.name=<span class=\"string\">\"旺财\"</span>;</span><br><span class=\"line\"> Dog.prototype.eat=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"> alert(<span class=\"keyword\">this</span>.name+<span class=\"string\">\"是个吃货\"</span>);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"keyword\">var</span> wangcai =<span class=\"keyword\">new</span> Dog();</span><br><span class=\"line\"> wangcai.eat();</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>用混合方式来创建</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Car</span>(<span class=\"params\">name,price</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.name=name;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.price=price; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> Car.prototype.sell=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">   alert(<span class=\"string\">\"我是\"</span>+<span class=\"keyword\">this</span>.name+<span class=\"string\">\"，我现在卖\"</span>+<span class=\"keyword\">this</span>.price+<span class=\"string\">\"万元\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> camry =<span class=\"keyword\">new</span> Car(<span class=\"string\">\"凯美瑞\"</span>,<span class=\"number\">27</span>);</span><br><span class=\"line\">camry.sell();</span><br></pre></td></tr></table></figure>\n<h3 id=\"Javascript作用链域\"><a href=\"#Javascript作用链域\" class=\"headerlink\" title=\"Javascript作用链域?\"></a>Javascript作用链域?</h3></li>\n</ol>\n<p>全局函数无法查看局部函数的内部细节，但局部函数可以查看其上层的函数细节，直至全局细节。<br>当需要从局部函数查找某一属性或方法时，如果当前作用域没有找到，就会上溯到上层作用域查找，<br>直至全局函数，这种组织形式就是作用域链。<br>谈谈This对象的理解。</p>\n<p>this总是指向函数的直接调用者（而非间接调用者）；<br>如果有new关键字，this指向new出来的那个对象；<br>在事件中，this指向触发这个事件的对象，特殊的是，IE中的attachEvent中的this总是指向全局对象Window；</p>\n<h3 id=\"eval是做什么的？\"><a href=\"#eval是做什么的？\" class=\"headerlink\" title=\"eval是做什么的？\"></a>eval是做什么的？</h3><p>它的功能是把对应的字符串解析成JS代码并运行；<br>应该避免使用eval，不安全，非常耗性能（2次，一次解析成js语句，一次执行）。<br>由JSON字符串转换为JSON对象的时候可以用eval，var obj =eval(‘(‘+ str +’)’);</p>\n<h3 id=\"什么是window对象-什么是document对象\"><a href=\"#什么是window对象-什么是document对象\" class=\"headerlink\" title=\"什么是window对象? 什么是document对象?\"></a>什么是window对象? 什么是document对象?</h3><h3 id=\"null，undefined-的区别？\"><a href=\"#null，undefined-的区别？\" class=\"headerlink\" title=\"null，undefined 的区别？\"></a>null，undefined 的区别？</h3><p>null        表示一个对象被定义了，值为“空值”；<br>undefined   表示不存在这个值。</p>\n<p>typeof undefined<br>    //“undefined”<br>    undefined :是一个表示”无”的原始值或者说表示”缺少值”，就是此处应该有一个值，但是还没有定义。当尝试读取时会返回 undefined；<br>    例如变量被声明了，但没有赋值时，就等于undefined</p>\n<p>typeof null<br>    //“object”<br>    null : 是一个对象(空对象, 没有任何属性和方法)；<br>    例如作为函数的参数，表示该函数的参数不是对象；</p>\n<p>注意：<br>    在验证null时，一定要使用　=== ，因为 == 无法分别 null 和　undefined</p>\n<p>再来一个例子：</p>\n<pre><code>null\nQ：有张三这个人么？\nA：有！\nQ：张三有房子么？\nA：没有！\n\nundefined\nQ：有张三这个人么？\nA：没有！</code></pre><p>参考阅读：undefined与null的区别</p>\n<h3 id=\"写一个通用的事件侦听器函数。\"><a href=\"#写一个通用的事件侦听器函数。\" class=\"headerlink\" title=\"写一个通用的事件侦听器函数。\"></a>写一个通用的事件侦听器函数。</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// event(事件)工具集，来源：github.com/markyun</span></span><br><span class=\"line\">markyun.Event = &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 页面加载完成后</span></span><br><span class=\"line\">    readyEvent : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">fn</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (fn==<span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            fn=<span class=\"built_in\">document</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> oldonload = <span class=\"built_in\">window</span>.onload;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"built_in\">window</span>.onload != <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">window</span>.onload = fn;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">window</span>.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                oldonload();</span><br><span class=\"line\">                fn();</span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// 视能力分别使用dom0||dom2||IE方式 来绑定事件</span></span><br><span class=\"line\">    <span class=\"comment\">// 参数： 操作的元素,事件名称 ,事件处理程序</span></span><br><span class=\"line\">    addEvent : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">element, type, handler</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (element.addEventListener) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//事件类型、需要执行的函数、是否捕捉</span></span><br><span class=\"line\">            element.addEventListener(type, handler, <span class=\"literal\">false</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (element.attachEvent) &#123;</span><br><span class=\"line\">            element.attachEvent(<span class=\"string\">'on'</span> + type, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                handler.call(element);</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            element[<span class=\"string\">'on'</span> + type] = handler;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// 移除事件</span></span><br><span class=\"line\">    removeEvent : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">element, type, handler</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (element.removeEventListener) &#123;</span><br><span class=\"line\">            element.removeEventListener(type, handler, <span class=\"literal\">false</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (element.datachEvent) &#123;</span><br><span class=\"line\">            element.detachEvent(<span class=\"string\">'on'</span> + type, handler);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            element[<span class=\"string\">'on'</span> + type] = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// 阻止事件 (主要是事件冒泡，因为IE不支持事件捕获)</span></span><br><span class=\"line\">    stopPropagation : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ev</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ev.stopPropagation) &#123;</span><br><span class=\"line\">            ev.stopPropagation();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            ev.cancelBubble = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// 取消事件的默认行为</span></span><br><span class=\"line\">    preventDefault : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (event.preventDefault) &#123;</span><br><span class=\"line\">            event.preventDefault();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            event.returnValue = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// 获取事件目标</span></span><br><span class=\"line\">    getTarget : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> event.target || event.srcElement;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// 获取event对象的引用，取到事件的所有信息，确保随时能使用event；</span></span><br><span class=\"line\">    getEvent : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> ev = e || <span class=\"built_in\">window</span>.event;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!ev) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> c = <span class=\"keyword\">this</span>.getEvent.caller;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (c) &#123;</span><br><span class=\"line\">                ev = c.arguments[<span class=\"number\">0</span>];</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (ev &amp;&amp; Event == ev.constructor) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                c = c.caller;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ev;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>[“1”, “2”, “3”].map(parseInt) 答案是多少？</p>\n<p> [1, NaN, NaN] 因为 parseInt 需要两个参数 (val, radix)，<br> 其中 radix 表示解析时用的基数。<br> map 传了 3 个 (element, index, array)，对应的 radix 不合法导致解析失败。</p>\n<h3 id=\"事件是？IE与火狐的事件机制有什么区别？-如何阻止冒泡？\"><a href=\"#事件是？IE与火狐的事件机制有什么区别？-如何阻止冒泡？\" class=\"headerlink\" title=\"事件是？IE与火狐的事件机制有什么区别？ 如何阻止冒泡？\"></a>事件是？IE与火狐的事件机制有什么区别？ 如何阻止冒泡？</h3><ol>\n<li>我们在网页中的某个操作（有的操作对应多个事件）。例如：当我们点击一个按钮就会产生一个事件。是可以被 JavaScript 侦测到的行为。</li>\n<li>事件处理机制：IE是事件冒泡、Firefox同时支持两种事件模型，也就是：捕获型事件和冒泡型事件；</li>\n<li>ev.stopPropagation();（旧ie的方法 ev.cancelBubble = true;）</li>\n</ol>\n<h3 id=\"什么是闭包（closure），为什么要用它？\"><a href=\"#什么是闭包（closure），为什么要用它？\" class=\"headerlink\" title=\"什么是闭包（closure），为什么要用它？\"></a>什么是闭包（closure），为什么要用它？</h3><p>闭包是指有权访问另一个函数作用域中变量的函数，创建闭包的最常见的方式就是在一个函数内创建另一个函数，通过另一个函数访问这个函数的局部变量,利用闭包可以突破作用链域，将函数内部的变量和方法传递到外部。</p>\n<p>闭包的特性：</p>\n<p>1.函数内再嵌套函数<br>2.内部函数可以引用外层的参数和变量<br>3.参数和变量不会被垃圾回收机制回收</p>\n<p>//li节点的onclick事件都能正确的弹出当前被点击的li索引<br> <ul id=\"testUL\"><br>    <li> index = 0</li><br>    <li> index = 1</li><br>    <li> index = 2</li><br>    <li> index = 3</li></p>\n</ul>\n<script type=\"text/javascript\">\n    var nodes = document.getElementsByTagName(\"li\");\n    for(i = 0;i<nodes.length;i+= 1){\n        nodes[i].onclick = function(){\n            console.log(i+1);//不用闭包的话，值每次都是4\n        }(i);\n    }\n</script>\n\n\n<p>执行say667()后,say667()闭包内部变量会存在,而闭包内部函数的内部变量不会存在<br>使得Javascript的垃圾回收机制GC不会收回say667()所占用的资源<br>因为say667()的内部函数的执行需要依赖say667()中的变量<br>这是对闭包作用的非常直白的描述</p>\n<p>  function say667() {<br>    // Local variable that ends up within closure<br>    var num = 666;<br>    var sayAlert = function() {<br>        alert(num);<br>    }<br>    num++;<br>    return sayAlert;<br>}</p>\n<p> var sayAlert = say667();<br> sayAlert()//执行结果应该弹出的667<br>javascript 代码中的”use strict”;是什么意思 ? 使用它区别是什么？</p>\n<p>use strict是一种ECMAscript 5 添加的（严格）运行模式,这种模式使得 Javascript 在更严格的条件下运行,</p>\n<p>使JS编码更加规范化的模式,消除Javascript语法的一些不合理、不严谨之处，减少一些怪异行为。<br>默认支持的糟糕特性都会被禁用，比如不能用with，也不能在意外的情况下给全局变量赋值;<br>全局变量的显示声明,函数必须声明在顶层，不允许在非函数代码块内声明函数,arguments.callee也不允许使用；<br>消除代码运行的一些不安全之处，保证代码运行的安全,限制函数中的arguments修改，严格模式下的eval函数的行为和非严格模式的也不相同;</p>\n<p>提高编译器效率，增加运行速度；<br>为未来新版本的Javascript标准化做铺垫。<br>如何判断一个对象是否属于某个类？</p>\n<p>  使用instanceof （待完善）<br>   if(a instanceof Person){<br>       alert(‘yes’);<br>   }<br>new操作符具体干了什么呢?</p>\n<pre><code>1、创建一个空对象，并且 this 变量引用该对象，同时还继承了该函数的原型。\n2、属性和方法被加入到 this 引用的对象中。\n3、新创建的对象由 this 所引用，并且最后隐式的返回 this 。</code></pre><p>var obj  = {};<br>obj.<strong>proto</strong> = Base.prototype;<br>Base.call(obj);<br>用原生JavaScript的实现过什么功能吗？</p>\n<h3 id=\"Javascript中，有一个函数，执行时对象查找时，永远不会去查找原型，这个函数是？\"><a href=\"#Javascript中，有一个函数，执行时对象查找时，永远不会去查找原型，这个函数是？\" class=\"headerlink\" title=\"Javascript中，有一个函数，执行时对象查找时，永远不会去查找原型，这个函数是？\"></a>Javascript中，有一个函数，执行时对象查找时，永远不会去查找原型，这个函数是？</h3><p>hasOwnProperty</p>\n<p>javaScript中hasOwnProperty函数方法是返回一个布尔值，指出一个对象是否具有指定名称的属性。此方法无法检查该对象的原型链中是否具有该属性；该属性必须是对象本身的一个成员。<br>使用方法：<br>object.hasOwnProperty(proName)<br>其中参数object是必选项。一个对象的实例。<br>proName是必选项。一个属性名称的字符串值。</p>\n<p>如果 object 具有指定名称的属性，那么JavaScript中hasOwnProperty函数方法返回 true，反之则返回 false。</p>\n<h3 id=\"JSON-的了解？\"><a href=\"#JSON-的了解？\" class=\"headerlink\" title=\"JSON 的了解？\"></a>JSON 的了解？</h3><p>JSON(JavaScript Object Notation) 是一种轻量级的数据交换格式。<br>它是基于JavaScript的一个子集。数据格式简单, 易于读写, 占用带宽小<br>如：{“age”:”12”, “name”:”back”}</p>\n<p>JSON字符串转换为JSON对象:<br>var obj =eval(‘(‘+ str +’)’);<br>var obj = str.parseJSON();<br>var obj = JSON.parse(str);</p>\n<p>JSON对象转换为JSON字符串：<br>var last=obj.toJSONString();<br>var last=JSON.stringify(obj);<br>[].forEach.call($$(“*”),function(a){a.style.outline=”1px solid #”+(~~(Math.random()*(1&lt;&lt;24))).toString(16)}) 能解释一下这段代码的意思吗？</p>\n<h3 id=\"js延迟加载的方式有哪些？\"><a href=\"#js延迟加载的方式有哪些？\" class=\"headerlink\" title=\"js延迟加载的方式有哪些？\"></a>js延迟加载的方式有哪些？</h3><p>defer和async、动态创建DOM方式（用得最多）、按需异步载入js<br>Ajax 是什么? 如何创建一个Ajax？</p>\n<p>ajax的全称：Asynchronous Javascript And XML。<br>异步传输+js+xml。<br>所谓异步，在这里简单地解释就是：向服务器发送请求的时候，我们不必等待结果，而是可以同时做其他的事情，等到有了结果它自己会根据设定进行后续操作，与此同时，页面是不会发生整页刷新的，提高了用户体验。</p>\n<p>(1)创建XMLHttpRequest对象,也就是创建一个异步调用对象<br>(2)创建一个新的HTTP请求,并指定该HTTP请求的方法、URL及验证信息<br>(3)设置响应HTTP请求状态变化的函数<br>(4)发送HTTP请求<br>(5)获取异步调用返回的数据<br>(6)使用JavaScript和DOM实现局部刷新<br>同步和异步的区别?</p>\n<p>同步的概念应该是来自于OS中关于同步的概念:不同进程为协同完成某项工作而在先后次序上调整(通过阻塞,唤醒等方式).同步强调的是顺序性.谁先谁后.异步则不存在这种顺序性.</p>\n<p>同步：浏览器访问服务器请求，用户看得到页面刷新，重新发请求,等请求完，页面刷新，新内容出现，用户看到新内容,进行下一步操作。</p>\n<p>异步：浏览器访问服务器请求，用户正常操作，浏览器后端进行请求。等请求完，页面不刷新，新内容也会出现，用户看到新内容。</p>\n<h3 id=\"如何解决跨域问题\"><a href=\"#如何解决跨域问题\" class=\"headerlink\" title=\"如何解决跨域问题?\"></a>如何解决跨域问题?</h3><p>jsonp、 iframe、window.name、window.postMessage、服务器上设置代理页面<br>页面编码和被请求的资源编码如果不一致如何处理？</p>\n<h3 id=\"模块化开发怎么做？\"><a href=\"#模块化开发怎么做？\" class=\"headerlink\" title=\"模块化开发怎么做？\"></a>模块化开发怎么做？</h3><p>立即执行函数,不暴露私有成员</p>\n<pre><code>var module1 = (function(){\n　　　　var _count = 0;\n　　　　var m1 = function(){\n　　　　　　//...\n　　　　};\n　　　　var m2 = function(){\n　　　　　　//...\n　　　　};\n　　　　return {\n　　　　　　m1 : m1,\n　　　　　　m2 : m2\n　　　　};\n　　})();</code></pre><p>（待完善）</p>\n<h3 id=\"AMD（Modules-Asynchronous-Definition）、CMD（Common-Module-Definition）规范区别？\"><a href=\"#AMD（Modules-Asynchronous-Definition）、CMD（Common-Module-Definition）规范区别？\" class=\"headerlink\" title=\"AMD（Modules/Asynchronous-Definition）、CMD（Common Module Definition）规范区别？\"></a>AMD（Modules/Asynchronous-Definition）、CMD（Common Module Definition）规范区别？</h3><p>AMD 规范在这里：<a href=\"https://github.com/amdjs/amdjs-api/wiki/AMD\" target=\"_blank\" rel=\"noopener\">https://github.com/amdjs/amdjs-api/wiki/AMD</a></p>\n<p>CMD 规范在这里：<a href=\"https://github.com/seajs/seajs/issues/242\" target=\"_blank\" rel=\"noopener\">https://github.com/seajs/seajs/issues/242</a><br>Asynchronous Module Definition，异步模块定义，所有的模块将被异步加载，模块加载不影响后面语句运行。所有依赖某些模块的语句均放置在回调函数中。</p>\n<p> 区别：</p>\n<pre><code>1. 对于依赖的模块，AMD 是提前执行，CMD 是延迟执行。不过 RequireJS 从 2.0 开始，也改成可以延迟执行（根据写法不同，处理方式不同）。CMD 推崇 as lazy as possible.\n2. CMD 推崇依赖就近，AMD 推崇依赖前置。看代码：</code></pre><p>// CMD<br>define(function(require, exports, module) {<br>    var a = require(‘./a’)<br>    a.doSomething()<br>    // 此处略去 100 行<br>    var b = require(‘./b’) // 依赖可以就近书写<br>    b.doSomething()<br>    // …<br>})</p>\n<p>// AMD 默认推荐<br>define([‘./a’, ‘./b’], function(a, b) { // 依赖必须一开始就写好<br>    a.doSomething()<br>    // 此处略去 100 行<br>    b.doSomething()<br>    // …<br>})</p>\n<h3 id=\"requireJS的核心原理是什么？（如何动态加载的？如何避免多次加载的？如何-缓存的？）\"><a href=\"#requireJS的核心原理是什么？（如何动态加载的？如何避免多次加载的？如何-缓存的？）\" class=\"headerlink\" title=\"requireJS的核心原理是什么？（如何动态加载的？如何避免多次加载的？如何 缓存的？）\"></a>requireJS的核心原理是什么？（如何动态加载的？如何避免多次加载的？如何 缓存的？）</h3><p>谈一谈你对ECMAScript6的了解？</p>\n<p>ECMAScript6 怎么写class么，为什么会出现class这种东西?</p>\n<p>异步加载JS的方式有哪些？</p>\n<p>  (1) defer，只支持IE</p>\n<p>  (2) async：</p>\n<p>  (3) 创建script，插入到DOM中，加载完毕后callBack<br>documen.write和 innerHTML的区别</p>\n<p>document.write只能重绘整个页面</p>\n<p>innerHTML可以重绘页面的一部分<br>DOM操作——怎样添加、移除、移动、复制、创建和查找节点?</p>\n<p>（1）创建新节点<br>  createDocumentFragment()    //创建一个DOM片段<br>  createElement()   //创建一个具体的元素<br>  createTextNode()   //创建一个文本节点<br>（2）添加、移除、替换、插入<br>  appendChild()<br>  removeChild()<br>  replaceChild()<br>  insertBefore() //在已有的子节点前插入一个新的子节点<br>（3）查找<br>  getElementsByTagName()    //通过标签名称<br>  getElementsByName()    //通过元素的Name属性的值(IE容错能力较强，会得到一个数组，其中包括id等于name值的)<br>  getElementById()    //通过元素Id，唯一性<br>.call() 和 .apply() 的区别？</p>\n<p>  例子中用 add 来替换 sub，add.call(sub,3,1) == add(3,1) ，所以运行结果为：alert(4);</p>\n<p>  注意：js 中的函数其实是对象，函数名是对 Function 对象的引用。</p>\n<pre><code>function add(a,b)\n{\n    alert(a+b);\n}\n\nfunction sub(a,b)\n{\n    alert(a-b);\n}\n\nadd.call(sub,3,1);</code></pre><p>数组和对象有哪些原生方法，列举一下？</p>\n<p>JS 怎么实现一个类。怎么实例化这个类</p>\n<p>JavaScript中的作用域与变量声明提升？</p>\n<h3 id=\"如何编写高性能的Javascript？\"><a href=\"#如何编写高性能的Javascript？\" class=\"headerlink\" title=\"如何编写高性能的Javascript？\"></a>如何编写高性能的Javascript？</h3><h3 id=\"那些操作会造成内存泄漏？\"><a href=\"#那些操作会造成内存泄漏？\" class=\"headerlink\" title=\"那些操作会造成内存泄漏？\"></a>那些操作会造成内存泄漏？</h3><h3 id=\"JQuery的源码看过吗？能不能简单概况一下它的实现原理？\"><a href=\"#JQuery的源码看过吗？能不能简单概况一下它的实现原理？\" class=\"headerlink\" title=\"JQuery的源码看过吗？能不能简单概况一下它的实现原理？\"></a>JQuery的源码看过吗？能不能简单概况一下它的实现原理？</h3><p>jQuery.fn的init方法返回的this指的是什么对象？为什么要返回this？</p>\n<p>jquery中如何将数组转化为json字符串，然后再转化回来？</p>\n<p>jQuery 的属性拷贝(extend)的实现原理是什么，如何实现深拷贝？</p>\n<p>jquery.extend 与 jquery.fn.extend的区别？</p>\n<p>jQuery 的队列是如何实现的？队列可以用在哪些地方？</p>\n<p>谈一下Jquery中的bind(),live(),delegate(),on()的区别？</p>\n<p>JQuery一个对象可以同时绑定多个事件，这是如何实现的？</p>\n<p>是否知道自定义事件。jQuery里的fire函数是什么意思，什么时候用？</p>\n<p>jQuery 是通过哪个方法和 Sizzle 选择器结合的？（jQuery.fn.find()进入Sizzle）</p>\n<p>针对 jQuery性能的优化方法？</p>\n<p>Jquery与jQuery UI 有啥区别？</p>\n<p>*jQuery是一个js库，主要提供的功能是选择器，属性修改和事件绑定等等。</p>\n<p>*jQuery UI则是在jQuery的基础上，利用jQuery的扩展性，设计的插件。<br> 提供了一些常用的界面元素，诸如对话框、拖动行为、改变大小行为等等<br>JQuery的源码看过吗？能不能简单说一下它的实现原理？</p>\n<p>jquery 中如何将数组转化为json字符串，然后再转化回来？</p>\n<p>jQuery中没有提供这个功能，所以你需要先编写两个jQuery的扩展：</p>\n<pre><code>$.fn.stringifyArray = function(array) {\n    return JSON.stringify(array)\n}\n\n$.fn.parseArray = function(array) {\n    return JSON.parse(array)\n}\n\n然后调用：\n$(&quot;&quot;).stringifyArray(array)</code></pre><p>jQuery和Zepto的区别？各自的使用场景？</p>\n<p>针对 jQuery 的优化方法？</p>\n<p>*基于Class的选择性的性能相对于Id选择器开销很大，因为需遍历所有DOM元素。</p>\n<p>*频繁操作的DOM，先缓存起来再操作。用Jquery的链式调用更好。<br> 比如：var str=$(“a”).attr(“href”);</p>\n<p>*for (var i = size; i &lt; arr.length; i++) {}<br> for 循环每一次循环都查找了数组 (arr) 的.length 属性，在开始循环的时候设置一个变量来存储这个数字，可以让循环跑得更快：<br> for (var i = size, length = arr.length; i &lt; length; i++) {}<br>Zepto的点透问题如何解决？</p>\n<p>jQueryUI如何自定义组件?</p>\n<p>需求：实现一个页面操作不会整页刷新的网站，并且能在浏览器前进、后退时正确响应。给出你的技术实现方案？</p>\n<p>如何判断当前脚本运行在浏览器还是node环境中？（阿里）</p>\n<p>通过判断Global对象是否为window，如果不为window，当前脚本没有运行在浏览器中<br>移动端最小触控区域是多大？</p>\n<p>jQuery 的 slideUp动画 ，如果目标元素是被外部事件驱动, 当鼠标快速地连续触发外部元素事件, 动画会滞后的反复执行，该如何处理呢?</p>\n<p>把 Script 标签 放在页面的最底部的body封闭之前 和封闭之后有什么区别？浏览器会如何解析它们？</p>\n<p>移动端的点击事件的有延迟，时间是多久，为什么会有？ 怎么解决这个延时？（click 有 300ms 延迟,为了实现safari的双击事件的设计，浏览器要知道你是不是要双击操作。）</p>\n<p>知道各种JS框架(Angular, Backbone, Ember, React, Meteor, Knockout…)么? 能讲出他们各自的优点和缺点么?</p>\n<p>Underscore 对哪些 JS 原生对象进行了扩展以及提供了哪些好用的函数方法？</p>\n<p>解释JavaScript中的作用域与变量声明提升？</p>\n<p>那些操作会造成内存泄漏？</p>\n<p>内存泄漏指任何对象在您不再拥有或需要它之后仍然存在。<br>垃圾回收器定期扫描对象，并计算引用了每个对象的其他对象的数量。如果一个对象的引用数量为 0（没有其他对象引用过该对象），或对该对象的惟一引用是循环的，那么该对象的内存即可回收。</p>\n<p>setTimeout 的第一个参数使用字符串而非函数的话，会引发内存泄漏。<br>闭包、控制台日志、循环（在两个对象彼此引用且彼此保留时，就会产生一个循环）<br>JQuery一个对象可以同时绑定多个事件，这是如何实现的？</p>\n<p>Node.js的适用场景？</p>\n<p>(如果会用node)知道route, middleware, cluster, nodemon, pm2, server-side rendering么?</p>\n<p>解释一下 Backbone 的 MVC 实现方式？</p>\n<p>什么是“前端路由”?什么时候适合使用“前端路由”? “前端路由”有哪些优点和缺点?</p>\n<p>知道什么是webkit么? 知道怎么用浏览器的各种工具来调试和debug代码么?</p>\n<p>如何测试前端代码么? 知道BDD, TDD, Unit Test么? 知道怎么测试你的前端工程么(mocha, sinon, jasmin, qUnit..)?</p>\n<p>前端templating(Mustache, underscore, handlebars)是干嘛的, 怎么用?</p>\n<p>简述一下 Handlebars 的基本用法？</p>\n<p>简述一下 Handlerbars 的对模板的基本处理流程， 如何编译的？如何缓存的？</p>\n<p>用js实现千位分隔符?(来源：前端农民工，提示：正则+replace)</p>\n<p>function commafy(num) {<br>     num = num + ‘’;<br>     var reg = /(-?d+)(d{3})/;</p>\n<pre><code>if(reg.test(num)){\n num = num.replace(reg, &apos;$1,$2&apos;);\n}\nreturn num;</code></pre><p>}<br>检测浏览器版本版本有哪些方式？</p>\n<p>功能检测、userAgent特征检测</p>\n<p>比如：navigator.userAgent<br>//“Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_2) AppleWebKit/537.36<br>  (KHTML, like Gecko) Chrome/41.0.2272.101 Safari/537.36”<br>What is a Polyfill?</p>\n<p>polyfill 是“在旧版浏览器上复制标准 API 的 JavaScript 补充”,可以动态地加载 JavaScript 代码或库，在不支持这些标准 API 的浏览器中模拟它们。<br>例如，geolocation（地理位置）polyfill 可以在 navigator 对象上添加全局的 geolocation 对象，还能添加 getCurrentPosition 函数以及“坐标”回调对象，<br>所有这些都是 W3C 地理位置 API 定义的对象和函数。因为 polyfill 模拟标准 API，所以能够以一种面向所有浏览器未来的方式针对这些 API 进行开发，<br>一旦对这些 API 的支持变成绝对大多数，则可以方便地去掉 polyfill，无需做任何额外工作。<br>做的项目中，有没有用过或自己实现一些 polyfill 方案（兼容性处理方案）？</p>\n<p>比如： html5shiv、Geolocation、Placeholder<br>我们给一个dom同时绑定两个点击事件，一个用捕获，一个用冒泡。会执行几次事件，会先执行冒泡还是捕获？</p>\n<p>ECMAScript6 相关</p>\n<p>Object.is() 与原来的比较操作符“ ===”、“ ==”的区别？</p>\n<p>两等号判等，会在比较时进行类型转换；<br>三等号判等(判断严格)，比较时不进行隐式类型转换,（类型不同则会返回false）； </p>\n<p>Object.is 在三等号判等的基础上特别处理了 NaN 、-0 和 +0 ，保证 -0 和 +0 不再相同，<br>但 Object.is(NaN, NaN) 会返回 true.</p>\n<p>Object.is 应被认为有其特殊的用途，而不能用它认为它比其它的相等对比更宽松或严格。<br>前端框架相关</p>\n<p>react-router 路由系统的实现原理？</p>\n<p>React中如何解决第三方类库的问题?</p>\n<p>其他问题</p>\n<p>原来公司工作流程是怎么样的，如何与其他人协作的？如何夸部门合作的？</p>\n<h3 id=\"你遇到过比较难的技术问题是？你是如何解决的？\"><a href=\"#你遇到过比较难的技术问题是？你是如何解决的？\" class=\"headerlink\" title=\"你遇到过比较难的技术问题是？你是如何解决的？\"></a>你遇到过比较难的技术问题是？你是如何解决的？</h3><p>设计模式 知道什么是singleton, factory, strategy, decrator么?</p>\n<p>常使用的库有哪些？常用的前端开发工具？开发过什么应用或组件？</p>\n<h3 id=\"页面重构怎么操作？\"><a href=\"#页面重构怎么操作？\" class=\"headerlink\" title=\"页面重构怎么操作？\"></a>页面重构怎么操作？</h3><p>网站重构：在不改变外部行为的前提下，简化结构、添加可读性，而在网站前端保持一致的行为。<br>也就是说是在不改变UI的情况下，对网站进行优化，在扩展的同时保持一致的UI。</p>\n<h3 id=\"对于传统的网站来说重构通常是：\"><a href=\"#对于传统的网站来说重构通常是：\" class=\"headerlink\" title=\"对于传统的网站来说重构通常是：\"></a>对于传统的网站来说重构通常是：</h3><p>表格(table)布局改为DIV+CSS<br>使网站前端兼容于现代浏览器(针对于不合规范的CSS、如对IE6有效的)<br>对于移动平台的优化<br>针对于SEO进行优化<br>深层次的网站重构应该考虑的方面</p>\n<p>减少代码间的耦合<br>让代码保持弹性<br>严格按规范编写代码<br>设计可扩展的API<br>代替旧有的框架、语言(如VB)<br>增强用户体验<br>通常来说对于速度的优化也包含在重构中</p>\n<p>压缩JS、CSS、image等前端资源(通常是由服务器来解决)<br>程序的性能优化(如数据读写)<br>采用CDN来加速资源加载<br>对于JS DOM的优化<br>HTTP服务器的文件缓存<br>列举IE与其他浏览器不一样的特性？</p>\n<p>1、事件不同之处：</p>\n<pre><code>触发事件的元素被认为是目标（target）。而在 IE 中，目标包含在 event 对象的 srcElement 属性；\n\n获取字符代码、如果按键代表一个字符（shift、ctrl、alt除外），IE 的 keyCode 会返回字符代码（Unicode），DOM 中按键的代码和字符是分离的，要获取字符代码，需要使用 charCode 属性；\n\n阻止某个事件的默认行为，IE 中阻止某个事件的默认行为，必须将 returnValue 属性设置为 false，Mozilla 中，需要调用 preventDefault() 方法；\n\n停止事件冒泡，IE 中阻止事件进一步冒泡，需要设置 cancelBubble 为 true，Mozzilla 中，需要调用 stopPropagation()；</code></pre><p>99%的网站都需要被重构是那本书上写的？</p>\n<p>网站重构：应用web标准进行设计（第2版）<br>什么叫优雅降级和渐进增强？</p>\n<p>优雅降级：Web站点在所有新式浏览器中都能正常工作，如果用户使用的是老式浏览器，则代码会针对旧版本的IE进行降级处理了,使之在旧式浏览器上以某种形式降级体验却不至于完全不能用。<br>如：border-shadow</p>\n<p>渐进增强：从被所有浏览器支持的基本功能开始，逐步地添加那些只有新版本浏览器才支持的功能,向页面增加不影响基础浏览器的额外样式和功能的。当浏览器支持时，它们会自动地呈现出来并发挥作用。<br>如：默认使用flash上传，但如果浏览器支持 HTML5 的文件上传功能，则使用HTML5实现更好的体验；<br>是否了解公钥加密和私钥加密。</p>\n<p>一般情况下是指私钥用于对数据进行签名，公钥用于对签名进行验证;<br>HTTP网站在浏览器端用公钥加密敏感数据，然后在服务器端再用私钥解密。<br>WEB应用从服务器主动推送Data到客户端有那些方式？</p>\n<p>html5提供的Websocket<br>不可见的iframe<br>WebSocket通过Flash<br>XHR长时间连接<br>XHR Multipart Streaming<br><code>&lt;script&gt;</code>标签的长时间连接(可跨域)<br>对Node的优点和缺点提出了自己的看法？</p>\n<p>*（优点）因为Node是基于事件驱动和无阻塞的，所以非常适合处理并发请求，<br>  因此构建在Node上的代理服务器相比其他技术实现（如Ruby）的服务器表现要好得多。<br>  此外，与Node代理服务器交互的客户端代码是由javascript语言编写的，<br>  因此客户端和服务器端都用同一种语言编写，这是非常美妙的事情。</p>\n<p>*（缺点）Node是一个相对新的开源项目，所以不太稳定，它总是一直在变，<br>  而且缺少足够多的第三方库支持。看起来，就像是Ruby/Rails当年的样子。</p>\n<h3 id=\"你有用过哪些前端性能优化的方法？\"><a href=\"#你有用过哪些前端性能优化的方法？\" class=\"headerlink\" title=\"你有用过哪些前端性能优化的方法？\"></a>你有用过哪些前端性能优化的方法？</h3><p>  （1） 减少http请求次数：CSS Sprites, JS、CSS源码压缩、图片大小控制合适；网页Gzip，CDN托管，data缓存 ，图片服务器。</p>\n<p>  （2） 前端模板 JS+数据，减少由于HTML标签导致的带宽浪费，前端用变量保存AJAX请求结果，每次操作本地变量，不用请求，减少请求次数</p>\n<p>  （3） 用innerHTML代替DOM操作，减少DOM操作次数，优化javascript性能。</p>\n<p>  （4） 当需要设置的样式很多时设置className而不是直接操作style。</p>\n<p>  （5） 少用全局变量、缓存DOM节点查找的结果。减少IO读取操作。</p>\n<p>  （6） 避免使用CSS Expression（css表达式)又称Dynamic properties(动态属性)。</p>\n<p>  （7） 图片预加载，将样式表放在顶部，将脚本放在底部  加上时间戳。</p>\n<p>  （8） 避免在页面的主体布局中使用table，table要等其中的内容完全下载之后才会显示出来，显示比div+css布局慢。<br>  对普通的网站有一个统一的思路，就是尽量向前端优化、减少数据库操作、减少磁盘IO。向前端优化指的是，在不影响功能和体验的情况下，能在浏览器执行的不要在服务端执行，能在缓存服务器上直接返回的不要到应用服务器，程序能直接取得的结果不要到外部取得，本机内能取得的数据不要到远程取，内存能取到的不要到磁盘取，缓存中有的不要去数据库查询。减少数据库操作指减少更新次数、缓存结果减少查询次数、将数据库执行的操作尽可能的让你的程序完成（例如join查询），减少磁盘IO指尽量不使用文件系统作为缓存、减少读写文件次数等。程序优化永远要优化慢的部分，换语言是无法“优化”的。</p>\n<h3 id=\"http状态码有那些？分别代表是什么意思？\"><a href=\"#http状态码有那些？分别代表是什么意思？\" class=\"headerlink\" title=\"http状态码有那些？分别代表是什么意思？\"></a>http状态码有那些？分别代表是什么意思？</h3><pre><code>简单版\n[\n    100  Continue   继续，一般在发送post请求时，已发送了http header之后服务端将返回此信息，表示确认，之后发送具体参数信息\n    200  OK         正常返回信息\n    201  Created    请求成功并且服务器创建了新的资源\n    202  Accepted   服务器已接受请求，但尚未处理\n    301  Moved Permanently  请求的网页已永久移动到新位置。\n    302 Found       临时性重定向。\n    303 See Other   临时性重定向，且总是使用 GET 请求新的 URI。\n    304  Not Modified 自从上次请求后，请求的网页未修改过。\n\n    400 Bad Request  服务器无法理解请求的格式，客户端不应当尝试再次使用相同的内容发起请求。\n    401 Unauthorized 请求未授权。\n    403 Forbidden   禁止访问。\n    404 Not Found   找不到如何与 URI 相匹配的资源。\n\n    500 Internal Server Error  最常见的服务器端错误。\n    503 Service Unavailable 服务器端暂时无法处理请求（可能是过载或维护）。\n]</code></pre><p>  完整版<br>  1**(信息类)：表示接收到请求并且继续处理<br>    100——客户必须继续发出请求<br>    101——客户要求服务器根据请求转换HTTP协议版本</p>\n<p>  2**(响应成功)：表示动作被成功接收、理解和接受<br>    200——表明该请求被成功地完成，所请求的资源发送回客户端<br>    201——提示知道新文件的URL<br>    202——接受和处理、但处理未完成<br>    203——返回信息不确定或不完整<br>    204——请求收到，但返回信息为空<br>    205——服务器完成了请求，用户代理必须复位当前已经浏览过的文件<br>    206——服务器已经完成了部分用户的GET请求</p>\n<p>  3**(重定向类)：为了完成指定的动作，必须接受进一步处理<br>    300——请求的资源可在多处得到<br>    301——本网页被永久性转移到另一个URL<br>    302——请求的网页被转移到一个新的地址，但客户访问仍继续通过原始URL地址，重定向，新的URL会在response中的Location中返回，浏览器将会使用新的URL发出新的Request。<br>    303——建议客户访问其他URL或访问方式<br>    304——自从上次请求后，请求的网页未修改过，服务器返回此响应时，不会返回网页内容，代表上次的文档已经被缓存了，还可以继续使用<br>    305——请求的资源必须从服务器指定的地址得到<br>    306——前一版本HTTP中使用的代码，现行版本中不再使用<br>    307——申明请求的资源临时性删除</p>\n<p>  4**(客户端错误类)：请求包含错误语法或不能正确执行<br>    400——客户端请求有语法错误，不能被服务器所理解<br>    401——请求未经授权，这个状态代码必须和WWW-Authenticate报头域一起使用<br>    HTTP 401.1 - 未授权：登录失败<br>    　　HTTP 401.2 - 未授权：服务器配置问题导致登录失败<br>    　　HTTP 401.3 - ACL 禁止访问资源<br>    　　HTTP 401.4 - 未授权：授权被筛选器拒绝<br>    HTTP 401.5 - 未授权：ISAPI 或 CGI 授权失败<br>    402——保留有效ChargeTo头响应<br>    403——禁止访问，服务器收到请求，但是拒绝提供服务<br>    HTTP 403.1 禁止访问：禁止可执行访问<br>    　　HTTP 403.2 - 禁止访问：禁止读访问<br>    　　HTTP 403.3 - 禁止访问：禁止写访问<br>    　　HTTP 403.4 - 禁止访问：要求 SSL<br>    　　HTTP 403.5 - 禁止访问：要求 SSL 128<br>    　　HTTP 403.6 - 禁止访问：IP 地址被拒绝<br>    　　HTTP 403.7 - 禁止访问：要求客户证书<br>    　　HTTP 403.8 - 禁止访问：禁止站点访问<br>    　　HTTP 403.9 - 禁止访问：连接的用户过多<br>    　　HTTP 403.10 - 禁止访问：配置无效<br>    　　HTTP 403.11 - 禁止访问：密码更改<br>    　　HTTP 403.12 - 禁止访问：映射器拒绝访问<br>    　　HTTP 403.13 - 禁止访问：客户证书已被吊销<br>    　　HTTP 403.15 - 禁止访问：客户访问许可过多<br>    　　HTTP 403.16 - 禁止访问：客户证书不可信或者无效<br>    HTTP 403.17 - 禁止访问：客户证书已经到期或者尚未生效<br>    404——一个404错误表明可连接服务器，但服务器无法取得所请求的网页，请求资源不存在。eg：输入了错误的URL<br>    405——用户在Request-Line字段定义的方法不允许<br>    406——根据用户发送的Accept拖，请求资源不可访问<br>    407——类似401，用户必须首先在代理服务器上得到授权<br>    408——客户端没有在用户指定的饿时间内完成请求<br>    409——对当前资源状态，请求不能完成<br>    410——服务器上不再有此资源且无进一步的参考地址<br>    411——服务器拒绝用户定义的Content-Length属性请求<br>    412——一个或多个请求头字段在当前请求中错误<br>    413——请求的资源大于服务器允许的大小<br>    414——请求的资源URL长于服务器允许的长度<br>    415——请求资源不支持请求项目格式<br>    416——请求中包含Range请求头字段，在当前请求资源范围内没有range指示值，请求也不包含If-Range请求头字段<br>    417——服务器不满足请求Expect头字段指定的期望值，如果是代理服务器，可能是下一级服务器不能满足请求长。</p>\n<p>  5**(服务端错误类)：服务器不能正确执行一个正确的请求<br>    HTTP 500 - 服务器遇到错误，无法完成请求<br>    　　HTTP 500.100 - 内部服务器错误 - ASP 错误<br>    　　HTTP 500-11 服务器关闭<br>    　　HTTP 500-12 应用程序重新启动<br>    　　HTTP 500-13 - 服务器太忙<br>    　　HTTP 500-14 - 应用程序无效<br>    　　HTTP 500-15 - 不允许请求 global.asa<br>    　　Error 501 - 未实现<br>  HTTP 502 - 网关错误<br>  HTTP 503：由于超载或停机维护，服务器目前无法使用，一段时间后可能恢复正常</p>\n<h3 id=\"一个页面从输入-URL-到页面加载显示完成，这个过程中都发生了什么？（流程说的越详细越好）\"><a href=\"#一个页面从输入-URL-到页面加载显示完成，这个过程中都发生了什么？（流程说的越详细越好）\" class=\"headerlink\" title=\"一个页面从输入 URL 到页面加载显示完成，这个过程中都发生了什么？（流程说的越详细越好）\"></a>一个页面从输入 URL 到页面加载显示完成，这个过程中都发生了什么？（流程说的越详细越好）</h3><p>  注：这题胜在区分度高，知识点覆盖广，再不懂的人，也能答出几句，<br>  而高手可以根据自己擅长的领域自由发挥，从URL规范、HTTP协议、DNS、CDN、数据库查询、<br>  到浏览器流式解析、CSS规则构建、layout、paint、onload/domready、JS执行、JS API绑定等等；</p>\n<p>  详细版：<br>    1、浏览器会开启一个线程来处理这个请求，对 URL 分析判断如果是 http 协议就按照 Web 方式来处理;<br>    2、调用浏览器内核中的对应方法，比如 WebView 中的 loadUrl 方法;<br>    3、通过DNS解析获取网址的IP地址，设置 UA 等信息发出第二个GET请求;<br>    4、进行HTTP协议会话，客户端发送报头(请求报头);<br>    5、进入到web服务器上的 Web Server，如 Apache、Tomcat、Node.JS 等服务器;<br>    6、进入部署好的后端应用，如 PHP、Java、JavaScript、Python 等，找到对应的请求处理;<br>    7、处理结束回馈报头，此处如果浏览器访问过，缓存上有对应资源，会与服务器最后修改时间对比，一致则返回304;<br>    8、浏览器开始下载html文档(响应报头，状态码200)，同时使用缓存;<br>    9、文档树建立，根据标记请求所需指定MIME类型的文件（比如css、js）,同时设置了cookie;<br>    10、页面开始渲染DOM，JS根据DOM API操作DOM,执行事件绑定等，页面显示完成。</p>\n<p>  简洁版：<br>    浏览器根据请求的URL交给DNS域名解析，找到真实IP，向服务器发起请求；<br>    服务器交给后台处理完成后返回数据，浏览器接收文件（HTML、JS、CSS、图象等）；<br>    浏览器对加载到的资源（HTML、JS、CSS等）进行语法解析，建立相应的内部数据结构（如HTML的DOM）；<br>    载入解析到的资源文件，渲染页面，完成。</p>\n<h3 id=\"部分地区用户反应网站很卡，请问有哪些可能性的原因，以及解决方法？\"><a href=\"#部分地区用户反应网站很卡，请问有哪些可能性的原因，以及解决方法？\" class=\"headerlink\" title=\"部分地区用户反应网站很卡，请问有哪些可能性的原因，以及解决方法？\"></a>部分地区用户反应网站很卡，请问有哪些可能性的原因，以及解决方法？</h3><p>从打开app到刷新出内容，整个过程中都发生了什么，如果感觉慢，怎么定位问题，怎么解决?</p>\n<p>除了前端以外还了解什么其它技术么？你最最厉害的技能是什么？</p>\n<p>你用的得心应手用的熟练地编辑器&amp;开发环境是什么样子？</p>\n<p>Sublime Text 3 + 相关插件编写前端代码<br>Google chrome 、Mozilla Firefox浏览器 +firebug 兼容测试和预览页面UI、动画效果和交互功能<br>Node.js+Gulp<br>git 用于版本控制和Code Review<br>对前端工程师这个职位是怎么样理解的？它的前景会怎么样？</p>\n<p>前端是最贴近用户的程序员，比后端、数据库、产品经理、运营、安全都近。<br>1、实现界面交互<br>2、提升用户体验<br>3、有了Node.js，前端可以实现服务端的一些事情</p>\n<p>前端是最贴近用户的程序员，前端的能力就是能让产品从 90分进化到 100 分，甚至更好，</p>\n<p>参与项目，快速高质量完成实现效果图，精确到1px；</p>\n<p>与团队成员，UI设计，产品经理的沟通；</p>\n<p>做好的页面结构，页面重构和用户体验；</p>\n<p>处理hack，兼容、写出优美的代码格式；</p>\n<p>针对服务器的优化、拥抱最新前端技术。<br>你怎么看待Web App 、hybrid App、Native App？</p>\n<p>你移动端前端开发的理解？（和 Web 前端开发的主要区别是什么？）</p>\n<p>你对加班的看法？</p>\n<p>加班就像借钱，原则应当是——救急不救穷<br>平时如何管理你的项目？</p>\n<p>先期团队必须确定好全局样式（globe.css），编码模式(utf-8) 等；</p>\n<p>编写习惯必须一致（例如都是采用继承式的写法，单样式都写成一行）；</p>\n<p>标注样式编写人，各模块都及时标注（标注关键样式调用的地方）；</p>\n<p>页面进行标注（例如 页面 模块 开始和结束）；</p>\n<p>CSS跟HTML 分文件夹并行存放，命名都得统一（例如style.css）；</p>\n<p>JS 分文件夹存放 命名以该JS功能为准的英文翻译。</p>\n<p>图片采用整合的 images.png png8 格式文件使用 尽量整合在一起使用方便将来的管理<br>如何设计突发大规模并发架构？</p>\n<p>当团队人手不足，把功能代码写完已经需要加班的情况下，你会做前端代码的测试吗？</p>\n<p>说说最近最流行的一些东西吧？常去哪些网站？</p>\n<pre><code>ES6\\WebAssembly\\Node\\MVVM\\Web Components\\React\\React Native\\Webpack 组件化</code></pre><h3 id=\"知道什么是SEO并且怎么优化么-知道各种meta-data的含义么\"><a href=\"#知道什么是SEO并且怎么优化么-知道各种meta-data的含义么\" class=\"headerlink\" title=\"知道什么是SEO并且怎么优化么? 知道各种meta data的含义么?\"></a>知道什么是SEO并且怎么优化么? 知道各种meta data的含义么?</h3><p>移动端（Android IOS）怎么做好用户体验?</p>\n<p>清晰的视觉纵线、<br>信息的分组、极致的减法、<br>利用选择代替输入、<br>标签及文字的排布方式、<br>依靠明文确认密码、<br>合理的键盘利用、<br>简单描述一下你做过的移动APP项目研发流程？</p>\n<p>你在现在的团队处于什么样的角色，起到了什么明显的作用？</p>\n<p>你认为怎样才是全端工程师（Full Stack developer）？</p>\n<p>介绍一个你最得意的作品吧？</p>\n<p>你有自己的技术博客吗，用了哪些技术？</p>\n<p>对前端安全有什么看法？</p>\n<p>是否了解Web注入攻击，说下原理，最常见的两种攻击（XSS 和 CSRF）了解到什么程度？</p>\n<p>项目中遇到国哪些印象深刻的技术难题，具体是什么问题，怎么解决？。</p>\n<p>最近在学什么东西？</p>\n<p>你的优点是什么？缺点是什么？</p>\n<p>如何管理前端团队?</p>\n<p>最近在学什么？能谈谈你未来3，5年给自己的规划吗？</p>"}],"PostAsset":[],"PostCategory":[{"post_id":"ckreo13nz0001ytt57uwvezh9","category_id":"ckreo13o40004ytt58hjn8xjv","_id":"ckreo13oa000dytt56y92dj1f"},{"post_id":"ckreo13o30003ytt53mb393g0","category_id":"ckreo13o80009ytt598p3alje","_id":"ckreo13oc000kytt5cg334p8y"},{"post_id":"ckreo13o9000cytt5b403ax9t","category_id":"ckreo13o40004ytt58hjn8xjv","_id":"ckreo13oe000pytt578er5wxm"},{"post_id":"ckreo13ob000gytt5gq2m4das","category_id":"ckreo13o40004ytt58hjn8xjv","_id":"ckreo13of000sytt5b97oawbe"},{"post_id":"ckreo13o60006ytt5g6llh3po","category_id":"ckreo13oa000eytt5ecifelfp","_id":"ckreo13oh000xytt56wmx9omt"},{"post_id":"ckreo13ob000iytt5dnfz4xhv","category_id":"ckreo13o40004ytt58hjn8xjv","_id":"ckreo13oi0010ytt5g4i700zl"},{"post_id":"ckreo13of000qytt5777zf1rq","category_id":"ckreo13oa000eytt5ecifelfp","_id":"ckreo13oj0015ytt50edu4xk4"},{"post_id":"ckreo13og000vytt5g0r20cp7","category_id":"ckreo13oa000eytt5ecifelfp","_id":"ckreo13ol0018ytt5dwr1csvh"},{"post_id":"ckreo13o70008ytt5365r52x2","category_id":"ckreo13oa000eytt5ecifelfp","_id":"ckreo13om001cytt5hrlg4zax"},{"post_id":"ckreo13oj0016ytt5gbyla99t","category_id":"ckreo13oa000eytt5ecifelfp","_id":"ckreo13op001iytt5hybx97fm"},{"post_id":"ckreo13od000nytt56m1v0vd9","category_id":"ckreo13ol0019ytt5c2w27rnu","_id":"ckreo13op001mytt5hnef38cu"},{"post_id":"ckreo13o70007ytt5duj07usa","category_id":"ckreo13oa000eytt5ecifelfp","_id":"ckreo13os001qytt5681ea8m0"},{"post_id":"ckreo13o70007ytt5duj07usa","category_id":"ckreo13oo001gytt549dj0iyh","_id":"ckreo13ot001sytt57xs70c2r"},{"post_id":"ckreo13oh000yytt57tuc6s76","category_id":"ckreo13ol0019ytt5c2w27rnu","_id":"ckreo13ot001uytt58w302926"},{"post_id":"ckreo13oi0012ytt54nh53264","category_id":"ckreo13oq001pytt55j94370b","_id":"ckreo13ov001zytt55y3x9z17"},{"post_id":"ckreo13om001aytt543i35nmu","category_id":"ckreo13oa000eytt5ecifelfp","_id":"ckreo13ox0026ytt53c8fdoiy"},{"post_id":"ckreo13om001aytt543i35nmu","category_id":"ckreo13oo001gytt549dj0iyh","_id":"ckreo13ox002aytt5cqyy6z32"},{"post_id":"ckreo13on001eytt57hby5f4e","category_id":"ckreo13oa000eytt5ecifelfp","_id":"ckreo13oy002cytt53f8g53og"},{"post_id":"ckreo13on001eytt57hby5f4e","category_id":"ckreo13ow0023ytt5eyxb58oi","_id":"ckreo13oz002fytt50t9pfyzv"},{"post_id":"ckreo13oo001hytt5dokwcvrr","category_id":"ckreo13oa000eytt5ecifelfp","_id":"ckreo13oz002gytt5gt0t5dpz"},{"post_id":"ckreo13oo001hytt5dokwcvrr","category_id":"ckreo13ox0027ytt5gkk90jlj","_id":"ckreo13oz002iytt5depsd655"},{"post_id":"ckreo13o9000bytt57hon86go","category_id":"ckreo13oa000eytt5ecifelfp","_id":"ckreo13p0002lytt5de3f3oq0"},{"post_id":"ckreo13o9000bytt57hon86go","category_id":"ckreo13ot001vytt55uba4aw3","_id":"ckreo13p0002nytt539sq1n2g"},{"post_id":"ckreo13o9000bytt57hon86go","category_id":"ckreo13oy002dytt50ocxfr96","_id":"ckreo13p0002oytt5djmthzwp"},{"post_id":"ckreo13po0037ytt513304t96","category_id":"ckreo13oa000eytt5ecifelfp","_id":"ckreo13pr003dytt5an8m69o7"},{"post_id":"ckreo13po0037ytt513304t96","category_id":"ckreo13oo001gytt549dj0iyh","_id":"ckreo13ps003fytt57gpb0845"},{"post_id":"ckreo13pp0038ytt55war515z","category_id":"ckreo13oa000eytt5ecifelfp","_id":"ckreo13ps003iytt51er5d54p"},{"post_id":"ckreo13pq003aytt5bq1m0jh5","category_id":"ckreo13oa000eytt5ecifelfp","_id":"ckreo13ps003kytt51r7e2gxd"},{"post_id":"ckreo13pq003aytt5bq1m0jh5","category_id":"ckreo13ox0027ytt5gkk90jlj","_id":"ckreo13pt003mytt54l776r6g"},{"post_id":"ckreo13pr003cytt51xxvg43d","category_id":"ckreo13oa000eytt5ecifelfp","_id":"ckreo13pt003pytt55cib0xg7"},{"post_id":"ckreo13pr003cytt51xxvg43d","category_id":"ckreo13ps003hytt55dv3fzac","_id":"ckreo13pt003qytt5ai1g5o6d"},{"post_id":"ckreo13q6003rytt5chdu62y7","category_id":"ckreo13oa000eytt5ecifelfp","_id":"ckreo13q8003wytt5atacgfzz"},{"post_id":"ckreo13q6003rytt5chdu62y7","category_id":"ckreo13oo001gytt549dj0iyh","_id":"ckreo13q8003yytt5cg4mb4i8"},{"post_id":"ckreo13q7003sytt5dj8t5qf2","category_id":"ckreo13oa000eytt5ecifelfp","_id":"ckreo13q8003zytt57loa9ki5"},{"post_id":"ckreo13q7003sytt5dj8t5qf2","category_id":"ckreo13q8003vytt57z6w5kmr","_id":"ckreo13q80040ytt56q1i09mr"},{"post_id":"ckreo13r00041ytt5gq9zd15u","category_id":"ckreo13oa000eytt5ecifelfp","_id":"ckreo13r10043ytt5grz566f1"}],"PostTag":[{"post_id":"ckreo13nz0001ytt57uwvezh9","tag_id":"ckreo13o50005ytt50z8u1kfr","_id":"ckreo13ob000hytt54du1bzst"},{"post_id":"ckreo13nz0001ytt57uwvezh9","tag_id":"ckreo13o8000aytt5ga40eml8","_id":"ckreo13oc000jytt5bhisg42p"},{"post_id":"ckreo13o9000cytt5b403ax9t","tag_id":"ckreo13o50005ytt50z8u1kfr","_id":"ckreo13oe000oytt53hkfege5"},{"post_id":"ckreo13o9000cytt5b403ax9t","tag_id":"ckreo13o8000aytt5ga40eml8","_id":"ckreo13of000rytt5a4qd72up"},{"post_id":"ckreo13ob000gytt5gq2m4das","tag_id":"ckreo13o50005ytt50z8u1kfr","_id":"ckreo13oh000wytt57d6u6vr4"},{"post_id":"ckreo13ob000gytt5gq2m4das","tag_id":"ckreo13o8000aytt5ga40eml8","_id":"ckreo13oi000zytt54utc8pct"},{"post_id":"ckreo13ob000iytt5dnfz4xhv","tag_id":"ckreo13o50005ytt50z8u1kfr","_id":"ckreo13oj0014ytt54cufcsww"},{"post_id":"ckreo13ob000iytt5dnfz4xhv","tag_id":"ckreo13o8000aytt5ga40eml8","_id":"ckreo13ol0017ytt5adxx72rk"},{"post_id":"ckreo13o30003ytt53mb393g0","tag_id":"ckreo13oa000fytt56la07tm5","_id":"ckreo13om001bytt57lnf9nbf"},{"post_id":"ckreo13o30003ytt53mb393g0","tag_id":"ckreo13oc000mytt57tfw9prx","_id":"ckreo13on001fytt54hs0ewnr"},{"post_id":"ckreo13o60006ytt5g6llh3po","tag_id":"ckreo13og000uytt553jmaslr","_id":"ckreo13op001jytt5a4hw0nx3"},{"post_id":"ckreo13o60006ytt5g6llh3po","tag_id":"ckreo13oj0013ytt5ffjgaapq","_id":"ckreo13op001lytt5buzy8p0p"},{"post_id":"ckreo13o70007ytt5duj07usa","tag_id":"ckreo13og000uytt553jmaslr","_id":"ckreo13ot001tytt57tkuf5hb"},{"post_id":"ckreo13o70007ytt5duj07usa","tag_id":"ckreo13op001kytt50b6te5i7","_id":"ckreo13ou001wytt5g0qdfu26"},{"post_id":"ckreo13o70007ytt5duj07usa","tag_id":"ckreo13oq001oytt520l5c739","_id":"ckreo13ov001yytt51tkhfkpq"},{"post_id":"ckreo13o70008ytt5365r52x2","tag_id":"ckreo13og000uytt553jmaslr","_id":"ckreo13ov0021ytt51ohx52xi"},{"post_id":"ckreo13o9000bytt57hon86go","tag_id":"ckreo13og000uytt553jmaslr","_id":"ckreo13ox0025ytt5fwz4860n"},{"post_id":"ckreo13o9000bytt57hon86go","tag_id":"ckreo13ow0022ytt58s1mduiu","_id":"ckreo13ox0028ytt59pgkbzkr"},{"post_id":"ckreo13od000nytt56m1v0vd9","tag_id":"ckreo13ow0024ytt562se1t8z","_id":"ckreo13oy002bytt55f3q1iny"},{"post_id":"ckreo13of000qytt5777zf1rq","tag_id":"ckreo13og000uytt553jmaslr","_id":"ckreo13oz002jytt5hevrdu7h"},{"post_id":"ckreo13of000qytt5777zf1rq","tag_id":"ckreo13oj0013ytt5ffjgaapq","_id":"ckreo13p0002kytt546k0cxw2"},{"post_id":"ckreo13og000vytt5g0r20cp7","tag_id":"ckreo13og000uytt553jmaslr","_id":"ckreo13p1002qytt5hdzre6jp"},{"post_id":"ckreo13og000vytt5g0r20cp7","tag_id":"ckreo13p0002mytt51waf9uxn","_id":"ckreo13p1002rytt5b0j4hlli"},{"post_id":"ckreo13oh000yytt57tuc6s76","tag_id":"ckreo13p0002pytt51lnxfv0q","_id":"ckreo13p2002tytt5e0z7gubq"},{"post_id":"ckreo13oi0012ytt54nh53264","tag_id":"ckreo13og000uytt553jmaslr","_id":"ckreo13p2002vytt5g8baav9a"},{"post_id":"ckreo13oi0012ytt54nh53264","tag_id":"ckreo13p1002sytt597hp60b2","_id":"ckreo13p2002wytt56ngh888p"},{"post_id":"ckreo13oj0016ytt5gbyla99t","tag_id":"ckreo13og000uytt553jmaslr","_id":"ckreo13p3002yytt5c46u5g25"},{"post_id":"ckreo13oj0016ytt5gbyla99t","tag_id":"ckreo13p2002uytt51woy4yr2","_id":"ckreo13p3002zytt5ecm8he4r"},{"post_id":"ckreo13om001aytt543i35nmu","tag_id":"ckreo13op001kytt50b6te5i7","_id":"ckreo13p30031ytt58yjcgrsf"},{"post_id":"ckreo13on001eytt57hby5f4e","tag_id":"ckreo13p30030ytt5b51jcmpt","_id":"ckreo13p40033ytt53vg73xcv"},{"post_id":"ckreo13oo001hytt5dokwcvrr","tag_id":"ckreo13p40032ytt5a5fj1cqy","_id":"ckreo13p50035ytt5h9z35pmw"},{"post_id":"ckreo13oo001hytt5dokwcvrr","tag_id":"ckreo13p40034ytt5dafj0dn4","_id":"ckreo13p50036ytt5bq0k4hh9"},{"post_id":"ckreo13pp0038ytt55war515z","tag_id":"ckreo13og000uytt553jmaslr","_id":"ckreo13pr003bytt57io8f2qg"},{"post_id":"ckreo13pq003aytt5bq1m0jh5","tag_id":"ckreo13og000uytt553jmaslr","_id":"ckreo13ps003eytt54bfrdxtc"},{"post_id":"ckreo13pq003aytt5bq1m0jh5","tag_id":"ckreo13p40032ytt5a5fj1cqy","_id":"ckreo13ps003gytt55mg83w4c"},{"post_id":"ckreo13pr003cytt51xxvg43d","tag_id":"ckreo13og000uytt553jmaslr","_id":"ckreo13ps003jytt59mqucapa"},{"post_id":"ckreo13po0037ytt513304t96","tag_id":"ckreo13og000uytt553jmaslr","_id":"ckreo13pt003lytt56sht9of2"},{"post_id":"ckreo13po0037ytt513304t96","tag_id":"ckreo13op001kytt50b6te5i7","_id":"ckreo13pt003nytt56t1i3u0k"},{"post_id":"ckreo13po0037ytt513304t96","tag_id":"ckreo13pq0039ytt513pefv0r","_id":"ckreo13pt003oytt59ec215jl"},{"post_id":"ckreo13q6003rytt5chdu62y7","tag_id":"ckreo13og000uytt553jmaslr","_id":"ckreo13q7003tytt5d9j20m44"},{"post_id":"ckreo13q6003rytt5chdu62y7","tag_id":"ckreo13op001kytt50b6te5i7","_id":"ckreo13q7003uytt57u0l3i2s"},{"post_id":"ckreo13q7003sytt5dj8t5qf2","tag_id":"ckreo13og000uytt553jmaslr","_id":"ckreo13q8003xytt5eg1r278w"},{"post_id":"ckreo13r00041ytt5gq9zd15u","tag_id":"ckreo13og000uytt553jmaslr","_id":"ckreo13r10044ytt51bwx7gu6"},{"post_id":"ckreo13r00041ytt5gq9zd15u","tag_id":"ckreo13r10042ytt53x95fuin","_id":"ckreo13r10045ytt57r9d0igy"}],"Tag":[{"name":"Leetcode","_id":"ckreo13o50005ytt50z8u1kfr"},{"name":"笔试题","_id":"ckreo13o8000aytt5ga40eml8"},{"name":"algorithm","_id":"ckreo13oa000fytt56la07tm5"},{"name":"dp","_id":"ckreo13oc000mytt57tfw9prx"},{"name":"FE","_id":"ckreo13og000uytt553jmaslr"},{"name":"css","_id":"ckreo13oj0013ytt5ffjgaapq"},{"name":"React","_id":"ckreo13op001kytt50b6te5i7"},{"name":"react-router","_id":"ckreo13oq001oytt520l5c739"},{"name":"jquery","_id":"ckreo13ow0022ytt58s1mduiu"},{"name":"sort","_id":"ckreo13ow0024ytt562se1t8z"},{"name":"js","_id":"ckreo13p0002mytt51waf9uxn"},{"name":"BinarySearch","_id":"ckreo13p0002pytt51lnxfv0q"},{"name":"浏览器","_id":"ckreo13p1002sytt597hp60b2"},{"name":"设计模式","_id":"ckreo13p2002uytt51woy4yr2"},{"name":"security","_id":"ckreo13p30030ytt5b51jcmpt"},{"name":"es6","_id":"ckreo13p40032ytt5a5fj1cqy"},{"name":"Promise","_id":"ckreo13p40034ytt5dafj0dn4"},{"name":"redux","_id":"ckreo13pq0039ytt513pefv0r"},{"name":"面试","_id":"ckreo13r10042ytt53x95fuin"}]}}